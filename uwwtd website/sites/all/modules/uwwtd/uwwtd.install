<?php 

//todo desactivate cron
//todo check mobule exist and enabled
//todo change content block (link, ..) by country
//todo cange menu
/***************************************************************************/
// HOOK
/***************************************************************************/
function uwwtd_install() 
{
    uwwtd_install_trace(__FUNCTION__);
    
    //on install,,execute all update function defined
    for ($i = 7100; $i < 7199; $i++) {
        $candidate = 'uwwtd_update_' . $i;
        if (function_exists($candidate)) {
          $candidate();
        }
    }
  
//     uwwtd_delete_view('UWWTD_Agglomeration');
//     uwwtd_delete_view('UWWTD_BigCity');
//     uwwtd_delete_view('UWWTD_Compliance_Agglo');
//     uwwtd_delete_view('UWWTD_Compliance_UWWTP');
//     uwwtd_delete_view('UWWTD_DischargePoint');
//     uwwtd_delete_view('UWWTD_ReceivingArea');
//     uwwtd_delete_view('UWWTD_UrbanWasteWaterTreatmentPlant');
//     uwwtd_delete_view('UWWTD_UWWTPs_Agglo');
//         
//     uwwtd_update_node_title_size();
//     
//     uwwtd_create_or_replace_view('UWWTD_Agglomeration');
//     uwwtd_create_or_replace_view('UWWTD_BigCity');
//     uwwtd_create_or_replace_view('UWWTD_Compliance_Agglo');
//     uwwtd_create_or_replace_view('UWWTD_Compliance_UWWTP');
//     uwwtd_create_or_replace_view('UWWTD_DischargePoint');
//     uwwtd_create_or_replace_view('UWWTD_ReceivingArea');
//     uwwtd_create_or_replace_view('UWWTD_UrbanWasteWaterTreatmentPlant');
//     uwwtd_create_or_replace_view('UWWTD_UWWTPs_Agglo');
//     
//     uwwtd_create_schema_wfs(); 
}

function uwwtd_enable() 
{
    uwwtd_install_trace(__FUNCTION__);
} 

function uwwtd_disable() 
{
    uwwtd_install_trace(__FUNCTION__);
}    

function uwwtd_uninstall() 
{
    uwwtd_install_trace(__FUNCTION__);
}

function uwwtd_schema() 
{
    uwwtd_install_trace(__FUNCTION__);
    
    $schema['uwwtd_import_errors'] = array(
    'description' => 'Table for storing all import errors',
    'fields' => array(
      'errid' => array(
        'description' => 'The primary identifier for a error.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'Type of the error.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => NULL,
      ),
      'category' => array(
        'description' => 'Category of the error',
        'type' => 'int',
        'not null' => FALSE,
        'default' => NULL,
      ),
      'year' => array(
          'description' => 'reference year of data',
          'type' => 'int',
          'not null' => false,
          'default' => NULL,
      ),
      'error' => array(
        'description' => 'description of the error.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'medium',
      ),
      'date' => array(
          'description' => 'The Unix timestamp of the error.',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
      ),
      'entity_type' => array(
          'description' => 'The type of entity.',
          'type' => 'varchar',
          'length' => 32,
          'not null' => FALSE,
      ),
      'entity_id' => array(
          'description' => 'The primary identifier for an entity.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => FALSE,
       ),
       'bundle' => array(
          'description' => 'The bundle to which this entity belongs.',
          'type' => 'varchar',
          'length' => 128,
          'not null' => FALSE,
        ),
    ),
    'indexes' => array(
      'uwwtd_err_date'        => array('date'),
      'uwwtd_err_entity_id'        => array('entity_id'),
      'uwwtd_err_type'        => array('type'),
      'uwwtd_err_cat'        => array('category'),
      
    ),
    'primary key' => array('errid'),
  );
  return $schema; 
}



/**
 * create table uwwtd_import_errors (if table already exist, table will be truncate and update will be displayed as failed, but it is not important,
 * we run this update only to tell drupal this table exist and it can use it now) 
 */ 
function uwwtd_update_7100() 
{
    uwwtd_install_trace(__FUNCTION__);
    $schema = module_invoke('uwwtd', 'schema');
    $sTableName ='uwwtd_import_errors';
    if (true === db_table_exists($sTableName)) {
        db_drop_table($sTableName);
    }
    db_create_table($sTableName, $schema['uwwtd_import_errors']);
}

/**
 * Create or replace views for geoserver
 * Create if not exists schema wfs use by hook_cron to create tables for geoserver based on the views of the same name 
 */ 
function uwwtd_update_7101() 
{
    uwwtd_install_trace(__FUNCTION__);
    //delete views for updating drupal node field title size
    uwwtd_delete_view('UWWTD_Agglomeration');
    uwwtd_delete_view('UWWTD_BigCity');
    uwwtd_delete_view('UWWTD_Compliance_Agglo');
    uwwtd_delete_view('UWWTD_Compliance_UWWTP');
    uwwtd_delete_view('UWWTD_DischargePoint');
    uwwtd_delete_view('UWWTD_ReceivingArea');
    uwwtd_delete_view('UWWTD_UrbanWasteWaterTreatmentPlant');
    uwwtd_delete_view('UWWTD_UWWTPs_Agglo');
    
    uwwtd_update_node_title_size();

    //recreate the view
    uwwtd_create_or_replace_view('UWWTD_Agglomeration');
    uwwtd_create_or_replace_view('UWWTD_BigCity');
    uwwtd_create_or_replace_view('UWWTD_Compliance_Agglo');
    uwwtd_create_or_replace_view('UWWTD_Compliance_UWWTP');
    uwwtd_create_or_replace_view('UWWTD_DischargePoint');
    uwwtd_create_or_replace_view('UWWTD_ReceivingArea');
    uwwtd_create_or_replace_view('UWWTD_UrbanWasteWaterTreatmentPlant');
    uwwtd_create_or_replace_view('UWWTD_UWWTPs_Agglo');
    
    uwwtd_create_schema_wfs();
}

/**
 * Delete node type error if still in database
 */ 
function uwwtd_update_7102()
{
    uwwtd_install_trace(__FUNCTION__);
    uwwtd_delete_node_type_error();
} 

/**
 * Add more choice in some field (uwwcompliance, aggcompliance, ...) and change label of some field 
 * add value in 
 * - field_uwwperformance_met, field_uwwtreatment_met, field_uwwcompliance
 * - field_aggcompliance, field_aggart3compliance, field_aggart4compliance, field_aggart5compliance, field_aggart6compliance
 * change label in
 *   field_linked_agglomerations     Linked agglomeration(s)
 *   field_linked_discharge_points   Linked discharge point(s)
 *   ...
 */
function uwwtd_update_7103()
{
    uwwtd_install_trace(__FUNCTION__);
    $msg_error = '';
    // Clear the field cache so we've got a clean slate to start on
    uwwtd_delete_view('UWWTD_Agglomeration');
    uwwtd_delete_view('UWWTD_BigCity');
    uwwtd_delete_view('UWWTD_Compliance_Agglo');
    uwwtd_delete_view('UWWTD_Compliance_UWWTP');
    uwwtd_delete_view('UWWTD_DischargePoint');
    uwwtd_delete_view('UWWTD_ReceivingArea');
    uwwtd_delete_view('UWWTD_UrbanWasteWaterTreatmentPlant');
    uwwtd_delete_view('UWWTD_UWWTPs_Agglo');
        
    field_cache_clear();
    
    $field = array (
      'field_name' => 'field_uwwperformance_met',
      'type' => 'list_text',
      'settings' => array (
        'allowed_values' => array (
          2 => 'Not Calculable',
          1 => 'Yes',
          0 => 'No',
        ),
        'allowed_values_function' => '',
      ),
    );
    
    try {
        field_update_field($field);
    } catch (Exception $e) {
        $msg = "Error update field : ".$field['field_name']."\n";
        $msg .= $e->getMessage() . "\n"; 
        uwwtd_install_trace($msg);
        $msg_error .= $msg . "\n";             
    }
    
    $field = array (
      'field_name' => 'field_uwwtreatment_met',
      'type' => 'list_text',
      'settings' => array (
        'allowed_values' => array (
          2 => 'Not Calculable',
          1 => 'Yes',
          0 => 'No',
        ),
        'allowed_values_function' => '',
      ),
    );
    
    try {
        field_update_field($field);
    } catch (Exception $e) {
        $msg = "Error update field : ".$field['field_name']."\n";
        $msg .= $e->getMessage() . "\n"; 
        uwwtd_install_trace($msg);
        $msg_error .= $msg . "\n";             
    }
    
    $field = array (
      'field_name' => 'field_uwwcompliance',
      'type' => 'list_text',
      'settings' => array (
        'allowed_values' => array (
          'NI' => 'No information',
          'NR' => 'Not relevant',
          'C' => 'Compliant',
          'NC' => 'Not compliant',
          'CE' => 'Compliant on equipment only',
          '?' => '?',
        ),
        'allowed_values_function' => '',
      ),
    );
    
    try {
        field_update_field($field);
    } catch (Exception $e) {
        $msg = "Error update field : ".$field['field_name']."\n";
        $msg .= $e->getMessage() . "\n"; 
        uwwtd_install_trace($msg);
        $msg_error .= $msg . "\n";             
    }
    
    $field = array (
      'field_name' => 'field_aggcompliance',
      'type' => 'list_text',
      'settings' => array (
        'allowed_values' => array (
          'NI' => 'No information',
          'NR' => 'Not relevant',
          'NC' => 'Not compliant',
          'C' => 'Compliants',
          '?' => '?',
        ),
        'allowed_values_function' => '',
      ),
    );
    
    try {
        field_update_field($field);
    } catch (Exception $e) {
        $msg = "Error update field : ".$field['field_name']."\n";
        $msg .= $e->getMessage() . "\n"; 
        uwwtd_install_trace($msg);
        $msg_error .= $msg . "\n";             
    }
    
    $field = array (
      'field_name' => 'field_aggart3compliance',
      'type' => 'list_text',
      'settings' => array (
        'allowed_values' => array (
          'NI' => 'No information',
          'C' => 'Compliant',
          'AddQC' => 'Not compliant',
          'QC' => 'Compliant',
          'NC' => 'Not compliant',
          'NR' => 'Not relevant',
          '?' => '?',
        ),
        'allowed_values_function' => '',
      ),
    );
    
    try {
        field_update_field($field);
    } catch (Exception $e) {
        $msg = "Error update field : ".$field['field_name']."\n";
        $msg .= $e->getMessage() . "\n"; 
        uwwtd_install_trace($msg);
        $msg_error .= $msg . "\n";             
    }
    
    $field = array (
      'field_name' => 'field_aggart4compliance',
      'type' => 'list_text',
      'settings' => array (
        'allowed_values' => array (
          'C' => 'Compliant',
          'NC' => 'Not compliant',
          'NR' => 'Not relevant',
          'NI' => 'No information',
          'RNC' => 'Not compliant',
          '?' => '?',
        ),
        'allowed_values_function' => '',
      ),
    );
    
    try {
        field_update_field($field);
    } catch (Exception $e) {
        $msg = "Error update field : ".$field['field_name']."\n";
        $msg .= $e->getMessage() . "\n"; 
        uwwtd_install_trace($msg);
        $msg_error .= $msg . "\n";             
    }    
    
    $field = array (
      'field_name' => 'field_aggart5compliance',
      'type' => 'list_text',
      'settings' => array (
        'allowed_values' => array (
          'NI' => 'No information',
          'NR' => 'Not relevant',
          'C' => 'Compliant',
          'NC' => 'Not compliant',
          '?' => '?',
        ),
        'allowed_values_function' => '',
      ),
    );
    
    try {
        field_update_field($field);
    } catch (Exception $e) {
        $msg = "Error update field : ".$field['field_name']."\n";
        $msg .= $e->getMessage() . "\n"; 
        uwwtd_install_trace($msg);
        $msg_error .= $msg . "\n";             
    }
    
    $field = array (
      'field_name' => 'field_aggart6compliance',
      'type' => 'list_text',
      'settings' => array (
        'allowed_values' => array (
          'C' => 'Compliant',
          'NC' => 'Not compliant',
          'NR' => 'Not relevant',
          'NI' => 'No information',
          'RNC' => 'Not compliant',
          '?' => '?',
        ),
        'allowed_values_function' => '',
      ),
    );
    
    try {
        field_update_field($field);
    } catch (Exception $e) {
        $msg = "Error update field : ".$field['field_name']."\n";
        $msg .= $e->getMessage() . "\n"; 
        uwwtd_install_trace($msg);
        $msg_error .= $msg . "\n";             
    }
    
    //change label on some field
    $list_field = array(
        'field_linked_agglomerations'     => 'Linked agglomeration(s)',
        'field_linked_discharge_points'   => 'Linked discharge point(s)',
        'field_linked_receiving_areas'    => 'Linked receiving area(s)',
        'field_uwwotherperf'              => 'Treatment performance: Other',
        'field_uwwbodincoming'            => 'Incoming load BOD (t per year)',
        'field_uwwcodincoming'            => 'Incoming load COD (t per year)',
        'field_uwwnincoming'              => 'Incoming load Ntot (t per year)',
        'field_uwwpincoming'              => 'Incoming load Ptot (t per year)',
        'field_uwwboddischarge'           => 'Discharged load BOD (t per year)',
        'field_uwwcoddischarge'           => 'Discharged load COD (t per year)',
        'field_uwwndischarge'             => 'Discharged load Ntot (t per year)',
        'field_uwwpdischarge'             => 'Discharged load Ptot (t per year)',
        'field_uwwbodincomingcalculated'  => 'Incoming load BOD-tot Calculated',
        'field_uwwcodincomingcalculated'  => 'Incoming load COD-tot Calculated',
        'field_uwwnincomingcalculated'    => 'Incoming load N-tot Calculated',
        'field_uwwpincomingcalculated'    => 'Incoming load P-tot Calculated',
        'field_uwwboddischargecalculated' => 'Discharged load BOD-tot Calculated',
        'field_uwwboddischargeestimated'  => 'Discharged load BOD-tot Estimated',
        'field_uwwcoddischargecalculated' => 'Discharged load COD-tot Calculated',
        'field_uwwcoddischargeestimated'  => 'Discharged load COD-tot Estimated',
        'field_uwwndischargeestimated'    => 'Discharged load N-tot Estimated',
        'field_uwwpdischargecalculated'   => 'Discharged load P-tot Calculated',
        'field_uwwpdischargeestimated'    => 'Discharged load P-tot Estimated',
        'field_uwwbodincomingestimated'   => 'Incoming load BOD-tot Estimated',
        'field_uwwcodincomingestimated'   => 'Incoming load COD-tot Estimated',
        'field_uwwnincomingestimated'     => 'Incoming load N-tot Estimated',
        'field_uwwpincomingestimated'     => 'Incoming load P-tot Estimated',
        'field_uwwndischargecalculated'   => 'Discharged load N-tot Calculated',
    );     
    
    foreach($list_field as $field_name => $new_label) {
        $field_instance = field_info_instance('node', $field_name, 'uwwtp');
        if (is_null($field_instance)) {
            $msg = "Unknown field instance : $field_name => $new_label";
            uwwtd_install_trace($msg);
            $msg_error .= $msg . "\n";
            continue;
        }
        $field_instance['label'] = $new_label;
        try {
            field_update_instance($field_instance);
        } catch (Exception $e) {
            $msg = "Error update field instance : $field_name => $new_label" . "\n";
            $msg .= $e->getMessage() . "\n"; 
            uwwtd_install_trace($msg);
            $msg_error .= $msg . "\n";    
        }      
    }
    
    uwwtd_create_or_replace_view('UWWTD_Agglomeration');
    uwwtd_create_or_replace_view('UWWTD_BigCity');
    uwwtd_create_or_replace_view('UWWTD_Compliance_Agglo');
    uwwtd_create_or_replace_view('UWWTD_Compliance_UWWTP');
    uwwtd_create_or_replace_view('UWWTD_DischargePoint');
    uwwtd_create_or_replace_view('UWWTD_ReceivingArea');
    uwwtd_create_or_replace_view('UWWTD_UrbanWasteWaterTreatmentPlant');
    uwwtd_create_or_replace_view('UWWTD_UWWTPs_Agglo');    
    
    if ('' !== $msg_error) {
        throw new DrupalUpdateException($msg_error);
    } 
} 

/**
 * Delete all view creating in the UI
 * After this activate module uwwtd_views 
 */ 
function uwwtd_update_7104()
{
    uwwtd_install_trace(__FUNCTION__);
    $msg_error = '';
    $list_view = array(
        'agglomeration_conformity',
        'uwwtp_treatment',
        'uwwtp_map',
        'waste_water_network',
        'agglomeration',
        'data_deletion',
        'uwwtd_error_list',
        'test_receiving_areas',    
    );
    ctools_include('export');    
    foreach ($list_view as $view_name) {
        $view = ctools_export_crud_load('views_view', $view_name);
        if ($view) {
            try {
                $view->delete();
                uwwtd_install_trace('delete view ' . $view_name);
            } catch (Exception $e) {
                $msg = "Error, can\'t delete view " . $view_name . "\n" . $e->getMessage();
                uwwtd_install_trace($msg);
                $msg_error .= $msg;    
            }            
        } else {
            uwwtd_install_trace('view don\'t exists, can\'t delete view ' . $view_name);
        }
    }
    
    if ('' !== $msg_error) {
        throw new DrupalUpdateException($msg_error);
    }
    
    if (false === module_enable(array('uwwtd_views'))) {
        $msg = "Error, the module uwwtd_views can\'t be enabled, see in module page if a dependency is needed or if this module is installed";
        uwwtd_install_trace($msg);
        throw new DrupalUpdateException($msg);    
    }     
}
/**
 * replace all map and overlay previously created
 */ 
function uwwtd_update_7105()
{
    uwwtd_install_trace(__FUNCTION__);
    
    $list_map = array(
        'agg_compliance_map.inc',  //agglomeration/compliance
//         'agglomeration.inc',
//         'receiving_area_test.inc',
//         'uwwtd_network_map.inc',
//         'uwwtp_compliance_map.inc',
//         'uwwtp_treatment_map.inc',
        'waste_water_treatment_network_map.inc', //block home       
    );
    $list_overlay = array(
//         'agglomeration_conformity_openlayers_1.inc',
//         'agglomeration_openlayers_1.inc',
        'agglomerations.inc', //home
        'compliance_map.inc', //agglomeration/compliance
        'dcp.inc',            //home
//         'test_receiving_areas_openlayers_1.inc',
        'uwwtp.inc',         //home
//         'uwwtp_map_openlayers_1.inc',
//         'uwwtp_treatment_openlayers_2.inc',
//         'waste_water_network_openlayers_1.inc',
//         'waste_water_network_openlayers_2.inc',
//         'waste_water_network_openlayers_3.inc',
    ); 
    $list_style = array(
        'agglomerations_style.inc',
        'carr_bleu.inc',
//         'discharge_points_style.inc',
        'triangle_violet.inc',
//         'waste_water_treatment_plant_style.inc',
    );        
    $path = drupal_get_path('module', 'uwwtd') . '/script/openlayers/';
    $pathtomap     = $path . 'map/'; 
    $pathtooverlay = $path . 'overlay/';
    $pathtostyle = $path . 'style/';
    $msgexception = ''; 
    
    foreach($list_overlay as $filename) {
        include($pathtooverlay . $filename);
        
        uwwtd_install_trace($pathtooverlay . $filename);
        
        if (! isset($openlayers_layers)) {
            uwwtd_install_trace('Error on ' . $pathtooverlay . $filename . '.$openlayers_layers don\'t exists.');
        }  
        
        if (isset($openlayers_layers)) {
//             $s .=  $filename.'<br>';
//             $b = openlayers_preset_save($openlayers_layers);
//             $s.=':'.var_export($b, true).'<br>';
//              check all table openlayer _style, projection
            $row = array();
            $row['name'] = $openlayers_layers->name;
            $row['title'] = $openlayers_layers->title;
            $row['description'] = $openlayers_layers->description;
            $row['data'] = $openlayers_layers->data;
//             $result = drupal_write_record('openlayers_layers', $row, 'name');
//             echo '"'.$result.'"'; //2 = updatek, 1  insert, false == error
            $msgresult = 'ok';
            try {
                uwwtd_insert_openlayers('openlayers_layers', $row);
            } catch (Exception $e) {
                $msgresult = 'error';
                $msgexception .= 'Error : can\'t create openlayers layer ' . $filename . '('.$msgresult.')'."\n";
            }
// 
//             if ($result == 1) {
//                 $msgresult = 'insert';
//             } elseif ($result == 2) {
//                 $msgresult = 'update';
//             } elseif ($result == false) {
//                 $msgresult = 'error';
//                 $msgexception .= 'Error : can\'t create openlayers layer ' . $filename . '('.$msgresult.')'."\n";
//             } else { //unknown
//                 $msgresult = 'unknown';
//                 $msgexception .= 'Error : can\'t create openlayers layer ' . $filename . '('.$msgresult.')'."\n";
//             }
            uwwtd_install_trace('layer ' . $filename . ' result : ' . $msgresult);            
        }
    }
       
    foreach($list_map as $filename) {
        include($pathtomap . $filename);
        if (isset($openlayers_maps)) {
//             $s .= $filename.'<br>';
//             $b = openlayers_preset_save($openlayers_maps);
//             $s.=':'.var_export($b, true).'<br>';
            $row = array();
            $row['name'] = $openlayers_maps->name;
            $row['title'] = $openlayers_maps->title;
            $row['description'] = $openlayers_maps->description;
            $row['data'] = $openlayers_maps->data;
            $msgresult = 'ok';
            try {
                uwwtd_insert_openlayers('openlayers_maps', $row);
            } catch (Exception $e) {
                $msgresult = 'error';
                $msgexception .= 'Error : can\'t create openlayers map ' . $filename . '('.$msgresult.')'."\n";
            }
                        
//             $result = drupal_write_record('openlayers_maps', $row, 'name');
//             
//             if ($result == 1) {
//                 $msgresult = 'insert';
//             } elseif ($result == 2) {
//                 $msgresult = 'update';
//             } elseif ($result == false) {
//                 $msgresult = 'error';
//                 $msgexception .= 'Error : can\'t create openlayers map ' . $filename . '('.$msgresult.')'."\n";
//             } else { //unknown
//                 $msgresult = 'unknown';
//                 $msgexception .= 'Error : can\'t create openlayers map ' . $filename . '('.$msgresult.')'."\n";
//             }
            uwwtd_install_trace('map ' . $filename . ' result : ' . $msgresult);                                
        }
    }
    
    foreach($list_style as $filename) {
        include($pathtostyle . $filename);
        if (isset($openlayers_styles)) {
//             $s .= $filename.'<br>';
//             $b = openlayers_preset_save($openlayers_maps);
//             $s.=':'.var_export($b, true).'<br>';
            $row = array();
            $row['name'] = $openlayers_styles->name;
            $row['title'] = $openlayers_styles->title;
            $row['description'] = $openlayers_styles->description;
            $row['data'] = $openlayers_styles->data;
            $msgresult = 'ok';
            try {
                uwwtd_insert_openlayers('openlayers_styles', $row);
            } catch (Exception $e) {
                $msgresult = 'error';
                $msgexception .= 'Error : can\'t create openlayers style ' . $filename . '('.$msgresult.')'."\n";
            }
                        
//             $result = drupal_write_record('openlayers_styles', $row, 'name');
//             
//             if ($result == 1) {
//                 $msgresult = 'insert';
//             } elseif ($result == 2) {
//                 $msgresult = 'update';
//             } elseif ($result == false) {
//                 $msgresult = 'error';
//                 $msgexception .= 'Error : can\'t create openlayers style ' . $filename . '('.$msgresult.')'."\n";
//             } else { //unknown
//                 $msgresult = 'unknown';
//                 $msgexception .= 'Error : can\'t create openlayers style ' . $filename . '('.$msgresult.')'."\n";
//             }
            uwwtd_install_trace('style ' . $filename . ' result : ' . $msgresult);                             
        }
    }    

    if ($msgexception != '') {
        throw new DrupalUpdateException($msgexception);
    }
//     throw new DrupalUpdateException($msgexception . 'test');    
} 

/**
 * activate new block home
 * and desactivate home block view map 
 */ 
function uwwtd_update_7106()
{
    _block_rehash('uwwtd'); //theme name here
    //Change block settings old view
      db_update('block')
      ->fields(array(
          'pages' => "",
          'visibility' => 1,
      ))
      ->condition('module', 'views')
      ->condition('delta', 'waste_water_network-block_1')
      ->execute();
      
      
     db_merge('block')
        ->key(array(
          'theme' => 'uwwtd',
          'delta' => 'map_home',
          'module' => 'uwwtd',
        ))
        ->fields(array(
          'region' => 'content',
          'status' => 1,
          'weight' => -13,
          'pages' => "<front>",
          'visibility' => 1,
        ))
        ->execute();
                  
//     //new module
//     table block
//     module       uwwtd                  views
//     delta        map_home               waste_water_network-block_1
//     theme        uwwtd                  uwwtd
//     status       1                      1                          
//     pages        <front>                ''
//     region      content                 content
//     weight      -13
    drupal_flush_all_caches();
}

/**
 * Set country code for each country, set new map/layer, set map configuration accordingly
 */ 
function uwwtd_update_7107()
{
    global $conf;
    uwwtd_install_trace(__FUNCTION__);
    
    $path = drupal_get_path('module', 'uwwtd') . '/script/country/country.inc';
//     uwwtd_install_trace(var_export($path, true));
    include($path);
    
    if (false === isset($country_config)) {
        throw new DrupalUpdateException('Can\'t find the config country file in '. $path);
    }
    
    $error_message = 'Please, configure the file ' . DRUPAL_ROOT . 'sites/default/settings.php. Add the line
        $conf[\'siif_eru_country_code\'] = \'XX\';  
        at the end of the file and replace the XX by your country code you will find in this list ('.implode(',', array_keys($country_config)).')';
        
    if (! isset($conf['siif_eru_country_code'])) {            
        throw new DrupalUpdateException($error_message);
    }
//     
//     set database country code
    if (false === in_array($conf['siif_eru_country_code'], array_keys($country_config))) {
        throw new DrupalUpdateException($error_message);    
    }
    
//     uwwtd_install_trace(var_export($conf['siif_eru_country_code'], true));
//     uwwtd_install_trace(var_export($country_config, true));
//     uwwtd_install_trace(var_export(array_keys($country_config), true));
//     uwwtd_install_trace(var_export(in_array($conf['siif_eru_country_code'], array_keys($country_config)), true));
    
//     throw new DrupalUpdateException('test' . $error_message);  
    
    $country_code_to_save = strtolower($conf['siif_eru_country_code']);
    variable_set('siif_eru_country_code', $country_code_to_save);
    $country_code = variable_get('siif_eru_country_code', '-1');
    
    if ($country_code != $country_code_to_save) {
        throw new DrupalUpdateException('An error occured when saving the country code from settings.php');    
    }
    
    uwwtd_update_map_overlay($country_config, $country_code);
    //////////////////////////////////////////////////////////////    
    // home            map     waste_water_treatment_network_map
    //                 layer     agglomerations        
    //                             uwwtp       
    //                             dcp
    // agg/compliance  map       agg_compliance_map
    //                 layer     compliance_map
    // agg/treatement  map       agglomeration
    //                 layer    agglomeration_treatment
    // uwwtp/compliance  map     uwwtp_compliance_map
    //                 layer     uwwtp_compliance_map
    // uwwtp/treatement  map     uwwtp_treatment_map
    //                    layer   uwwtp_treatment
    //                        
//     $list_map = array(
//         'waste_water_treatment_network_map.inc',
//         'agg_compliance_map.inc',
//         'agglomeration.inc',
//         'uwwtp_compliance_map.inc',
//         'uwwtp_treatment_map.inc',
//     );
//     $list_overlay = array(
//         'agglomerations.inc',
//         'uwwtp.inc',
//         'dcp.inc',
//         'compliance_map.inc',
//         'agglomeration_treatment.inc',
//         'uwwtp_compliance_map.inc',
//         'uwwtp_treatment.inc',
//     ); 
//     $list_style = array(
//         'agglomerations_style.inc',
//         'carr_bleu.inc',
//         'triangle_violet.inc',
//     );        
//     $path = drupal_get_path('module', 'uwwtd') . '/script/openlayers/';
//     $pathtomap     = $path . 'map/'; 
//     $pathtooverlay = $path . 'overlay/';
//     $pathtostyle = $path . 'style/';
//     $msgexception = ''; 
//     foreach($list_overlay as $filename) {
//         include($pathtooverlay . $filename);
//         if (isset($openlayers_layers)) {
//             $row = array();
//             $row['name'] = $openlayers_layers->name;
//             $row['title'] = $openlayers_layers->title;
//             $row['description'] = date('Y/m/d H:i:s') . "\n" . $openlayers_layers->description;
//             $row['data'] = $openlayers_layers->data;
//             $msgresult = 'ok';
//             try {
//                 uwwtd_insert_openlayers('openlayers_layers', $row);
//             } catch (Exception $e) {
//                 $msgresult = 'error';
//                 $msgexception .= 'Error : can\'t create openlayers layer ' . $filename . '('.$msgresult.')'."\n";
//             }
//             uwwtd_install_trace('layer ' . $filename . ' result : ' . $msgresult);            
//         } else {
//             uwwtd_install_trace('Error, $openlayers_layers not found');          
//         }
//     }
//        
//     foreach($list_map as $filename) {
//         include($pathtomap . $filename);
//         if (isset($openlayers_maps)) {
// //             uwwtd_install_trace(var_export($openlayers_maps , true));
//             $row = array();
//             $row['name'] = $openlayers_maps->name;
//             $row['title'] = $openlayers_maps->title;            
//             $row['description'] = date('Y/m/d H:i:s') . "\n" . $openlayers_maps->description;
//             $openlayers_maps->data['center'] = $country_config[$country_code]['openlayers_maps']['center'];
//             $openlayers_maps->data['behaviors']['openlayers_behavior_gazetteer'] = $country_config[$country_code]['openlayers_maps']['behaviors']['openlayers_behavior_gazetteer'];
//             $row['data'] = $openlayers_maps->data;
// //             uwwtd_install_trace(var_export($openlayers_maps , true));
// //             uwwtd_install_trace(var_export($country_config[$country_code]['openlayers_maps']['center'] , true));
// //             uwwtd_install_trace(var_export($country_config[$country_code]['openlayers_maps']['behaviors']['openlayers_behavior_gazetteer'] , true));
//                  
//             $msgresult = 'ok';
//             try {
//                 uwwtd_insert_openlayers('openlayers_maps', $row);
//             } catch (Exception $e) {
//                 $msgresult = 'error';
//                 $msgexception .= 'Error : can\'t create openlayers map ' . $filename . '('.$msgresult.')'."\n";
//             }
// //             throw new DrupalUpdateException('test7108'); 
//             uwwtd_install_trace('map ' . $filename . ' result : ' . $msgresult);                                
//         }  else {
//             uwwtd_install_trace('Error, $openlayers_maps not found');          
//         }
//     }
//     
//     foreach($list_style as $filename) {
//         include($pathtostyle . $filename);
//         if (isset($openlayers_styles)) {
//             $row = array();
//             $row['name'] = $openlayers_styles->name;
//             $row['title'] = $openlayers_styles->title;
//             $row['description'] = date('Y/m/d H:i:s') . "\n" . $openlayers_styles->description;
//             $row['data'] = $openlayers_styles->data;
//             $msgresult = 'ok';
//             try {
//                 uwwtd_insert_openlayers('openlayers_styles', $row);
//             } catch (Exception $e) {
//                 $msgresult = 'error';
//                 $msgexception .= 'Error : can\'t create openlayers style ' . $filename . '('.$msgresult.')'."\n";
//             }
//                     
//             uwwtd_install_trace('style ' . $filename . ' result : ' . $msgresult);                             
//         }  else {
//             uwwtd_install_trace('Error, $openlayers_styles not found');          
//         }
//     }    
// 
//     if ($msgexception != '') {
//         throw new DrupalUpdateException($msgexception);
//     } 
    //////////////////////////   
    
    //set version
    variable_set('siif_eru_version', '7107');

    drupal_flush_all_caches();
        
//     throw new DrupalUpdateException('test7107');    
}

/**
 * Rebuild all cache data for all year
 */ 
function uwwtd_update_7108()
{
    drupal_load('module', 'uwwtd');
    uwwtd_update_cache_data();
    variable_set('siif_eru_version', '7108');
}

/**
 * Rebuild map and layer 
 */ 
function uwwtd_update_7109()
{
    uwwtd_install_trace(__FUNCTION__);
    $path = drupal_get_path('module', 'uwwtd') . '/script/country/country.inc';
    include($path);
    $country_code = variable_get('siif_eru_country_code', '-1');
    uwwtd_update_map_overlay($country_config, $country_code);    
    variable_set('siif_eru_version', '7109');
    drupal_flush_all_caches();    
}

/**
 * Replace View UWWTD_DischargePoint (error in left join)
 */ 
function uwwtd_update_7110()
{
    uwwtd_install_trace(__FUNCTION__);
    uwwtd_delete_view('UWWTD_DischargePoint'); 
    uwwtd_create_or_replace_view('UWWTD_DischargePoint');    
    drupal_flush_all_caches();
    drupal_load('module', 'uwwtd');
    uwwtd_update_cache_data();
    variable_set('siif_eru_version', '7110');      
}

/**
 * Delete unused sql view UWWTD_BigCity  UWWTD_Compliance_Agglo  UWWTD_Compliance_UWWTP UWWTD_UWWTPs_Agglo
 */ 
function uwwtd_update_7111()
{
    uwwtd_install_trace(__FUNCTION__);
    uwwtd_delete_view('UWWTD_BigCity');
    uwwtd_delete_view('UWWTD_Compliance_Agglo');
    uwwtd_delete_view('UWWTD_Compliance_UWWTP');
    uwwtd_delete_view('UWWTD_UWWTPs_Agglo');
    variable_set('siif_eru_version', '7111');      
}

/**
 * Delete menu main and import new one
 * update openlayer overlay  and add new field field_siteid in content_type agglo_uww   
 */ 
function uwwtd_update_7112()
{
    uwwtd_install_trace(__FUNCTION__);
    //check if module install
    //http://ftp.drupal.org/files/projects/menu_import-7.x-1.7.tar.gz
//     if(false === module_exists('menu_import')) {
//         throw new DrupalUpdateException('please install and enable the module menu_import for drupal 7 and continue the update process. (http://ftp.drupal.org/files/projects/menu_import-7.x-1.7.tar.gz)');    
//     }
    
    
    if (false === module_enable(array('menu_import'))) {
        throw new DrupalUpdateException("Error, the module menu_import can\'t be enabled, see in module page if a dependency is needed or if this module is installed");
    }
    $menu = array(
        'menu_name' => 'main-menu', // Drupal menu machine name
        'title' => 'Main menu', // Drupal menu display name
        'description' => 'The <em>Main</em> menu is used on many sites to show the major sections of the site, often in a top navigation bar.', // Optional menu description
    );
        
    menu_delete(array('menu_name' => $menu['menu_name']));
    
    menu_save($menu);
    //SEE menu_link_save($item); to create menu link
    
    //create a page for new download menu
    $node = new stdClass(); // We create a new node object
    $node->type = "page"; // Or any other content type you want
    $node->title = "Download";
    $node->language = LANGUAGE_NONE; // Or any language code if Locale module is enabled. More on this below *
    $node->path = array('alias' => 'content/download'); // Setting a node path
    node_object_prepare($node); // Set some default values.
    $node->uid = 1; // Or any id you wish
                               
    $node->body[$node->language][0]['value'] = '';
    $node->body[$node->language][0]['summary'] = '';
    $node->body[$node->language][0]['format'] = 'filtered_html'; // If field has a format, you need to define it. Here we define a default filtered_html format for a body field
    
    $node = node_submit($node); // Prepare node for a submit
    node_save($node); // After this call we'll get a nid
    

    //install new main menu    
    uwwtd_install_menu($menu, 'main-menu7112.json');   //todo change
    
    //update on overlay waste water (add a s to agglomeration)    
    $path = drupal_get_path('module', 'uwwtd') . '/script/country/country.inc';
    include($path);
    $country_code = variable_get('siif_eru_country_code', '-1');
    uwwtd_update_map_overlay($country_config, $country_code, array('waste_water_treatment_network_map.inc'), array('-'), array('-'));
    
    //add new field field_siteid in content_type agglo_uww                                                            
    field_cache_clear();    

    $instance = array(
        'field_name' => 'field_siteid',
        'entity_type' => 'node',
        'bundle' => 'agglo_uww',
      );

    $result = field_create_instance($instance);
             
    drupal_flush_all_caches();
    
    variable_set('siif_eru_version', __FUNCTION__);
}

/**
 * Rebuild map and layer and main menu    
 */ 
function uwwtd_update_7113()
{
    uwwtd_install_trace(__FUNCTION__); 
    //install new main menu
    $menu = array(
        'menu_name' => 'main-menu', // Drupal menu machine name
        'title' => 'Main menu', // Drupal menu display name
        'description' => 'The <em>Main</em> menu is used on many sites to show the major sections of the site, often in a top navigation bar.', // Optional menu description
    );
    drupal_flush_all_caches();     //needto clear cache, drupal must know the unew url uwwtps/pressure exist in hook_menu uwwtd_menu besfore creating new menu    
    menu_delete(array('menu_name' => $menu['menu_name']));    
    menu_save($menu);        
    uwwtd_install_menu($menu, 'main-menu7113.json');   //todo change
    
    
    $path = drupal_get_path('module', 'uwwtd') . '/script/country/country.inc';
    include($path);
    $country_code = variable_get('siif_eru_country_code', '-1');                              
    uwwtd_update_map_overlay($country_config, $country_code, array('uwwtp_pressure_map.inc'), 
                                                                array('uwwtp_bod_pressure_.inc',
                                                                        'uwwtp_cod_pressure_.inc',
                                                                        'uwwtp_n_pressure_.inc',
                                                                        'uwwtp_p_pressure_.inc',), 
                                                                array('-'));    
                                                                
    

                                                                    
    variable_set('siif_eru_version', __FUNCTION__);
    drupal_flush_all_caches();     
}

/**
 * Recall redo import main menu
 */ 
function uwwtd_update_7114()
{
    uwwtd_install_trace(__FUNCTION__);
    //install new main menu
    uwwtd_update_7113();
    variable_set('siif_eru_version', __FUNCTION__);
    drupal_flush_all_caches();
}

/**
 * Import main menu
 */ 
function uwwtd_update_7115()
{
    uwwtd_install_trace(__FUNCTION__);
    //install new main menu
    $menu = array(
        'menu_name' => 'main-menu', // Drupal menu machine name
        'title' => 'Main menu', // Drupal menu display name
        'description' => 'The <em>Main</em> menu is used on many sites to show the major sections of the site, often in a top navigation bar.', // Optional menu description
    );
    menu_delete(array('menu_name' => $menu['menu_name']));    
    menu_save($menu);        
    uwwtd_install_menu($menu, 'main-menu7115.json');   //todo change
    variable_set('siif_eru_version', __FUNCTION__);
    
//     throw new DrupalUpdateException(__FUNCTION__); 
    drupal_flush_all_caches();
}

/**
 * add new menu in management menu
 */ 
function uwwtd_update_7116()
{
    uwwtd_install_trace(__FUNCTION__);

    $plid = 8;    //2 is the id of menu management/Configuration on all site where we want to insert the new link
    $menu= array(
        'link_path' => drupal_get_normal_path('admin/config/uwwtps') ,
        'link_title' => 'uwwtd configuration',
        'description' => 'Settings for the uwwtd application' ,
        'menu_name' => 'management',
        'weight' => 0,
        'expanded' => true,
        'mlid' => 0, 
        'plid' => $plid,
        'customized' => 1,
    );

    $mlid = menu_link_save($menu);
//     dsm($mlid);
    menu_cache_clear_all();
    $plid = $mlid;
    $menu= array(
        'link_path' => 'admin/configuration/uwwtd/extlinks' ,
        'link_title' => 'uwwtd external links',
        'description' => 'Configure your external links' ,
        'menu_name' => 'management',
        'weight' => 0,
//         'expanded' => false,
        'mlid' => 0, 
        'plid' => $plid,
        'customized' => 1,
    );    
    $mlid = menu_link_save($menu);
//     dsm($mlid);    
    menu_cache_clear_all();

    variable_set('siif_eru_version', __FUNCTION__);
    
//     throw new DrupalUpdateException(__FUNCTION__); 
    //drupal_flush_all_caches();
}

/**
 * Create new page disclaimer and update content block footer
 */ 
function uwwtd_update_7117()
{
    uwwtd_install_trace(__FUNCTION__);
    
    $path = drupal_get_path('module', 'uwwtd') . '/script/country/country.inc';
    include($path);
    $country_code = variable_get('siif_eru_country_code', '-1');
    $pathpage = drupal_get_path('module', 'uwwtd') . '/script/page/disclaimer7117.inc';   
    
    //create a page for new download menu
    $node = new stdClass(); // We create a new node object
    $node->type = "page"; // Or any other content type you want
    $node->title = "Disclaimer";
    $node->language = LANGUAGE_NONE; // Or any language code if Locale module is enabled. More on this below *
    $node->path = array('alias' => 'content/disclaimer'); // Setting a node path
    node_object_prepare($node); // Set some default values.
    $node->uid = 1; // Or any id you wish
    
    uwwtd_install_trace($pathpage);
                               
    $node->body[$node->language][0]['value'] = str_replace('[#COUNTRY#]', $country_config[$country_code]['name'], file_get_contents($pathpage));
    $node->body[$node->language][0]['summary'] = '';
    $node->body[$node->language][0]['format'] = 'filtered_html'; // If field has a format, you need to define it. Here we define a default filtered_html format for a body field
    
    $node = node_submit($node); // Prepare node for a submit
    node_save($node); // After this call we'll get a nid
    uwwtd_install_trace('page nid = ' . $node->nid);
    $pathbock = drupal_get_path('module', 'uwwtd') . '/script/block/footer7117.inc';
    uwwtd_install_trace($pathbock);
    //update block
    _block_rehash('uwwtd'); //theme name here
    //Change block settings old view
      db_update('block_custom')
      ->fields(array(
          'body' => file_get_contents($pathbock),
      ))
      ->condition('bid', '2') //2 is the id of block footer on all website
      ->execute();

    drupal_flush_all_caches();    
    
    variable_set('siif_eru_version', __FUNCTION__);
    
//     throw new DrupalUpdateException(__FUNCTION__); 
}

/**
 * Import main menu
 */ 
function uwwtd_update_7118()
{
    uwwtd_install_trace(__FUNCTION__);
    //install new main menu
    $menu = array(
        'menu_name' => 'main-menu', // Drupal menu machine name
        'title' => 'Main menu', // Drupal menu display name
        'description' => 'The <em>Main</em> menu is used on many sites to show the major sections of the site, often in a top navigation bar.', // Optional menu description
    );
    menu_delete(array('menu_name' => $menu['menu_name']));    
    menu_save($menu);        
    uwwtd_install_menu($menu, 'main-menu7118.json');   //todo change
    variable_set('siif_eru_version', __FUNCTION__);
    
//     throw new DrupalUpdateException(__FUNCTION__); 
    drupal_flush_all_caches();
}

/**
 * Add a new field in content type agglomeration :  field_aggart3addcompliance 'Additionnal Compliance article3'
 */ 
function uwwtd_update_7119() {
   
    uwwtd_install_trace(__FUNCTION__);
    
    field_cache_clear();    
//     $field = array (
//       'field_name' => 'field_aggart3addcompliance',
//       'type' => 'list_text',
//       'settings' => array (
//         'allowed_values' => array (
//           'AddQC' => 'Not compliant',
//         ),
//         'allowed_values_function' => '',
//       ),
//     );
//     
//     $instance = array(
//         'field_name' => $field['field_name'],
//         'entity_type' => 'node',
//         'bundle' => 'agglomeration',
//         'label' => 'Additionnal Compliance article3',
//       );  
//           
//     field_delete_instance($instance);
//     field_delete_field($field['field_name']);
        
    $field = array (
      'field_name' => 'field_aggart3addcompliance',
      'type' => 'list_text',
      'settings' => array (
        'allowed_values' => array (
          'AddQC' => 'Not compliant',
        ),
        'allowed_values_function' => '',
      ),
    );    

    $result = field_create_field($field);

    $instance = array(
        'field_name' => $field['field_name'],
        'entity_type' => 'node',
        'bundle' => 'agglomeration',
        'label' => 'Additionnal Compliance article3',
      );

    $result = field_create_instance($instance);
    
    variable_set('siif_eru_version', __FUNCTION__);    
}

/**
 * Update page content (useful links, ressources,)
 */ 
function uwwtd_update_7120() {
   
    uwwtd_install_trace(__FUNCTION__);
    
    $path = drupal_get_path('module', 'uwwtd') . '/script/country/country.inc';
    include($path);
    $country_code = variable_get('siif_eru_country_code', '-1');
    
    if ($country_code == '-1') {
        throw new DrupalUpdateException('Can\'t detect country code.');    
    }    
    
	$query = db_select('node', 'n');
    $query->fields('n', array('nid'));
    $query->condition('n.type', 'page', '=');
    $query->condition('n.title', 'Useful links', '=');
    $query->condition('n.language', 'en', '=');
	$result = $query->execute();
	foreach($result as $row){
        $path_usefullinks_country = drupal_get_path('module', 'uwwtd') . '/script/page/useful_links_'.$country_code.'.inc';
		$node = node_load($row->nid);
        $node->body['und'][0]['value'] = file_get_contents($path_usefullinks_country);
        node_save($node);
        break;
	}
    
	$query = db_select('node', 'n');
    $query->fields('n', array('nid'));
    $query->condition('n.type', 'page', '=');
    $query->condition('n.title', 'Ressources', '=');
    $query->condition('n.language', 'en', '=');
	$result = $query->execute();
	foreach($result as $row){
        $path_usefullinks_country = drupal_get_path('module', 'uwwtd') . '/script/page/ressource_'.$country_code.'.inc';
		$node = node_load($row->nid);
        $node->body['und'][0]['value'] = file_get_contents($path_usefullinks_country);
        node_save($node);
        break;
	}    
    
//     throw new DrupalUpdateException(__FUNCTION__); 
    variable_set('siif_eru_version', __FUNCTION__);    
}

/**
 * Import main menu, change mail website contact and mail contact page per country, add
 * new content type article 17, delete old article 17content type  
 */ 
function uwwtd_update_7121()
{
    uwwtd_install_trace(__FUNCTION__);
    //install new main menu
    $menu = array(
        'menu_name' => 'main-menu', // Drupal menu machine name
        'title' => 'Main menu', // Drupal menu display name
        'description' => 'The <em>Main</em> menu is used on many sites to show the major sections of the site, often in a top navigation bar.', // Optional menu description
    );
    menu_delete(array('menu_name' => $menu['menu_name']));    
    menu_save($menu);        
    uwwtd_install_menu($menu, 'main-menu7121.json');  
    
//     //install new menu 
//     $menu = array(
//         'menu_name' => 'menu-editorial-menu', // Drupal menu machine name
//         'title' => 'Editorial menu', // Drupal menu display name
//         'description' => '', // Optional menu description
//     );
//     menu_delete(array('menu_name' => $menu['menu_name']));    
//     menu_save($menu);        
//     uwwtd_install_menu($menu, 'menu-editorial-menu7121.json');   

    //$plid = 8;    //2 is the id of menu management/Configuration on all site where we want to insert the new link
    $menu= array(
        'link_path' => drupal_get_normal_path('register') ,
        'link_title' => 'Register',
        'description' => '' ,
        'menu_name' => 'menu-editorial-menu',
        'weight' => -45,
        //'expanded' => true,
        'mlid' => 0, 
        'plid' => 0,
        'customized' => 1,
    );

    $mlid = menu_link_save($menu);
//     dsm($mlid);
    menu_cache_clear_all();
    
//     throw new DrupalUpdateException(__FUNCTION__); 
    
    //change mail
    $path = drupal_get_path('module', 'uwwtd') . '/script/country/country.inc';
    include($path);
    $country_code = variable_get('siif_eru_country_code', '-1');
    
    if ($country_code == '-1') {
        throw new DrupalUpdateException('Can\'t detect country code.');    
    } 
    
    variable_set('site_mail', $country_config[$country_code]['website_mail']);

    db_update('contact')
    ->fields(array('recipients' => $country_config[$country_code]['contact_mail']))
    ->condition('category', 'Website feedback', '=')
    ->execute();

    field_cache_clear(); 
    
    //-------------------------------------------------------
    //delete field article 17 (and delete field field_articl17 of bundle uwwtp and agglomeration)
    //delete all instance of the field on each bundle and delete the field
    field_delete_field('field_article17');
//     throw new DrupalUpdateException(__FUNCTION__);     
    //check if table    	drupal_field_data_field_article17 and drupal_field_revision_field_article17 still exists
    //check table drupal_field_config_instance et drupal_field_config dans fieldname like 17
    
    //delete contenttype article17
    
    $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
    $result = db_query($sql, array(':type' => 'article_17'));
    $nids = array();
    foreach ($result as $row) {
        $nids[] = $row->nid;
    }
    // Delete all the nodes at once
    // http://api.drupal.org/api/function/node_delete_multiple/7
    node_delete_multiple($nids);
    // Delete our content type
    // http://api.drupal.org/api/function/node_type_delete/7
    node_type_delete('article_17');
    
    
    db_delete('field_config_instance')
    ->condition('field_name', 'field_article17', '=')
    ->condition('entity_type', 'node', '=')
    ->condition('bundle', 'uwwtp', '=')
    ->condition('deleted', '1', '=')
    ->execute();
    
    db_delete('field_config_instance')
    ->condition('field_name', 'field_article17', '=')
    ->condition('entity_type', 'node', '=')
    ->condition('bundle', 'agglomeration', '=')
    ->condition('deleted', '1', '=')
    ->execute();    
    
    db_delete('field_config')
    ->condition('field_name', 'field_article17', '=')
    ->condition('deleted', '1', '=')
    ->execute();   
    
//     throw new DrupalUpdateException(__FUNCTION__);       
    //-------------------------------------------------------          
    //add content type article_17 agglo et article 17 uwwtp
    //article_17_uwwtp            Article 17 uwwtp
    if (! node_type_load('article_17_uwwtp')) {
        $t = get_t();
        $node_example = array(
            'type' => 'article_17_uwwtp',
            'name' => $t('Article 17 uwwtp'),
            'base' => 'node_content',
            'description' => $t(''),
            'body_label' => $t(''),
            'custom' => false,
            'modified' => true,
            'locked' => false,            
            'disabled' => false,
        );
        $content_type = node_type_set_defaults($node_example);
//         node_add_body_field($content_type);
        // Check if we create content type or update.
        $status = node_type_save($content_type);
        // Replacement rule for the messages.
        $t_args = array('%name' => $content_type->name);
        if ($status == SAVED_UPDATED) { // update case
            drupal_set_message($t('The content type %name has been updated.', $t_args));
        } elseif ($status == SAVED_NEW) { // create case
            drupal_set_message($t('The content type %name has been added.', $t_args));
            watchdog('node', 'Added content type %name.', $t_args, WATCHDOG_NOTICE, l($t('view'), 'admin/structure/types')); 
        }
//         throw new DrupalUpdateException(__FUNCTION__); 
    }
    //article_17_agglomeration    Article 17 agglomeration
    if (! node_type_load('article_17_agglomeration')) {
        $t = get_t();
        $node_example = array(
            'type' => 'article_17_agglomeration',
            'name' => $t('Article 17 agglomeration'),
            'base' => 'node_content',
            'description' => $t(''),
            'body_label' => $t(''),
            'custom' => false,
            'modified' => true,
            'locked' => false,            
            'disabled' => false,
        );
        $content_type = node_type_set_defaults($node_example);
//         node_add_body_field($content_type);
        // Check if we create content type or update.
        $status = node_type_save($content_type);
        // Replacement rule for the messages.
        $t_args = array('%name' => $content_type->name);
        if ($status == SAVED_UPDATED) { // update case
            drupal_set_message($t('The content type %name has been updated.', $t_args));
        } elseif ($status == SAVED_NEW) { // create case
            drupal_set_message($t('The content type %name has been added.', $t_args));
            watchdog('node', 'Added content type %name.', $t_args, WATCHDOG_NOTICE, l($t('view'), 'admin/structure/types')); 
        }    
//         throw new DrupalUpdateException(__FUNCTION__); 
    }
    //-------------------------------------------------------
    //add new field
    $agglo_field = array(
        'field_anneedata' => array(
            'field_name' => 'field_anneedata',
            'type' => 'list_text',            	//List (text)        		Select list
            'widget' => array(
                'type' => 'options_select',
            ), 
            'label' => 'Year of data',       
        ),
        'field_art17agg_link_agglo' => array(            // Node reference        	Autocomplete text field
            'field_name' => 'field_art17agg_link_agglo',
            'type' => 'node_reference',            
            'widget' => array(
            'type' => 'node_reference_autocomplete',
            ), 
            'label' => 'Linked Agglomeration',           
        ),
        'field_art17agg_aggcode' => array(                //Text                 	Text field
            'field_name' => 'field_art17agg_aggcode',
            'type' => 'text',            	
            'widget' => array(
            'type' => 'text_textfield',
            ), 
            'label' => 'ID of the agglomeration',          
        ),                                                 
        'field_art17agg_aggname' => array(                 // Text              	Text field
            'field_name' => 'field_art17agg_aggname',
            'type' => 'text',            	
            'widget' => array(
             'type' => 'text_textfield',
            ), 
            'label' => 'Name of the agglomeration related to this UWWTP',        
        ),
        'field_art17_flaggstatus' => array(               //Text                	Text field
            'field_name' => 'field_art17_flaggstatus',
            'type' => 'text',            	
            'widget' => array(
            'type' => 'text_textfield',
            ), 
            'label' => 'Status of the agglomeration at the reference reporting year (Not compliant/Pending deadlines)',        
        ),
        'field_art17_flaggreasons' => array(                  	//Long text                 	Text area (multiple rows)
            'field_name' => 'field_art17_flaggreasons',
            'type' => 'text_long',            	
            'widget' => array(
            'type' => 'text_textarea',
            ), 
            'label' => 'Identified reason(s) for non compliance',        
        ),
        'field_art17_flaggmeasures' => array(                 //	Long text                	Text area (multiple rows)
            'field_name' => 'field_art17_flaggmeasures',
            'type' => 'text_long',            	
            'widget' => array(
            'type' => 'text_textarea',
            ), 
            'label' => 'Measure(s) foreseen to reach compliance with Article 3 (collecting systems and IAS)',        
        ),
        'field_art17_flaggexpecdatestart' => array(              //	Date                    	Text field
            'field_name' => 'field_art17_flaggexpecdatestart',
            'type' => 'datetime',            	
            'widget' => array(
            'type' => 'date_text',
            ), 
            'label' => 'Date or expected date for completion of preparatory measures for the collecting system or IAS (planning, design, procurement, c',
        ),
        'field_art17_flaggexpecdatestartw' => array(              //	Date                    	Text field
            'field_name' => 'field_art17_flaggexpecdatestartw',
            'type' => 'datetime',            	
            'widget' => array(
            'type' => 'date_text',
            ), 
            'label' => 'Start date or expected start date for works on the collecting systems or IAS',
        ),
        'field_art17_flaggexpecdatecomple' => array(             	//Date                     	Text field
            'field_name' => 'field_art17_flaggexpecdatecomple',
            'type' => 'datetime',            	
            'widget' => array(
            'type' => 'date_text',
            ), 
            'label' => 'Expected date of completion of the collecting system or IAS works',        
        ),                                                        
        'field_art17_flagginv' => array(                          //	Decimal                  	Text field
            'field_name' => 'field_art17_flagginv',
            'type' => 'number_decimal',            	
            'widget' => array(
            'type' => 'number',
            ), 
            'label' => 'Forecast investment cost for the collecting system or IAS (as in the national plan)',        
        ),
        'field_art17_flaggeufundname' => array(                 //	Long text      	Text area (multiple rows)
            'field_name' => 'field_art17_flaggeufundname',
            'type' => 'text_long',            	
            'widget' => array(
            'type' => 'text_textarea',
            ), 
            'label' => 'Name of EU fund planned to be used to complete the collecting system or IAS (if any)',        
        ),
        'field_art17_flaggeufund' => array(                      //Integer                    	Text field
            'field_name' => 'field_art17_flaggeufund',
            'type' => 'number_integer',            	
            'widget' => array(
            'type' => 'number',
            ), 
            'label' => 'Amount of (planned) EU funds likely to be requested to complete the collecting system or IAS (if any)',        
        ),                                                       
        'field_art17_flaggcomments' => array(                 //	Long text            	Text area (multiple rows)
            'field_name' => 'field_art17_flaggcomments',
            'type' => 'text_long',            	
            'widget' => array(
            'type' => 'text_textarea',
            ), 
            'label' => 'Any relevant comment on collecting system or IAS',        
        ),
        'field_art17_flaggexpload' => array(                   // Integer                     	Text field
            'field_name' => 'field_art17_flaggexpload',
            'type' => 'number_integer',            	
            'widget' => array(
            'type' => 'number',
            ), 
            'label' => 'Expected generated load of the agglomeration at the exepected date of compliance',        
        ),
        'field_art17_flaggexploadcoll' => array(                 //	Decimal                 	Text field
            'field_name' => 'field_art17_flaggexploadcoll',
            'type' => 'number_decimal',            	
            'widget' => array(
            'type' => 'number',
            ), 
            'label' => 'Expected rate of the generated load of agglomeration collected through collecting systems at the expected date of compliance',        
        ),                                                                                  
        'field_art17_flaggexploadias' => array(                 //	Decimal                  	Text field
            'field_name' => 'field_art17_flaggexploadias',
            'type' => 'number_decimal',            	
            'widget' => array(
            'type' => 'number',
            ), 
            'label' => 'Expected rate of the generated load of the agglomeration addressed throug IAS at the expected date of compliance',        
        ),
        'field_art17_flaggotherfund' => array(                // 	Integer                    	Text field
            'field_name' => 'field_art17_flaggotherfund',
            'type' => 'number_integer',            	
            'widget' => array(
            'type' => 'number',
            ), 
            'label' => 'Amount of funds likely to be given to complete the collecting system or IAS (if any)',        
        ),
        'field_art17_flaggotherfundname' => array(          	//Long text        	Text area (multiple rows)
            'field_name' => 'field_art17_flaggotherfundname',
            'type' => 'text_long',            	
            'widget' => array(
            'type' => 'text_textarea',
            ), 
            'label' => 'Name of the entity planned to give fund to complete the collecting system or IAS (if any)',        
        ),
        'field_art17_flaggloan' => array(                    //	Integer               Text field
            'field_name' => 'field_art17_flaggloan',
            'type' => 'number_integer',            	
            'widget' => array(
            'type' => 'number',
            ), 
            'label' => 'Amount of loan likely to be granted to complete the collecting system or IAS (if any)',        
        ),                                                                               	
        'field_art17_flaggloanname' => array(              	//Long text      	Text area (multiple rows)
            'field_name' => 'field_art17_flaggloanname',
            'type' => 'text_long',            	
            'widget' => array(
            'type' => 'text_textarea',
            ), 
            'label' => 'Name of the entity planned to give loan to complete the collecting system or IAS (if any)',        
        ),                                                                                                                                                                
    );
    
    $uwwtp_field = array(
        'field_anneedata' => array(       
            'field_name' => 'field_anneedata',
            'type' => 'list_text',            	
            'widget' => array(
            'type' => 'options_select',
            ), 
            'label' => 'Year of data',        
        ),  
        'field_art17uwwtp_link_uwwtp' => array(       
            'field_name' => 'field_art17uwwtp_link_uwwtp',
            'type' => 'node_reference',            	
            'widget' => array(
            'type' => 'node_reference_autocomplete',
            ), 
            'label' => 'Linked Treatment Plant',        
        ),  
        'field_art17uwwtp_uwwcode' => array(       
            'field_name' => 'field_art17uwwtp_uwwcode',
            'type' => 'text',            	
            'widget' => array(
            'type' => 'text_textfield',
            ), 
            'label' => 'ID of UWWTP/ collecting system without treatment',        
        ),  
        'field_art17uwwtp_uwwname' => array(       
            'field_name' => 'field_art17uwwtp_uwwname',
            'type' => 'text',            	
            'widget' => array(
            'type' => 'text_textfield',
            ), 
            'label' => 'Name of UWWTP/ collecting system without treatment',        
        ),  
        'field_art17uwwtp_aggcode' => array(       
            'field_name' => 'field_art17uwwtp_aggcode',
            'type' => 'text',            	
            'widget' => array(
            'type' => 'text_textfield',
            ), 
            'label' => 'ID of the agglomeration related to this UWWTP',        
        ),  
        'field_art17uwwtp_aggname' => array(       
            'field_name' => 'field_art17uwwtp_aggname',
            'type' => 'text',            	
            'widget' => array(
            'type' => 'text_textfield',
            ), 
            'label' => 'Name of the agglomeration related to this UWWTP',        
        ),  
        'field_art17_flatpstatus' => array(       
            'field_name' => 'field_art17_flatpstatus',
            'type' => 'text',            	
            'widget' => array(
            'type' => 'text_textfield',
            ), 
            'label' => 'Status of the UWWTP at the reference reporting year (Not compliant/Pending deadlines)',        
        ),  
        'field_art17_flatpreasons' => array(       
            'field_name' => 'field_art17_flatpreasons',
            'type' => 'text_long',            	
            'widget' => array(
            'type' => 'text_textarea',
            ), 
            'label' => 'Identified reason(s) for non compliance',        
        ),  
        'field_art17_flatpmeasures' => array(       
            'field_name' => 'field_art17_flatpmeasures',
            'type' => 'text_long',            	
            'widget' => array(
            'type' => 'text_textarea',
            ), 
            'label' => 'Measure(s) to reach the compliance needed for UWWTP',        
        ),  
        'field_art17_flatpexpload' => array(       
            'field_name' => 'field_art17_flatpexpload',
            'type' => 'number_integer',            	
            'widget' => array(
            'type' => 'number',
            ), 
            'label' => 'Load entering the UWWTP at the expected date of compliance (as planned)',        
        ),  
        'field_art17_flatpexpcapacity' => array(       
            'field_name' => 'field_art17_flatpexpcapacity',
            'type' => 'number_integer',            	
            'widget' => array(
            'type' => 'number',
            ), 
            'label' => 'Organic design capacity UWWTP (as planned)',        
        ),  
        'field_art17_flatptexpectreatment' => array(       
            'field_name' => 'field_art17_flatptexpectreatment',
            'type' => 'text',            	
            'widget' => array(
            'type' => 'text_textfield',
            ), 
            'label' => 'Type of treatment UWWTP (as planned)',        
        ),  
        'field_art17_flatpexpecdatestart' => array(       
            'field_name' => 'field_art17_flatpexpecdatestart',
            'type' => 'datetime',            	
            'widget' => array(
            'type' => 'date_text',
            ), 
            'label' => 'Date or expected date of completion of preparatory measures (planning, design, etc)',        
        ),  
        'field_art17_flatpexpecdatestartw' => array(       
            'field_name' => 'field_art17_flatpexpecdatestartw',
            'type' => 'datetime',            	
            'widget' => array(
            'type' => 'date_text',
            ), 
            'label' => 'Date or expected start date for works',        
        ),  
        'field_art17_flatpexpecdatecomple' => array(       
            'field_name' => 'field_art17_flatpexpecdatecomple',
            'type' => 'datetime',            	
            'widget' => array(
            'type' => 'date_text',
            ), 
            'label' => 'Date or expected date of completion of works',        
        ),  
        'field_art17_flatpexpecdateperfor' => array(       
            'field_name' => 'field_art17_flatpexpecdateperfor',
            'type' => 'datetime',            	
            'widget' => array(
            'type' => 'date_text',
            ), 
            'label' => 'Expected date of compliance (12 months of compliant samples) ',        
        ),  
        'field_art17_flatpinv' => array(       
            'field_name' => 'field_art17_flatpinv',
            'type' => 'number_integer',            	
            'widget' => array(
            'type' => 'number',
            ), 
            'label' => 'Forecast cost investment needed for the UWWTP (as in the national plan)',        
        ),  
        'field_art17_flatpeufundname' => array(       
            'field_name' => 'field_art17_flatpeufundname',
            'type' => 'text_long',            	
            'widget' => array(
            'type' => 'text_textarea',
            ), 
            'label' => 'Name of EU fund planned to be used UWWTP (if any)',        
        ),  
        'field_art17_flatpeufund' => array(       
            'field_name' => 'field_art17_flatpeufund',
            'type' => 'number_integer',            	
            'widget' => array(
            'type' => 'number',
            ), 
            'label' => 'Amount of (planned) EU funding needed',        
        ),  
        'field_art17_flatpcomments' => array(       
            'field_name' => 'field_art17_flatpcomments',
            'type' => 'text_long',            	
            'widget' => array(
            'type' => 'text_textarea',
            ), 
            'label' => 'Any relevant comment on UWWTP',        
        ),  
        'field_art17_flatpexploadtruck' => array(       
            'field_name' => 'field_art17_flatpexploadtruck',
            'type' => 'number_decimal',            	
            'widget' => array(
            'type' => 'number',
            ), 
            'label' => 'Expected rate of entering load transported to this UWWTP by truck at the expected date of compliance',        
        ),  
        'field_art17_flatpotherfund' => array(       
            'field_name' => 'field_art17_flatpotherfund',
            'type' => 'number_integer',            	
            'widget' => array(
            'type' => 'number',
            ), 
            'label' => 'Amount of funds likely to be given to complete the UWWTP (if any)',        
        ),  
        'field_art17_flatpotherfundname' => array(       
            'field_name' => 'field_art17_flatpotherfundname',
            'type' => 'text_long',            	
            'widget' => array(
            'type' => 'text_textarea',
            ), 
            'label' => 'Name of the entity planned to give fund to complete UWWTP (if any)',        
        ),  
        'field_art17_flatploan' => array(       
            'field_name' => 'field_art17_flatploan',
            'type' => 'number_integer',            	
            'widget' => array(
            'type' => 'number',
            ), 
            'label' => 'Amount of loan likely to be granted to complete the UWWTP (if any)',        
        ),  
        'field_art17_flatploanname' => array(       
            'field_name' => 'field_art17_flatploanname',
            'type' => 'text_long',            	
            'widget' => array(
            'type' => 'text_textarea',
            ), 
            'label' => 'Name of the entity planned to give loan to complete the UWWTP (if any)',        
        ),                                                                                                                                                                                                     
    );
//     throw new DrupalUpdateException(__FUNCTION__); 
    foreach ($agglo_field as $newfield) {
        if (! field_info_field($newfield['field_name']) ) {
            unset($newfield['label']);
            unset($newfield['widget']);
            $result = field_create_field($newfield);
        }
    }
    
    foreach ($uwwtp_field as $newfield) {
        if (! field_info_field($newfield['field_name']) ) {
            unset($newfield['label']);
            unset($newfield['widget']);
            $result = field_create_field($newfield);
        }
    }    
//     throw new DrupalUpdateException(__FUNCTION__); 
    //-------------------------------------------------------        
    //attach new field to new bundle
    foreach ($agglo_field as $newfield) {
//         dsm($newfield);
        $instance_exist = field_info_instance('node', $newfield['field_name'], 'article_17_agglomeration');
//         dsm($instance_exist);        
        if (! $instance_exist ) {
            $instance = array(
                'field_name' => $newfield['field_name'],
                'entity_type' => 'node',
                'bundle' => 'article_17_agglomeration',
                'label' => $newfield['label'],
                'widget' => $newfield['widget'],
              );
        
            $result = field_create_instance($instance);
//             dsm($result);
        }       
    }
    
    foreach ($uwwtp_field as $newfield) {
//         dsm($newfield);
        $instance_exist = field_info_instance('node', $newfield['field_name'], 'article_17_uwwtp');
//         dsm($instance_exist);        
        if (! $instance_exist ) {
            $instance = array(
                'field_name' => $newfield['field_name'],
                'entity_type' => 'node',
                'bundle' => 'article_17_uwwtp',
                'label' => $newfield['label'],
                'widget' => $newfield['widget'],
              );
        
            $result = field_create_instance($instance);
//             dsm($result);
        }       
    } 
    
    //------------------------------------------
    //add new field to bundle agglomeration and uwwtp
    $agglo_field = array(     
        'field_article17_agglo' => array(       
            'field_name' => 'field_article17_agglo',
            'type' => 'node_reference',            	
            'widget' => array(
                'type' => 'node_reference_autocomplete',
            ), 
            'label' => 'Article 17 Agglo',        
        ),  
    ); 
    $uwwtp_field = array(
        'field_article17_uwwtp' => array(       
            'field_name' => 'field_article17_uwwtp',
            'type' => 'node_reference',            	
            'widget' => array(
                'type' => 'node_reference_autocomplete',
            ), 
            'label' => 'Article 17 Uwwtp',        
        ),  
    );

    foreach ($agglo_field as $newfield) {
        if (! field_info_field($newfield['field_name']) ) {
            unset($newfield['label']);
            unset($newfield['widget']);
            $result = field_create_field($newfield);
        }
    }
    
    foreach ($uwwtp_field as $newfield) {
        if (! field_info_field($newfield['field_name']) ) {
            unset($newfield['label']);
            unset($newfield['widget']);
            $result = field_create_field($newfield);
        }
    }  
    
    foreach ($agglo_field as $newfield) {
//         dsm($newfield);
        $instance_exist = field_info_instance('node', $newfield['field_name'], 'agglomeration');
//         dsm($instance_exist);        
        if (! $instance_exist ) {
            $instance = array(
                'field_name' => $newfield['field_name'],
                'entity_type' => 'node',
                'bundle' => 'agglomeration',
                'label' => $newfield['label'],
                'widget' => $newfield['widget'],
              );
        
            $result = field_create_instance($instance);
//             dsm($result);
        }       
    }
    
    foreach ($uwwtp_field as $newfield) {
//         dsm($newfield);
        $instance_exist = field_info_instance('node', $newfield['field_name'], 'uwwtp');
//         dsm($instance_exist);        
        if (! $instance_exist ) {
            $instance = array(
                'field_name' => $newfield['field_name'],
                'entity_type' => 'node',
                'bundle' => 'uwwtp',
                'label' => $newfield['label'],
                'widget' => $newfield['widget'],
              );
        
            $result = field_create_instance($instance);
//             dsm($result);
        }       
    }        
//     throw new DrupalUpdateException(__FUNCTION__); 
     
    variable_set('siif_eru_version', __FUNCTION__);
    drupal_flush_all_caches();
    
//     throw new DrupalUpdateException(__FUNCTION__);     
}

/**
 * desactivate cron, change settings of field, change permission on contact form ( Use the site-wide contact form ) 
 */ 
function uwwtd_update_7122()
{
    uwwtd_install_trace(__FUNCTION__);
    
    //desactivate cron (run = never)
    variable_set('cron_safe_threshold', 0);
    
    //grant acces to menu contact for all role   
    foreach (array('anonymous user', 'authenticated user', 'administrator', 'editor') as $rolename) {
        $role = user_role_load_by_name($rolename);
        if (!$role) {
            continue;
        }
        
        user_role_grant_permissions($role->rid, array('access site-wide contact form'));
    }
    
    //change setting of field  display field_uwwwastewatertreated, change scale to 0
    $instance_info = field_info_instance('node', 'field_uwwwastewatertreated', 'uwwtp');
    if ($instance_info) {
        $instance_info['display']['default']['settings']['scale'] = 0;
        field_update_instance($instance_info);
    } 
    
    variable_set('siif_eru_version', __FUNCTION__);
    
    drupal_flush_all_caches();
    
//     throw new DrupalUpdateException(__FUNCTION__);     
}

/**
 * add an entry for menu stat, create new dir for register
 */ 
function uwwtd_update_7123()
{
    uwwtd_install_trace(__FUNCTION__);
    
    //install new menu
    menu_cache_clear_all();
    
    $menu = array(
        'menu_name' => 'main-menu', // Drupal menu machine name
        'title' => 'Main menu', // Drupal menu display name
        'description' => 'The <em>Main</em> menu is used on many sites to show the major sections of the site, often in a top navigation bar.', // Optional menu description
    );
    menu_delete(array('menu_name' => $menu['menu_name']));    
    menu_save($menu);        
    uwwtd_install_menu($menu, 'main-menu7123.json');   //todo change     

    //create new dir for register
	$register_dir = 'public://register';
	file_prepare_directory($register_dir, FILE_CREATE_DIRECTORY);     


    //create new dir for article17
	$article17_dir = 'public://article17';
	file_prepare_directory($article17_dir, FILE_CREATE_DIRECTORY);
        
    //delete content basic page download
	$ids = array();
	$query = db_select('node', 'n');
    $query->fields('n', array('nid'));
    $query->condition('n.type', 'page', '=');
    $query->condition('n.title', 'Download', '=');
	$listnid = $query->execute();
	foreach($listnid as $nid){
        node_delete($nid->nid);
	}
    unset($listnid);  
    
    
    //change link to error page
    //$plid = 8;    //2 is the id of menu management/Configuration on all site where we want to insert the new link
    $list = menu_load_links('menu-editorial-menu');
//     dsm($list);
    $bexist = false;
    foreach($list as $one_menu) {
        if ($one_menu['link_path'] == 'errors') {
//             dsm($one_menu);
            menu_link_delete($one_menu['mlid']);    
        }
        if ($one_menu['link_path'] == 'error-list') {
            $bexist = true;
        }
    }
    if (false === $bexist) {
        $menu= array(
            'link_path' => drupal_get_normal_path('error-list') ,
            'link_title' => 'List Error',
            'description' => '' ,
            'menu_name' => 'menu-editorial-menu',
            'weight' => 0,
            //'expanded' => true,
            'mlid' => 0, 
            'plid' => 0,
            'customized' => 1,
        );
    //     dsm($menu);
    
        $mlid = menu_link_save($menu);
    //     dsm($mlid);
    }
    menu_cache_clear_all(); 
    
    //update path to wkhtml config       
    $config_wkhtml = array (
          'bin_path' => '/usr/local/bin/wkhtmltopdf',
          'footer_display' => 1,
          'header_display' => 1,
          'cover_display' => 1,
          'toc_display' => 0,
          'toc_depth' => '3',
          'disablePdfCompression' => 1,
          'margins' => 
          array (
            'top' => '10',
            'bottom' => '10',
            'right' => '10',
            'left' => '10',
          ),
          'default_metadata' => 'creator|Auteur|UWWTD SIIF Slovenia National (Slovenia)
subject|Sujet|Système d\'Information sur l\'Eau (SIE), Sandre
description|Description|Le Service d\'Administration Nationale des Données et Référentiels sur l\'Eau (Sandre) établit et met à disposition le référentiel des données sur l’eau du système d’information sur l’eau (SIE).
editor|Editeur|Sandre, Office National de l\'Eau et des Milieux Aquatiques (ONEMA)
contributor|Contributeur|Office International de l\'Eau (OIEau)
language|Langue|Fr
type|Type|Texte
format|Format|PDF
spatial|Couverture géographique|France entière
rights|Droits d\'usage|http://creativecommons.org/licenses/by-nc-sa/2.0/fr',
        
        );
    variable_set('wkhtmltopdf_configurations', $config_wkhtml);
    
    //change user admin mail
    $user = user_load_by_name('admin');
//     dsm($user);
    $user->mail = variable_get('site_mail');
    user_save($user);
    
    //add new colum to
//   $spec = array(
//     'type' => 'int',
//     'unsigned' => TRUE,
//     'not null' => TRUE,  
//   );
//   db_add_field('my_table', 'my_column', $spec);    
    
    //
    variable_set('siif_eru_version', __FUNCTION__);
    
    drupal_flush_all_caches();
    //keep this for further update
    throw new DrupalUpdateException(__FUNCTION__);     
}
/***************************************************************************/
// Function utils
/***************************************************************************/
function uwwtd_install_trace($message) 
{
    $file = drupal_realpath('public://data_errors/install_trace.log');
    $r = fopen($file, 'a');
    fputs($r, date("[Y-m-d H:i:s] ") . $message . "\n");
    fclose($r);
}

/**
 * create a view of name  $sViewName with the select statement in a file if the same name {$sViewName}.sql
 * in module/script/{$sViewName}.sql  
 */ 
function uwwtd_create_or_replace_view($sViewName)
{
    uwwtd_install_trace(__FUNCTION__ . ':' . $sViewName);
    $path = drupal_get_path('module', 'uwwtd') . '/script/view/' . $sViewName . '.sql';
    $select = file_get_contents($path);
    db_query('CREATE OR REPLACE VIEW "' . $sViewName .  '" AS ' . $select);
}

/**
 * create a view of name  $sViewName with the select statement in a file if the same name {$sViewName}.sql
 * in module/script/{$sViewName}.sql  
 */ 
function uwwtd_delete_view($sViewName)
{
    uwwtd_install_trace(__FUNCTION__ . ':' . $sViewName);
    db_query('DROP VIEW IF EXISTS "' . $sViewName .  '"');
}

/**
 * create schema wfs
 */ 
function uwwtd_create_schema_wfs() 
{
    uwwtd_install_trace(__FUNCTION__);
    db_query('CREATE SCHEMA IF NOT EXISTS "wfs"');    
} 

/**
 * create schema wfs
 */ 
function uwwtd_update_node_title_size() 
{
    uwwtd_install_trace(__FUNCTION__);
    //udpate node.title and node_revision.title from 255 to 1000 (for ro et pl long name)
    db_query('ALTER TABLE drupal_node ALTER COLUMN title TYPE varchar(1000)');
    db_query('ALTER TABLE drupal_node_revision ALTER COLUMN title TYPE varchar(1000)');
}

function uwwtd_delete_node_type_error()
{
    uwwtd_install_trace(__FUNCTION__);
	$ids = array();
	$query = db_select('node', 'n');
    $query->fields('n', array('nid'));
    $query->condition('n.type', 'uwwtd_error', '=');
	$errors = $query->execute();
	foreach($errors as $error){
		$ids[] = array('nid'=>$error->nid);
	}
    foreach($ids as $nid) {
        node_delete($nid);
    }
    unset($errors, $ids);        
}

function uwwtd_insert_openlayers($table, $row)
{
    uwwtd_install_trace(__FUNCTION__);
    if (db_select($table)
                  ->fields($table, array('name'))
                  ->condition('name', $row['name'])
                  ->execute()
                  ->fetchCol()) {
          $resultupdate = db_update($table)
          ->fields(array(
            'name' => $row['name'],
            'title' =>  $row['title'],
            'description' => $row['description'],
            'data' => serialize($row['data'])
          ))
          ->condition('name', $row['name'], '=')       
          ->execute();                    
    } else {
          db_insert($table)
          ->fields(array(
            'name' => $row['name'],
            'title' =>  $row['title'],
            'description' => $row['description'],
            'data' => serialize($row['data'])
          ))
          ->execute();    
    }
}

function uwwtd_update_map_overlay($country_config, $country_code, $map = array(), $overlay = array(), $style = array())
{
    uwwtd_install_trace(__FUNCTION__);
    $list_map = array(
        'waste_water_treatment_network_map.inc',
        'agg_compliance_map.inc',
        'agglomeration.inc',
        'uwwtp_compliance_map.inc',
        'uwwtp_treatment_map.inc',
        'uwwtp_pressure_map.inc',
    );
    $list_overlay = array(
        'agglomerations.inc',
        'uwwtp.inc',
        'dcp.inc',
        'compliance_map.inc',
        'agglomeration_treatment.inc',
        'uwwtp_compliance_map.inc',
        'uwwtp_treatment.inc',
        'uwwtp_bod_pressure_.inc',
        'uwwtp_cod_pressure_.inc',
        'uwwtp_n_pressure_.inc',
        'uwwtp_p_pressure_.inc',
    ); 
    $list_style = array(
        'agglomerations_style.inc',
        'carr_bleu.inc',
        'triangle_violet.inc',
    );        
    $path = drupal_get_path('module', 'uwwtd') . '/script/openlayers/';
    $pathtomap     = $path . 'map/'; 
    $pathtooverlay = $path . 'overlay/';
    $pathtostyle = $path . 'style/';
    $msgexception = ''; 
    foreach($list_overlay as $filename) {
        if (false === empty($overlay) && false === in_array($filename, $overlay)) {
            continue;
        }
        include($pathtooverlay . $filename);
        if (isset($openlayers_layers)) {
            $row = array();
            $row['name'] = $openlayers_layers->name;
            $row['title'] = $openlayers_layers->title;
            $row['description'] = date('Y/m/d H:i:s') . "\n" . $openlayers_layers->description;
            $row['data'] = $openlayers_layers->data;
            $msgresult = 'ok';
            try {
                uwwtd_insert_openlayers('openlayers_layers', $row);
            } catch (Exception $e) {
                $msgresult = 'error';
                $msgexception .= 'Error : can\'t create openlayers layer ' . $filename . '('.$msgresult.')'."\n";
            }
            uwwtd_install_trace('layer ' . $filename . ' result : ' . $msgresult);            
        } else {
            uwwtd_install_trace('Error, $openlayers_layers not found');          
        }
    }
       
    foreach($list_map as $filename) {
        if (false === empty($map) && false === in_array($filename, $map)) {
            continue;
        }    
        include($pathtomap . $filename);
        if (isset($openlayers_maps)) {
//             uwwtd_install_trace(var_export($openlayers_maps , true));
            $row = array();
            $row['name'] = $openlayers_maps->name;
            $row['title'] = $openlayers_maps->title;            
            $row['description'] = date('Y/m/d H:i:s') . "\n" . $openlayers_maps->description;
            $openlayers_maps->data['center'] = $country_config[$country_code]['openlayers_maps']['center'];
            $openlayers_maps->data['behaviors']['openlayers_behavior_gazetteer'] = $country_config[$country_code]['openlayers_maps']['behaviors']['openlayers_behavior_gazetteer'];
            $row['data'] = $openlayers_maps->data;
//             uwwtd_install_trace(var_export($openlayers_maps , true));
//             uwwtd_install_trace(var_export($country_config[$country_code]['openlayers_maps']['center'] , true));
//             uwwtd_install_trace(var_export($country_config[$country_code]['openlayers_maps']['behaviors']['openlayers_behavior_gazetteer'] , true));
                 
            $msgresult = 'ok';
            try {
                uwwtd_insert_openlayers('openlayers_maps', $row);
            } catch (Exception $e) {
                $msgresult = 'error';
                $msgexception .= 'Error : can\'t create openlayers map ' . $filename . '('.$msgresult.')'."\n";
            }
//             throw new DrupalUpdateException('test7108'); 
            uwwtd_install_trace('map ' . $filename . ' result : ' . $msgresult);                                
        }  else {
            uwwtd_install_trace('Error, $openlayers_maps not found');          
        }
    }
    
    foreach($list_style as $filename) {
        if (false === empty($style) && false === in_array($filename, $style)) {
            continue;
        }     
        include($pathtostyle . $filename);
        if (isset($openlayers_styles)) {
            $row = array();
            $row['name'] = $openlayers_styles->name;
            $row['title'] = $openlayers_styles->title;
            $row['description'] = date('Y/m/d H:i:s') . "\n" . $openlayers_styles->description;
            $row['data'] = $openlayers_styles->data;
            $msgresult = 'ok';
            try {
                uwwtd_insert_openlayers('openlayers_styles', $row);
            } catch (Exception $e) {
                $msgresult = 'error';
                $msgexception .= 'Error : can\'t create openlayers style ' . $filename . '('.$msgresult.')'."\n";
            }
                    
            uwwtd_install_trace('style ' . $filename . ' result : ' . $msgresult);                             
        }  else {
            uwwtd_install_trace('Error, $openlayers_styles not found');          
        }
    }    

    if ($msgexception != '') {
        throw new DrupalUpdateException($msgexception);
    } 
}

function uwwtd_install_menu($menu, $filename) 
{
    uwwtd_install_trace(__FUNCTION__);
    $path = DRUPAL_ROOT . '/' . drupal_get_path('module', 'uwwtd') . '/script/menu/'.$filename;
    uwwtd_install_trace($path);
    $options = array(
        'create_content'  => FALSE,
        'link_to_content' => TRUE,
        'remove_menu_items' => FALSE
    ); 

    drupal_load('module', 'menu_import');                                                   
    menu_import_string(file_get_contents($path), $menu['menu_name'], $options);
    
    $message = '';    
    if (!empty($result['errors'])) {
        $message .= 'Import menu ' . $menu['menu_name'] . ' failed: ';
        foreach ($result['errors'] as $error) {
            $message .= ($message == '' ? '' : ',' ) . $error;
        }
    } 
    
    uwwtd_install_trace($message);
    
    $warning = '';
    if (!empty($result['warnings'])) {
        $warning .= 'Import menu ' . $menu['menu_name'] . ' warning : ';
        foreach ($result['warnings'] as $error) {
            $warning .= ($warning == '' ? '' : ',' ) . $error;
        }
    } 
    
    uwwtd_install_trace($warning);       
    
    if ($message != '') {
        throw new DrupalUpdateException($message);
    }
}
