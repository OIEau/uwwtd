<?php
// Fonction pour definir le lien de menu
function uwwtd_art17_menu(){
	$items = array();
	$items['data/article17'] = array(
		'title' => t('Data management article 17'),
		'description' => t('Page to manage the article 17'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('uwwtd_art17_form'),
		//'access callback' => TRUE,
		'access arguments' => array('Data-management access'),
		'file' => 'data_center.inc',
		'file path' => drupal_get_path('module', 'uwwtd')
	);
	$items['data/article17/import'] = array(
		'title' => t('Article 17 import'),
		'description' => t('Form to upload article 17 relative data'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('uwwtd_art17_inport_form'),
		//'access callback' => TRUE,
		'access arguments' => array('Data-management access'),
		'file' => 'data_center.inc',
		'file path' => drupal_get_path('module', 'uwwtd')
	);
	$items['data/article17/agglomeration/%'] = array(
		'title' => t('Article 17 Agglomeration example'),
		'description' => t('Generate a csv file for article 17 with all agglomeration(s)'),
		'page callback' => 'uwwtd_art17_example_agglomeration',
        'page arguments' => array(3),
		//'access callback' => TRUE,
		'access arguments' => array('Data-management access'),
		'file' => 'data_center.inc',
		'file path' => drupal_get_path('module', 'uwwtd')
	); 
	$items['data/article17/uwwtp/%'] = array(
		'title' => t('Article 17 UWWTP example'),
		'description' => t('Generate a csv file for article 17 with all uwwtp(s)'),
		'page callback' => 'uwwtd_art17_example_uwwtp',
        'page arguments' => array(3),
		//'access callback' => TRUE,
		'access arguments' => array('Data-management access'),
		'file' => 'data_center.inc',
		'file path' => drupal_get_path('module', 'uwwtd')
	);       
	
	return $items;
}

################################ ART 17 PAGE ################################
function uwwtd_art17_form($form, &$form_state){

	if(isset($_SESSION['uwwtd_annee']))unset($_SESSION['uwwtd_annee']);

	$uwwtd_year = date("Y");
	$uwwtd_years = array(
		'2000' => '2000', 
		'2001' => '2001', 
		'2002' => '2002', 
		'2003' => '2003', 
		'2004' => '2004', 
		'2005' => '2005', 
		'2006' => '2006', 
		'2007' => '2007', 
		'2008' => '2008', 
		'2009' => '2009', 
		'2010' => '2010', 
		'2011' => '2011', 
		'2012' => '2012', 
		'2013' => '2013', 
		'2014' => '2014', 
		'2015' => '2015', 
		'2016' => '2016', 
		'2017' => '2017', 
		'2018' => '2018', 
		'2019' => '2019', 
		'2020' => '2020'
	);
	
	// definition du champ input de type select pour l'annee
	$form['uwwtd_year'] = array(     
		'#type' => 'select',
		'#title' => t('Year'),
		'#default_value' => $uwwtd_year,        
		'#options' => $uwwtd_years,
		'#weight' => 0,
		'#required' => TRUE,
	);
	
	// Bouton envoyer
	$form['submit_button'] = array(
		'#type' => 'submit',
		'#value' => t('Submit'),
	);

	return $form;
}

function uwwtd_art17_form_submit($form, &$form_state){
	
	$annee = $form['uwwtd_year']['#value'];
	$_SESSION['uwwtd_annee'] = $annee;
	
	$form_state['redirect'] = 'data/article17/import';	
}

################################ EXAMPLE FILE ################################
function uwwtd_art17_example_agglomeration($annee) {
	//Get all the agglomerations
	$query = db_select('node', 'n');
	$query->join('field_data_field_siteid', 'r', 'r.entity_id = n.nid');
	$aggs = $query
		->fields('n', array('nid', 'title'))
		->condition('n.type', 'agglomeration', '=')
		->condition('r.field_siteid_value', db_like($annee).'%', 'LIKE')
		->execute();
    $filename = tempnam('/tmp', 'agg'); 
    $rFile = fopen($filename, 'wb');
	
    fputcsv($rFile, array(    
            'aggCode: ID of the agglomeration',      //aggCode       field_inspireidlocalid
            'aggName: Name of the agglomeration related to this UWWTP',    //aggName    -> title
            'flaggStatus: Status of the agglomeration at the reference reporting year (Not compliant/Pending deadlines)',  
            'flaggreasons: Identified reason(s) for non compliance',
            'flaggMeasures: Measure(s) foreseen to reach compliance with Article 3 (collecting systems and IAS)',
            'flaggExpecDateStart: Date or expected date for completion of preparatory measures for the  collecting system or IAS (planning, design, procurement, consents as required at MS level, etc)',
            'flaggExpecDateStartWork: Start date or expected start date for works on the collecting systems or IAS',
            'flaggExpecDateCompletion: Expected date of completion of the collecting system or IAS works',
            'flaggInv: Forecast investment cost for the collecting system or IAS (as in the national plan)',
            'flaggEUfundname: Name of EU fund planned to be used to complete the collecting system or IAS  (if any)',
            'FlaggEUfund: Amount of (planned)  EU funds likely to be requested to complete the collecting system or IAS  (if any)',
            'FlaggComments: Any relevant comment on  collecting system or IAS',                                                       
            'flaggExpload: Expected generated load of the agglomeration at the exepected date of compliance',                                                       
            'flaggExploadcoll: Expected rate of the generated load of agglomeration  collected through collecting systems at the expected date of compliance',                                                       
            'flaggExploadIAS: Expected rate of the generated load of the agglomeration addressed throug IAS at the expected date of compliance',                                                       
            'Flaggotherfund: Amount of funds likely to be given  to complete the collecting system or IAS (if any)',                                                       
            'flaggotherfundname: Name of the entity planned to give fund to complete the collecting system or IAS (if any)',                                                       
            'Flaggloan: Amount of loan likely to be granted to complete the collecting system or IAS (if any)',                                                       
            'Flaggloanname: Name of the entity planned to give loan to complete the collecting system or IAS (if any)',                                                       
            // 'Compliance',                                                       
            // 'Generated load (p.e.)',                                                       
            ), ';');
 
	foreach($aggs as $agg){
        $node = node_load($agg->nid);
        $aggData[] = array(
            $node->field_inspireidlocalid['und'][0]['value'],
            $node->title,
            $node->field_aggcompliance[LANGUAGE_NONE][0]['value'], 
            '',
            '',
            '',
            '',
            '',
            '',
            '',
            '',
            '',
            '',
            '',
            '',
            '',  
            '',
			'',  
            '',
            '',
            $node->field_agggenerated[LANGUAGE_NONE][0]['value'],   
        );
        // fputcsv($rFile, $aggData, ';');

        unset($node);
	}
	
	function trieAgg($aggData, $b){
		$aggKey = array('NC'=> 0, 'NR'=>1, 'C'=>2, 'NI'=>3, 'PD'=>4);

		if($aggData[2] == $b[2]){
			if($aggData[20] == $b[20]){
				return 0;
			}elseif($aggData[20] > $b[20]){
				return -1;
			}else{
				return 1;
			}
		}elseif($aggKey[$aggData[2]] > $aggKey[$b[2]]){
			return 1;
		}else{
			return -1;
		}
	}
	usort($aggData, "trieAgg");
	foreach($aggData as $key => $val){
		unset($val[19]);
		unset($val[20]);
		if($val[2] == "NR"){
			$val[2] = "Not relevant";
		}elseif($val[2] == "NC"){
			$val[2] = "Not compliant";
		}elseif($val[2] == "C"){
			$val[2] = "";
		}elseif($val[2] == "NI"){
			$val[2] = "";
		}elseif($val[2] == "PD"){
			$val[2] = "Pending deadlines";
		}
		fputcsv($rFile, $val, ';');
	}
	
	
    fclose($rFile);
    
    ini_set("auto_detect_line_endings", false); //for Mac user    
    $aHeaders = array(
          'Content-Type'        => 'application/octet-stream',   
          'Content-Disposition' => 'attachment; filename="agglomeration_art17_example_'.$annee.'.csv' . '"',
          'Expires'             => '0',
          'Cache-Control'       => 'must-revalidate',
          'Pragma'              =>'public',
          'Content-Length'      => filesize($filename),
      );            
    foreach ($aHeaders as $sName => $sValue) {
        drupal_add_http_header($sName, $sValue);
    }
    readfile($filename); 
    unlink($filename);
    exit();  
}

function uwwtd_art17_example_uwwtp($annee) {
	//Get all the treatment plan
	$query = db_select('node', 'n');
	$query->join('field_data_field_siteid', 'r', 'r.entity_id = n.nid');
	$uwwtps = $query
		->fields('n', array('nid', 'title'))
		->condition('n.type', 'uwwtp', '=')
		->condition('r.field_siteid_value', db_like($annee).'%', 'LIKE')
		->execute();
    $filename = tempnam('/tmp', 'uwwtp'); 
    $rFile = fopen($filename, 'wb');
    
    fputcsv($rFile, array(    
                'uwwCode: ID of UWWTP/ collecting system without treatment',
                'uwwName: Name of UWWTP/ collecting system without treatment',	
                'aggCode: ID of the agglomeration related to this UWWTP',
                'aggName: Name of the agglomeration related to this UWWTP',	
                'flatpStatus: Status of the UWWTP at the reference reporting year (Not compliant/Pending deadlines)',	
                'flatpreasons: Identified reason(s) for non compliance',	
                'flatpMeasures: Measure(s) to reach the compliance needed for UWWTP', 	
                'flatpExpload: Load entering the UWWTP at the expected date of compliance (as planned)',	
                'flatpExpCapacity: Organic design capacity UWWTP (as planned)',	
                'flatpExpecTreatment: Type of treatment UWWTP (as planned)',	
                'flatpExpecDateStart: Date or expected date of completion of preparatory measures (planning, design, etc)',	
                'flatpExpecDateStartWork: Date or expected start date for works',	
                'flatpExpecDateCompletion: Date or expected date of completion of works',	
                'flatpExpecDateperformance: Expected date of compliance (12 months of compliant samples)', 	
                'flatpInv: Forecast cost investment needed for the UWWTP (as in the national plan)',	
                'flatpEUfundname: Name of EU fund planned to be used  UWWTP (if any)',	
                'flatpEUfund: Amount of (planned) EU funding needed',	
                'flatpComments: Any relevant comment on UWWTP', 
				'flatpExploadtruck: Expected rate of entering load transported to this UWWTP by truck at the expected date of compliance', 				
				'Flatpotherfund: Amount of funds likely to be given  to complete the UWWTP (if any)', 
				'flatpotherfundname: Name of the entity planned to give fund to complete UWWTP (if any)', 
				'Flatploan: Amount of loan likely to be granted to complete the UWWTP (if any)', 
				'Flatploanname: Name of the entity planned to give loan to complete the UWWTP (if any)', 
				// 'Compliance', 
				// 'Load entering UWWTP (p.e.)', 
            ), ';');
 
	foreach($uwwtps as $uwwtp){
        $node = node_load($uwwtp->nid);
        $listAgglo = array();
		// dsm($node);
		if(isset($node->field_uwwbadperfdesign[LANGUAGE_NONE]) && $node->field_uwwbadperfdesign[LANGUAGE_NONE][0]['value'] == 0){
			$uwwBadPerformance = "";
		}else if(isset($node->field_uwwbadperfdesign[LANGUAGE_NONE]) && $node->field_uwwbadperfdesign[LANGUAGE_NONE][0]['value'] == 1){
			$uwwBadPerformance = "of bad performance";
		}
		if(isset($node->field_uwwaccidents[LANGUAGE_NONE]) && $node->field_uwwaccidents[LANGUAGE_NONE][0]['value'] == 0){
			$uwwAccidents = "";
		}else if(isset($node->field_uwwaccidents[LANGUAGE_NONE]) && $node->field_uwwaccidents[LANGUAGE_NONE][0]['value'] == 1){
			$uwwAccidents = "of major accident(s)";
		}
		if(isset($node->field_uwwbaddesign[LANGUAGE_NONE]) && $node->field_uwwbaddesign[LANGUAGE_NONE][0]['value'] == 0){
			$uwwBadDesign = "";
		}else if(isset($node->field_uwwbaddesign[LANGUAGE_NONE]) && $node->field_uwwbaddesign[LANGUAGE_NONE][0]['value'] == 1){
			$uwwBadDesign = "of bad design.";
		}
		if(isset($node->field_uwwinformation[LANGUAGE_NONE]) && $node->field_uwwinformation[LANGUAGE_NONE][0]['value'] == ""){
			$uwwInformation = "";
		}else if(isset($node->field_uwwinformation[LANGUAGE_NONE]) && $node->field_uwwinformation[LANGUAGE_NONE][0]['value'] != ""){
			$uwwInformation = "Further information on cause of failure: ".$node->field_uwwinformation[LANGUAGE_NONE][0]['value'];
		}
		if(($uwwBadPerformance == "")&&($uwwAccidents == "")&& ($uwwBadDesign == "") && ($uwwInformation == "")){
			$reason = "";
		}else{
			$reason = 'Because'.$uwwBadPerformance.' '.$uwwAccidents. ' '.$uwwBadDesign.' '.$uwwInformation;
		}
		
        foreach($node->field_linked_agglomerations['und'] as $nidagg) {
            $agg = node_load($nidagg['nid']);
            $listAgglo['id'][] = $agg->field_inspireidlocalid['und'][0]['value'];
            $listAgglo['name'][] = $agg->title;            
        }

        $uwwtpData[] = array(
            $node->field_inspireidlocalid['und'][0]['value'],
            $node->title,
            implode(', ', $listAgglo['id']),
            implode(', ', $listAgglo['name']),
            $node->field_uwwcompliance[LANGUAGE_NONE][0]['value'],
            $reason,
            '', 	
			'',	
			'',	
			'',	
			'',	
			'',	
			'',	
			'', 	
			'',	
			'',	
			'',	
			'', 
			'', 				
			'', 
			'', 
			'', 
			'', 
			'', 
			$node->field_uwwloadenteringuwwtp[LANGUAGE_NONE][0]['value'],    
        );
    
        unset($node);
		
	}

	function trieUwwtp($uwwtpData, $b){
		$aggKey = array('NC'=> 0, 'NR'=>1, 'C'=>2, 'NI'=>3, 'PD'=>4);
		if($uwwtpData[4] == $b[4]){
			if($uwwtpData[24] == $b[24]){
				return 0;
			}elseif($uwwtpData[24] > $b[24]){
				return -1;
			}else{
				return 1;
			}
		}elseif($aggKey[$uwwtpData[4]] > $aggKey[$b[4]]){
			return 1;
		}else{
			return -1;
		}
	}
	usort($uwwtpData, "trieUwwtp");

	foreach($uwwtpData as $key => $val){
		unset($val[23]);
		unset($val[24]);
		if($val[4] == "NR"){
			$val[4] = "Not relevant";
		}elseif($val[4] == "NC"){
			$val[4] = "Not compliant";
		}elseif($val[4] == "C"){
			$val[4] = "Compliant";
		}elseif($val[4] == "NI"){
			$val[4] = "Not information";
		}elseif($val[4] == "PD"){
			$val[4] = "Pending deadlines";
		}
		fputcsv($rFile, $val, ';');
	}

    fclose($rFile);
    
    ini_set("auto_detect_line_endings", false); //for Mac user    
    $aHeaders = array(
          'Content-Type'        => 'application/octet-stream', 
          'Content-Disposition' => 'attachment; filename="uwwtp_art17_example_'.$annee.'.csv' . '"',
          'Expires'             => '0',
          'Cache-Control'       => 'must-revalidate',
          'Pragma'              =>'public',
          'Content-Length'      => filesize($filename),
      );            
    foreach ($aHeaders as $sName => $sValue) {
        drupal_add_http_header($sName, $sValue);
    }
    readfile($filename); 
    unlink($filename);
    exit();  
}
################################ DATA INPUT ################################
function uwwtd_art17_inport_form($form, &$form_state){

	if(!isset($_SESSION['uwwtd_annee'])){
		drupal_goto('data/article17');
	}
	else{
		// le calcul consiste à vérifier la formule suivante pour toutes les agglos de >2000 pe:
		// field_agggenerated_value> 2000

		$totalAgg = 0;
		$NbtotalAgg = 0;
		$totalAggNC = 0;
		$NbAggNC = 0;
		
		$queryAggGene = "SELECT entity_id, field_agggenerated_value
		FROM drupal_field_data_field_agggenerated 
		WHERE field_agggenerated_value> 2000";
		
		$resultAggGene = db_query($queryAggGene);
		$recordAggGene = $resultAggGene->fetchAll();
		
		foreach($recordAggGene as $totalAggGene){
			$totalAgg = ($totalAggGene->field_agggenerated_value) + $totalAgg;
			$NbtotalAgg = $NbtotalAgg +1;
			
		}
		// dsm($totalAgg);
		// dsm($NbtotalAgg);
		$queryAggComp = "SELECT aggGene.entity_id, aggGene.field_agggenerated_value, aggCompl.field_aggcompliance_value
		FROM drupal_field_data_field_agggenerated aggGene
		INNER JOIN drupal_field_data_field_aggcompliance aggCompl
		ON aggGene.entity_id = aggCompl.entity_id
		WHERE field_agggenerated_value> 2000
		AND aggCompl.field_aggcompliance_value = 'NC'";
		
		$resultAggComp = db_query($queryAggComp);
		$recordAggComp = $resultAggComp->fetchAll();
		foreach($recordAggComp as $totalAggCom){
			$totalAggNC = ($totalAggCom->field_agggenerated_value) + $totalAggNC;
			$NbAggNC = $NbAggNC +1;
		}
		// dsm($totalAggNC);
		// dsm($NbAggNC);
		$peAggGene = 100 * $totalAggNC / $totalAgg;
		$nbAgg = 100 * $NbAggNC / $NbtotalAgg;
		// dsm($peAggGene);
		// dsm($nbAgg);
		// SI(((totalAgg -  totalAggNC)>=97% ou (NbtotalAgg - NbAggNC)>=97%)); "optional"; "mandatory")
		// 2 017 458 - 132 618 = 1 884 840   OU 182 - 8 
		// 100* 132 618/ 2 017 458 = 6.57%   OU  100* 8 /182 = 4.39%
		
		if($peAggGene >= 97 || $nbAgg >=97){
			$article17 = "optional";
		}else{
			$article17 = "mandatory";
		}
		// dsm($article17);
		
		
	   
		
		
		global $base_url;
		$site_url = $base_url.'/';

		// Definition des variables pour le formulaire
		$annee = $_SESSION['uwwtd_annee'];
		
		$form['uwwtd_text'] = array(
			'#markup' => '<h4>'.t('Article 17 import for the year').' : '.$annee.'</h4><br><p>'.t('Your CSV file must be correctly formatted using \' ; \' as the cell separator and \' " \' as the text separator. The file must be encoded in UTF-8 to ensure character readability.').'</p>'
			.'<p>'.t('To help help you having to make your own files we have created for you a file for both the agglomerations and the treatment plants:')
			.'</p><ul><li><a target="_blank" href="'.$site_url.drupal_get_path('module', 'uwwtd_art17').'/examples/uwwtp_art17_example.csv">'.t('Treatment plants article 17 example csv').'</a></li>
			<li><a target="_blank" href="'.$site_url.drupal_get_path('module', 'uwwtd_art17').'/examples/agglo_art17_example.csv">'.t('Agglomerations article 17 example csv').'</a></li>
            
            <li><a  href="'.base_path().'data/article17/agglomeration/'.$_SESSION['uwwtd_annee'].'">'.t('Agglomerations article 17 pre-generate csv').' - '.$article17.'</a></li>
            <li><a  href="'.base_path().'data/article17/uwwtp/'.$_SESSION['uwwtd_annee'].'">'.t('Uwwtps article 17 pre-generate csv').' - '.$article17.'</a></li>
            
            </ul><br>'
		);
		
		// definition du champ input de type file
		$form['uwwtd_file'] = array(
			'#type' => 'managed_file',
			'#title' => t('Data file'),
			'#upload_validators' => array('file_validate_extensions' => array('csv')),
			'#required' => TRUE,
		);
		
		// Bouton envoyer
		$form['submit_button'] = array(
			'#type' => 'submit',
			'#value' => t('Submit'),
		);
		
		// Fonction a appeller quand on clique sur envoyer
		$form['#submit'][] = 'uwwtd_art17_import_submit_handler';
		return $form;
	}
}

function uwwtd_art17_import_submit_handler($form, &$form_state) {
	
	// Definition et recup des variables
	if(isset($_SESSION['uwwtd_errors'])) unset($_SESSION['uwwtd_errors']);
	if(isset($_SESSION['uwwtd_warnings'])) unset($_SESSION['uwwtd_warnings']);
	$annee = $_SESSION['uwwtd_annee'];
	$file = file_load($form_state['values']['uwwtd_file']);
	$uri = $file->uri;
	
	// On upload le file et la fonction renvoie le nouveau nom du fichier
	$newFile = uwwtd_file_upload($file, '.csv'); 
	
	$datas = uwwtd_csv_to_array($uri, ';');
	//$datas = uwwtd_xml_to_array($uri);
	
	uwwtd_art17_setup_batch($newFile, $annee, $datas);	
}

function uwwtd_art17_setup_batch($newFile, $annee, $datas){
	$batch = array(
		'title' => t('Data import'),
		'operations' => array(
			array('uwwtd_art17_import_article17_process', array($newFile, $annee, $datas))
		),
		'error_message' => t('Error!'),
		'finished' => 'uwwtd_art17_finished',
		'file' => drupal_get_path('module','uwwtd').'/data_center.inc'
	);

	batch_set($batch);
	batch_process('data/article17/import');
}

function uwwtd_art17_import_article17_process($newFile, $annee, $datas, &$context){
	if (!isset($context['sandbox']['progress'])) {

		$context['sandbox']['max'] = count($datas);
		$context['sandbox']['progress'] = 0;
		$context['sandbox']['ids'] = $datas;
	}
	$i = $context['sandbox']['progress'];
	$data = $context['sandbox']['ids'][$i];

	// Check basic elements exist
	// errors
	$e = 0;
	if(($data['ID of the agglomeration'] == '' || !isset($data['ID of the agglomeration'])) && ($data['ID of the UWWTP'] == '' || !isset($data['ID of the UWWTP']))){
		$e = 1;
		$emes = t('The data you are trying to add for article 17 doesn\'t contain an identifier');
		uwwtd_set_error($i, $emes);
	}

	// Check if no errors were found
	if($e == 0){

		// Variables
		$uri = $newFile->uri;
		$filename = $newFile->filename;
		$filename .= ".csv";
		$fid = $newFile->fid;
		if(isset($data['ID of the agglomeration'])) {
			$siteId = $annee.'_'.uwwtd_check_text($data['ID of the agglomeration']);
		}
		else{
			$siteId = $annee.'_'.uwwtd_check_text($data['ID of the UWWTP']);
		}

		// Check if id exists
		$exists = uwwtd_check_exist($siteId);

		// If the element exists
		if($exists != false){

			// load the exisiting element
			$element = node_load($exists);
			$art17_title = $element->field_siteid['und'][0]['value'] .' - Article 17 data '.$annee;

			// Create new article 17 node
			$art = new StdClass();
			$art->type = 'article_17';
			$art->title = $art17_title;

			// Article 17 mapping for UWWTP
			if(isset($data['Identified reason(s) for non compliance']) && !empty($data['Identified reason(s) for non compliance'])) $art->field_art_17_reason['und'][0]['value'] = $data['Identified reason(s) for non compliance'];
			if(isset($data['Measure(s) to reach compliance needed for UWWTP']) && !empty($data['Measure(s) to reach compliance needed for UWWTP'])) $art->field_art_17_reason_uwwtp['und'][0]['value'] = $data['Measure(s) to reach compliance needed for UWWTP'];
			if(isset($data['Load entering the UWWTP at the expected date of compliance (as planned)']) && !empty($data['Load entering the UWWTP at the expected date of compliance (as planned)'])) $art->field_art_17_load_expected['und'][0]['value'] = $data['Load entering the UWWTP at the expected date of compliance (as planned)'];
			if(isset($data['Organic design capacity UWWTP (as planned)']) && !empty($data['Organic design capacity UWWTP (as planned)'])) $art->field_art_17_capacity_planned['und'][0]['value'] = $data['Organic design capacity UWWTP (as planned)'];
			if(isset($data['Type of treatment UWWTP (as planned)']) && !empty($data['Type of treatment UWWTP (as planned)'])) $art->field_art_17_treatment_planned['und'][0]['value'] = $data['Type of treatment UWWTP (as planned)'];
			if(isset($data['Date or expected date of completion of preparatory measures (planning, design, etc)']) && !empty($data['Date or expected date of completion of preparatory measures (planning, design, etc)'])) $art->field_art_17_expected_comp_uwwtp['und'][0]['value'] = uwwtd_art17_date($data['Date or expected date of completion of preparatory measures (planning, design, etc)']);
			if(isset($data['Date or expected start date for works']) && !empty($data['Date or expected start date for works'])) $art->field_art_17_expected_start['und'][0]['value'] = uwwtd_art17_date($data['Date or expected start date for works']);
			if(isset($data['Date or expected date of completion of works']) && !empty($data['Date or expected date of completion of works'])) $art->field_art_17_expected_system['und'][0]['value'] = uwwtd_art17_date($data['Date or expected date of completion of works']);
			if(isset($data['Expected date of compliance (12 months of samples)']) && !empty($data['Expected date of compliance (12 months of samples)'])) $art->field_art_17_expected_date_comp['und'][0]['value'] = uwwtd_art17_date($data['Expected date of compliance (12 months of samples)']);
			if(isset($data['Forecast cost investment needed for the UWWTP (as in the national plan)']) && !empty($data['Forecast cost investment needed for the UWWTP (as in the national plan)'])) $art->field_art_17_forcast_investment['und'][0]['value'] = $data['Forecast cost investment needed for the UWWTP (as in the national plan)'];
			if(isset($data['Name of EU fund planned to be used (if any)']) && !empty($data['Name of EU fund planned to be used (if any)'])) $art->field_art_17_eu_fund['und'][0]['value'] = $data['Name of EU fund planned to be used (if any)'];
			if(isset($data['Amount of (planned) EU funding needed']) && !empty($data['Amount of (planned) EU funding needed'])) $art->field_art_17_eu_fund_amount['und'][0]['value'] = $data['Amount of (planned) EU funding needed'];
			if(isset($data['Any relevant comment on UWWTP']) && !empty($data['Any relevant comment on UWWTP'])) $art->field_art_17_relative_comments['und'][0]['value'] = $data['Any relevant comment on UWWTP'];

			// Article 17 mapping for Agglomerations
			if(isset($data['Measure(s) foreseen to reach compliance with Article 3 (collecting systems and IAS)']) && !empty($data['Measure(s) foreseen to reach compliance with Article 3 (collecting systems and IAS)'])) $art->field_art_17_mesures_forseen['und'][0]['value'] = $data['Measure(s) foreseen to reach compliance with Article 3 (collecting systems and IAS)'];
			if(isset($data['Date or expected date for completion of preparatory measures for the collecting system or IAS (planning, design, procurement, consents as required at MS level, etc)']) && !empty($data['Date or expected date for completion of preparatory measures for the collecting system or IAS (planning, design, procurement, consents as required at MS level, etc)'])) $art->field_art_17_expected_completion['und'][0]['value'] = uwwtd_art17_date($data['Date or expected date for completion of preparatory measures for the collecting system or IAS (planning, design, procurement, consents as required at MS level, etc)']);
			if(isset($data['Start date or expected start date for works on the collecting systems or IAS']) && !empty($data['Start date or expected start date for works on the collecting systems or IAS'])) $art->field_art_17_expected_start['und'][0]['value'] = uwwtd_art17_date($data['Start date or expected start date for works on the collecting systems or IAS']);
			if(isset($data['Expected date of completion of the collecting system or IAS works']) && !empty($data['Expected date of completion of the collecting system or IAS works'])) $art->field_art_17_expected_system['und'][0]['value'] = uwwtd_art17_date($data['Expected date of completion of the collecting system or IAS works']);
			if(isset($data['Forecast investment cost for the collecting system or IAS (as in the national plan)']) && !empty($data['Forecast investment cost for the collecting system or IAS (as in the national plan)'])) $art->field_art_17_forcast_investment['und'][0]['value'] = $data['Forecast investment cost for the collecting system or IAS (as in the national plan)'];
			if(isset($data['Name of EU fund planned to be used to complete the collecting system or IAS (if any)']) && !empty($data['Name of EU fund planned to be used to complete the collecting system or IAS (if any)'])) $art->field_art_17_eu_fund['und'][0]['value'] = $data['Name of EU fund planned to be used to complete the collecting system or IAS (if any)'];
			if(isset($data['Amount of (planned) EU funds likely to be requested to complete the collecting system or IAS (if any)']) && !empty($data['Amount of (planned) EU funds likely to be requested to complete the collecting system or IAS (if any)'])) $art->field_art_17_eu_fund_amount['und'][0]['value'] = $data['Amount of (planned) EU funds likely to be requested to complete the collecting system or IAS (if any)'];
			if(isset($data['Any relevant comment on collecting system or IAS']) && !empty($data['Any relevant comment on collecting system or IAS'])) $art->field_art_17_relative_comments['und'][0]['value'] = $data['Any relevant comment on collecting system or IAS'];

			// Article 17 link to element
			if($element->type == 'agglomeration'){
				$art->field_art_17_agglo['und'][0]['nid'] = $element->nid;
			}
			else{
				$art->field_art_17_uwwtp['und'][0]['nid'] = $element->nid;
			}

			// Save the article 17 element
			node_save($art);

			// Link element tot Article 17
			$element->field_article17['und'][0]['nid'] = $art->nid;

			// Save the element
			node_save($element);

		}
		else{

			$emes = t('WARNING : the element at index').': '.$i.' '.t('does not correspond to any identifier in the database.');
			uwwtd_set_warning($i, $emes);

		}
	
	}

	$context['sandbox']['progress']++;
	$context['message'] = t('Processing Article 17...');
	
	if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
		$context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
	}
}

function uwwtd_art17_date($string){
	$exploded = explode('/', $string);
	if(count($exploded) > 1){
		$date = $exploded[1].'-'.$exploded[0].'-01 00:00:00';
		//dsm($date);
		return $date;
	}
}

function uwwtd_art17_finished($success, $results, $operations){
	if ($success) {
		drupal_set_message(t('All the Article 17 data has been added to the site.'));
		if(isset($_SESSION['uwwtd_errors'])){
			uwwtd_add_errors($_SESSION['uwwtd_errors']);
			foreach($_SESSION['uwwtd_errors'] as $error){
				drupal_set_message(t('Error occured on row index : ').$error[0].' (" '.$error[1].' ") '.t(' of your file. This element was not added, please check your input file.'), 'error');
			}
		}
		if(isset($_SESSION['uwwtd_warnings'])){
			uwwtd_add_errors($_SESSION['uwwtd_warnings']);
			foreach($_SESSION['uwwtd_warnings'] as $warning){
				drupal_set_message(t('Warning occured on row index : ').$warning[0].' (" '.$warning[1].' ") '.t(' of your file. This element was not added, please check your input file.'), 'warning');
			}
		}
	}
	else {
		// An error occurred.
		// $operations contains the operations that remained unprocessed.
		$error_operation = reset($operations);
		drupal_set_message(
			t('An error occurred while processing @operation with arguments : @args',
				array(
					'@operation' => $error_operation[0],
					'@args' => print_r($error_operation[0], TRUE),
				)
			)
		);
	}
}