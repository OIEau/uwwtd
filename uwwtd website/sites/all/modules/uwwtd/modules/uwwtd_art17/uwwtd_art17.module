<?php

require_once(drupal_get_path('module', 'uwwtd') . '/inc/utils.inc');

// Fonction pour definir le lien de menu
function uwwtd_art17_menu(){
	$items = array();
	$items['data/article17'] = array(
		'title' => t('Data management article 17'),
		'description' => t('Page to manage the article 17'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('uwwtd_art17_form'),
		//'access callback' => TRUE,
		'access arguments' => array('Data-management access'),
		'file' => 'data_center.inc',
		'file path' => drupal_get_path('module', 'uwwtd').'/inc/'
	);
	$items['data/article17/import'] = array(
		'title' => t('Article 17 import'),
		'description' => t('Form to upload article 17 relative data'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('uwwtd_art17_inport_form'),
		//'access callback' => TRUE,
		'access arguments' => array('Data-management access'),
		'file' => 'data_center.inc',
		'file path' => drupal_get_path('module', 'uwwtd').'/inc/'
	);
	$items['data/article17/agglomeration/%'] = array(
		'title' => t('Article 17 Agglomeration example'),
		'description' => t('Generate a csv file for article 17 with all agglomeration(s)'),
		'page callback' => 'uwwtd_art17_example_agglomeration',
        'page arguments' => array(3),
		//'access callback' => TRUE,
		'access arguments' => array('Data-management access'),
		'file' => 'data_center.inc',
		'file path' => drupal_get_path('module', 'uwwtd').'/inc/'
	); 
	$items['data/article17/uwwtp/%'] = array(
		'title' => t('Article 17 UWWTP example'),
		'description' => t('Generate a csv file for article 17 with all uwwtp(s)'),
		'page callback' => 'uwwtd_art17_example_uwwtp',
        'page arguments' => array(3),
		//'access callback' => TRUE,
		'access arguments' => array('Data-management access'),
		'file' => 'data_center.inc',
		'file path' => drupal_get_path('module', 'uwwtd').'/inc/'
	);       
	
	return $items;
}

function uwwtd_art17_node_delete($node) {
	if($node->type=="article_17_uwwtp"){
		if($uwwtp = node_load($node->field_art17uwwtp_link_uwwtp['und'][0]['nid'])){
			//modification de mon champ 
			$uwwtp->field_article17_uwwtp['und'][0]['nid'] = null;
			node_save($uwwtp);
		}
	}elseif($node->type=="article_17_agglomeration"){
		if($aggl = node_load($node->field_art17agg_link_agglo['und'][0]['nid'])){
			//modification de mon champ 
			$aggl->field_article17_agglo['und'][0]['nid'] = null;
			node_save($aggl);
		}

	}
}
################################ ART 17 PAGE ################################
function uwwtd_art17_form($form, &$form_state){

	if(isset($_SESSION['uwwtd_annee']))unset($_SESSION['uwwtd_annee']);

	$uwwtd_year = uwwtd_get_max_annee();//date("Y");
	$uwwtd_years = uwwtd_get_all_year();
//     array(
// 		'2000' => '2000', 
// 		'2001' => '2001', 
// 		'2002' => '2002', 
// 		'2003' => '2003', 
// 		'2004' => '2004', 
// 		'2005' => '2005', 
// 		'2006' => '2006', 
// 		'2007' => '2007', 
// 		'2008' => '2008', 
// 		'2009' => '2009', 
// 		'2010' => '2010', 
// 		'2011' => '2011', 
// 		'2012' => '2012', 
// 		'2013' => '2013', 
// 		'2014' => '2014', 
// 		'2015' => '2015', 
// 		'2016' => '2016', 
// 		'2017' => '2017', 
// 		'2018' => '2018', 
// 		'2019' => '2019', 
// 		'2020' => '2020'
// 	);
	
	// definition du champ input de type select pour l'annee
	$form['uwwtd_year'] = array(     
		'#type' => 'select',
		'#title' => t('Year'),
		'#default_value' => $uwwtd_year,        
		'#options' => $uwwtd_years,
		'#weight' => 0,
		'#required' => TRUE,
	);
	
	// Bouton envoyer
	$form['submit_button'] = array(
		'#type' => 'submit',
		'#value' => t('Submit'),
	);

	return $form;
}

function uwwtd_art17_form_submit($form, &$form_state){
	
	$annee = $form['uwwtd_year']['#value'];
	$_SESSION['uwwtd_annee'] = $annee;
	
	$form_state['redirect'] = 'data/article17/import';	
}

################################ EXAMPLE FILE ################################
function uwwtd_art17_example_agglomeration($annee) {
	//Get all the agglomerations
	$query = db_select('node', 'n');
	$query->join('field_data_field_siteid', 'r', 'r.entity_id = n.nid');
	$aggs = $query
		->fields('n', array('nid', 'title'))
		->condition('n.type', 'agglomeration', '=')
		->condition('r.field_siteid_value', db_like($annee).'%', 'LIKE')
		->execute();
    $filename = tempnam('/tmp', 'agg'); 
    $rFile = fopen($filename, 'wb');
	
    fputcsv($rFile, array(    
            'aggCode: ID of the agglomeration',      //aggCode       field_inspireidlocalid
            'aggName: Name of the agglomeration related to this UWWTP',    //aggName    -> title
            'flaggStatus: Status of the agglomeration at the reference reporting year (Not compliant/Pending deadlines)',  
            'flaggreasons: Identified reason(s) for non compliance',
            'flaggMeasures: Measure(s) foreseen to reach compliance with Article 3 (collecting systems and IAS)',
            'flaggExpecDateStart: Date or expected date for completion of preparatory measures for the  collecting system or IAS (planning, design, procurement, consents as required at MS level, etc)',
            'flaggExpecDateStartWork: Start date or expected start date for works on the collecting systems or IAS',
            'flaggExpecDateCompletion: Expected date of completion of the collecting system or IAS works',
            'flaggInv: Forecast investment cost for the collecting system or IAS (as in the national plan)',
            'flaggEUfundname: Name of EU fund planned to be used to complete the collecting system or IAS  (if any)',
            'FlaggEUfund: Amount of (planned)  EU funds likely to be requested to complete the collecting system or IAS  (if any)',
            'FlaggComments: Any relevant comment on  collecting system or IAS',                                                       
            'flaggExpload: Expected generated load of the agglomeration at the exepected date of compliance',                                                       
            'flaggExploadcoll: Expected rate of the generated load of agglomeration  collected through collecting systems at the expected date of compliance',                                                       
            'flaggExploadIAS: Expected rate of the generated load of the agglomeration addressed throug IAS at the expected date of compliance',                                                       
            'Flaggotherfund: Amount of funds likely to be given  to complete the collecting system or IAS (if any)',                                                       
            'flaggotherfundname: Name of the entity planned to give fund to complete the collecting system or IAS (if any)',                                                       
            'Flaggloan: Amount of loan likely to be granted to complete the collecting system or IAS (if any)',                                                       
            'Flaggloanname: Name of the entity planned to give loan to complete the collecting system or IAS (if any)',                                                       
            // 'Compliance',                                                       
            // 'Generated load (p.e.)',                                                       
            ), ';');
 
	foreach($aggs as $agg){
        $node = node_load($agg->nid);
        $aggData[] = array(
            $node->field_inspireidlocalid['und'][0]['value'],
            $node->title,
            $node->field_aggcompliance[LANGUAGE_NONE][0]['value'], 
            '',
            '',
            '',
            '',
            '',
            '',
            '',
            '',
            '',
            '',
            '',
            '',
            '',  
            '',
			'',  
            '',
            '',
            $node->field_agggenerated[LANGUAGE_NONE][0]['value'],   
        );
        // fputcsv($rFile, $aggData, ';');

        unset($node);
	}
	
	function trieAgg($aggData, $b){
		$aggKey = array('NC'=> 0, 'PD'=>1, 'NR'=>2, 'NI'=>3, 'C'=>4,  );

		if($aggData[2] == $b[2]){
			if($aggData[20] == $b[20]){
				return 0;
			}elseif($aggData[20] > $b[20]){
				return -1;
			}else{
				return 1;
			}
		}elseif($aggKey[$aggData[2]] > $aggKey[$b[2]]){
			return 1;
		}else{
			return -1;
		}
	}
	usort($aggData, "trieAgg");
	foreach($aggData as $key => $val){
		unset($val[19]);
		unset($val[20]);
		if($val[2] == "NR"){
			$val[2] = "Not Relevant";
		}elseif($val[2] == "NC"){
			$val[2] = "Not Compliant";
		}elseif($val[2] == "C"){
			$val[2] = "Compliant";
		}elseif($val[2] == "NI"){
			$val[2] = "No Information";
		}elseif($val[2] == "PD"){
			$val[2] = "Pending deadlines";
		}
		fputcsv($rFile, $val, ';');
	}
	
	
    fclose($rFile);
    
    ini_set("auto_detect_line_endings", false); //for Mac user    
    $aHeaders = array(
          'Content-Type'        => 'application/octet-stream',   
          'Content-Disposition' => 'attachment; filename="agglomeration_art17_example_'.$annee.'.csv' . '"',
          'Expires'             => '0',
          'Cache-Control'       => 'must-revalidate',
          'Pragma'              =>'public',
          'Content-Length'      => filesize($filename),
      );            
    foreach ($aHeaders as $sName => $sValue) {
        drupal_add_http_header($sName, $sValue);
    }
    readfile($filename); 
    unlink($filename);
    exit();  
}

function uwwtd_art17_example_uwwtp($annee) {
	//Get all the treatment plan
	$query = db_select('node', 'n');
	$query->join('field_data_field_siteid', 'r', 'r.entity_id = n.nid');
	$uwwtps = $query
		->fields('n', array('nid', 'title'))
		->condition('n.type', 'uwwtp', '=')
		->condition('r.field_siteid_value', db_like($annee).'%', 'LIKE')
		->execute();
    $filename = tempnam('/tmp', 'uwwtp'); 
    $rFile = fopen($filename, 'wb');
    
    fputcsv($rFile, array(    
                'uwwCode: ID of UWWTP/ collecting system without treatment',
                'uwwName: Name of UWWTP/ collecting system without treatment',	
                'aggCode: ID of the agglomeration related to this UWWTP',
                'aggName: Name of the agglomeration related to this UWWTP',	
                'flatpStatus: Status of the UWWTP at the reference reporting year (Not compliant/Pending deadlines)',	
                'flatpreasons: Identified reason(s) for non compliance',	
                'flatpMeasures: Measure(s) to reach the compliance needed for UWWTP', 	
                'flatpExpload: Load entering the UWWTP at the expected date of compliance (as planned)',	
                'flatpExpCapacity: Organic design capacity UWWTP (as planned)',	
                'flatpExpecTreatment: Type of treatment UWWTP (as planned)',	
                'flatpExpecDateStart: Date or expected date of completion of preparatory measures (planning, design, etc)',	
                'flatpExpecDateStartWork: Date or expected start date for works',	
                'flatpExpecDateCompletion: Date or expected date of completion of works',	
                'flatpExpecDateperformance: Expected date of compliance (12 months of compliant samples)', 	
                'flatpInv: Forecast cost investment needed for the UWWTP (as in the national plan)',	
                'flatpEUfundname: Name of EU fund planned to be used  UWWTP (if any)',	
                'flatpEUfund: Amount of (planned) EU funding needed',	
                'flatpComments: Any relevant comment on UWWTP', 
				'flatpExploadtruck: Expected rate of entering load transported to this UWWTP by truck at the expected date of compliance', 				
				'Flatpotherfund: Amount of funds likely to be given  to complete the UWWTP (if any)', 
				'flatpotherfundname: Name of the entity planned to give fund to complete UWWTP (if any)', 
				'Flatploan: Amount of loan likely to be granted to complete the UWWTP (if any)', 
				'Flatploanname: Name of the entity planned to give loan to complete the UWWTP (if any)', 
				// 'Compliance', 
				// 'Load entering UWWTP (p.e.)', 
            ), ';');
 
	foreach($uwwtps as $uwwtp){
        $node = node_load($uwwtp->nid);
        $listAgglo = array();
		// dsm($node);
		if(isset($node->field_uwwbadperfdesign[LANGUAGE_NONE]) && $node->field_uwwbadperfdesign[LANGUAGE_NONE][0]['value'] == 0){
			$uwwBadPerformance = "";
		}else if(isset($node->field_uwwbadperfdesign[LANGUAGE_NONE]) && $node->field_uwwbadperfdesign[LANGUAGE_NONE][0]['value'] == 1){
			$uwwBadPerformance = "of bad performance";
		}
		if(isset($node->field_uwwaccidents[LANGUAGE_NONE]) && $node->field_uwwaccidents[LANGUAGE_NONE][0]['value'] == 0){
			$uwwAccidents = "";
		}else if(isset($node->field_uwwaccidents[LANGUAGE_NONE]) && $node->field_uwwaccidents[LANGUAGE_NONE][0]['value'] == 1){
			$uwwAccidents = "of major accident(s)";
		}
		if(isset($node->field_uwwbaddesign[LANGUAGE_NONE]) && $node->field_uwwbaddesign[LANGUAGE_NONE][0]['value'] == 0){
			$uwwBadDesign = "";
		}else if(isset($node->field_uwwbaddesign[LANGUAGE_NONE]) && $node->field_uwwbaddesign[LANGUAGE_NONE][0]['value'] == 1){
			$uwwBadDesign = "of bad design.";
		}
		if(isset($node->field_uwwinformation[LANGUAGE_NONE]) && $node->field_uwwinformation[LANGUAGE_NONE][0]['value'] == ""){
			$uwwInformation = "";
		}else if(isset($node->field_uwwinformation[LANGUAGE_NONE]) && $node->field_uwwinformation[LANGUAGE_NONE][0]['value'] != ""){
			$uwwInformation = "Further information on cause of failure: ".$node->field_uwwinformation[LANGUAGE_NONE][0]['value'];
		}
		if(($uwwBadPerformance == "")&&($uwwAccidents == "")&& ($uwwBadDesign == "") && ($uwwInformation == "")){
			$reason = "";
		}else{
			$reason = 'Because'.$uwwBadPerformance.' '.$uwwAccidents. ' '.$uwwBadDesign.' '.$uwwInformation;
		}
		
        foreach($node->field_linked_agglomerations['und'] as $nidagg) {
            $agg = node_load($nidagg['nid']);
            $listAgglo['id'][] = $agg->field_inspireidlocalid['und'][0]['value'];
            $listAgglo['name'][] = $agg->title;            
        }

        $uwwtpData[] = array(
            $node->field_inspireidlocalid['und'][0]['value'],
            $node->title,
            implode(', ', $listAgglo['id']),
            implode(', ', $listAgglo['name']),
            $node->field_uwwcompliance[LANGUAGE_NONE][0]['value'],
            $reason,
            '', 	
			'',	
			'',	
			'',	
			'',	
			'',	
			'',	
			'', 	
			'',	
			'',	
			'',	
			'', 
			'', 				
			'', 
			'', 
			'', 
			'', 
			'', 
			$node->field_uwwloadenteringuwwtp[LANGUAGE_NONE][0]['value'],    
        );
    
        unset($node);
		
	}

	function trieUwwtp($uwwtpData, $b){
        $aggKey = array('NC'=> 0, 'PD'=>1, 'NR'=>2, 'NI'=>3, 'C'=>4,  );
		if($uwwtpData[4] == $b[4]){
			if($uwwtpData[24] == $b[24]){
				return 0;
			}elseif($uwwtpData[24] > $b[24]){
				return -1;
			}else{
				return 1;
			}
		}elseif($aggKey[$uwwtpData[4]] > $aggKey[$b[4]]){
			return 1;
		}else{
			return -1;
		}
	}
	usort($uwwtpData, "trieUwwtp");

	foreach($uwwtpData as $key => $val){
		unset($val[23]);
		unset($val[24]);
		if($val[4] == "NR"){
			$val[4] = "Not Relevant";
		}elseif($val[4] == "NC"){
			$val[4] = "Not Compliant";
		}elseif($val[4] == "C"){
			$val[4] = "Compliant";
		}elseif($val[4] == "NI"){
			$val[4] = "No Information";
		}elseif($val[4] == "PD"){
			$val[4] = "Pending deadlines";
		}
		fputcsv($rFile, $val, ';');
	}

    fclose($rFile);
    
    ini_set("auto_detect_line_endings", false); //for Mac user    
    $aHeaders = array(
          'Content-Type'        => 'application/octet-stream', 
          'Content-Disposition' => 'attachment; filename="uwwtp_art17_example_'.$annee.'.csv' . '"',
          'Expires'             => '0',
          'Cache-Control'       => 'must-revalidate',
          'Pragma'              =>'public',
          'Content-Length'      => filesize($filename),
      );            
    foreach ($aHeaders as $sName => $sValue) {
        drupal_add_http_header($sName, $sValue);
    }
    readfile($filename); 
    unlink($filename);
    exit();  
}
################################ DATA INPUT ################################
function uwwtd_art17_inport_form($form, &$form_state){

	if(!isset($_SESSION['uwwtd_annee'])){
		drupal_goto('data/article17');
	}
	else{
		// le calcul consiste à vérifier la formule suivante pour toutes les agglos de >2000 pe:
		// field_agggenerated_value> 2000

		$totalAgg = 0;
		$NbtotalAgg = 0;
		$totalAggNC = 0;
		$NbAggNC = 0;
		
		$queryAggGene = "SELECT entity_id, field_agggenerated_value
		FROM drupal_field_data_field_agggenerated 
		WHERE field_agggenerated_value> 2000";
		
		$resultAggGene = db_query($queryAggGene);
		$recordAggGene = $resultAggGene->fetchAll();
		
		foreach($recordAggGene as $totalAggGene){
			$totalAgg = ($totalAggGene->field_agggenerated_value) + $totalAgg;
			$NbtotalAgg = $NbtotalAgg +1;
			
		}
		// dsm($totalAgg);
		// dsm($NbtotalAgg);
		$queryAggComp = "SELECT aggGene.entity_id, aggGene.field_agggenerated_value, aggCompl.field_aggcompliance_value
		FROM drupal_field_data_field_agggenerated aggGene
		INNER JOIN drupal_field_data_field_aggcompliance aggCompl
		ON aggGene.entity_id = aggCompl.entity_id
		WHERE field_agggenerated_value> 2000
		AND aggCompl.field_aggcompliance_value = 'NC'";
		
		$resultAggComp = db_query($queryAggComp);
		$recordAggComp = $resultAggComp->fetchAll();
		foreach($recordAggComp as $totalAggCom){
			$totalAggNC = ($totalAggCom->field_agggenerated_value) + $totalAggNC;
			$NbAggNC = $NbAggNC +1;
		}
		// dsm($totalAggNC);
		// dsm($NbAggNC);
		$peAggGene = 100 * $totalAggNC / $totalAgg;
		$nbAgg = 100 * $NbAggNC / $NbtotalAgg;
		// dsm($peAggGene);
		// dsm($nbAgg);
		// SI(((totalAgg -  totalAggNC)>=97% ou (NbtotalAgg - NbAggNC)>=97%)); "optional"; "mandatory")
		// 2 017 458 - 132 618 = 1 884 840   OU 182 - 8 
		// 100* 132 618/ 2 017 458 = 6.57%   OU  100* 8 /182 = 4.39%
		
		if($peAggGene >= 97 || $nbAgg >=97){
			$article17 = "optional";
		}else{
			$article17 = "mandatory";
		}

		global $base_url;
		$site_url = $base_url.'/';

		// Definition des variables pour le formulaire
		$annee = $_SESSION['uwwtd_annee'];
		
		$form['uwwtd_text'] = array(
			'#markup' => '<h4>'.t('Article 17 import for the year').' : '.$annee.'</h4><br><p>'.t('Your CSV file must be correctly formatted using \' ; \' as the cell separator and \' " \' as the text separator. The file must be encoded in UTF-8 to ensure character readability.').'</p>'
			.'<p>'.t('To help help you having to make your own files we have created for you a file for both the agglomerations and the treatment plants:')
			.'</p><ul>
                        
            <li><a  href="'.base_path().'data/article17/agglomeration/'.$_SESSION['uwwtd_annee'].'">'.t('Agglomerations article 17 pre-generate csv').' ('.$article17.')</a></li>
            <li><a  href="'.base_path().'data/article17/uwwtp/'.$_SESSION['uwwtd_annee'].'">'.t('Uwwtps article 17 pre-generate csv').' ('.$article17.')</a></li>
            
            </ul><br>'
		);
		
		// definition du champ input de type file
		$form['uwwtd_file'] = array(
			'#type' => 'managed_file',
			'#title' => t('Data file'),
			'#upload_validators' => array('file_validate_extensions' => array('csv')),
			'#required' => TRUE,
		);
		
		// Bouton envoyer
		$form['submit_button'] = array(
			'#type' => 'submit',
			'#value' => t('Submit'),
		);
		
		// Fonction a appeller quand on clique sur envoyer
		$form['#submit'][] = 'uwwtd_art17_import_submit_handler';
		return $form;
	}
}

function uwwtd_art17_import_submit_handler($form, &$form_state) {
	
	// Definition et recup des variables
	if(isset($_SESSION['uwwtd_errors'])) unset($_SESSION['uwwtd_errors']);
	if(isset($_SESSION['uwwtd_warnings'])) unset($_SESSION['uwwtd_warnings']);
	$annee = $_SESSION['uwwtd_annee'];
	$file = file_load($form_state['values']['uwwtd_file']);
	$uri = $file->uri;
	
	// On upload le file et la fonction renvoie le nouveau nom du fichier
	$newFile = uwwtd_file_upload($file, '.csv'); 
	
	$datas = uwwtd_csv_to_array($uri, ';');
	//$datas = uwwtd_xml_to_array($uri);
	
	uwwtd_art17_setup_batch($newFile, $annee, $datas);	
}

function uwwtd_art17_setup_batch($newFile, $annee, $datas){
	$batch = array(
		'title' => t('Data import'),
		'operations' => array(
			array('uwwtd_art17_import_article17_process', array($newFile, $annee, $datas))
		),
		'error_message' => t('Error!'),
		'finished' => 'uwwtd_art17_finished',
		'file' => drupal_get_path('module','uwwtd').'/inc/data_center.inc'
	);

	batch_set($batch);
	batch_process('data/article17/import');
}

function uwwtd_art17_import_article17_process($newFile, $annee, $datas, &$context){
	$GLOBALS['uwwtd_errors'] = array();
	$timestamp= time;
	unset($_SESSION['uwwtd_error']);
	unset($_SESSION['uwwtd_warnings']);
	 $e = 0;
	if (!isset($context['sandbox']['progress'])) {
		$context['sandbox']['max'] = count($datas);
		$context['sandbox']['progress'] = 0;
		$context['sandbox']['ids'] = $datas;
	}
	$i = $context['sandbox']['progress'];
	$data = $context['sandbox']['ids'][$i];
	// $keyData = array_keys($data);

	//station
	// $context['sandbox']['existsUwwtp'] = 1;
	///agglo
	$context['sandbox']['existsUwwtp'] = 0;
	
	if($context['sandbox']['existsUwwtp'] == 1){
		// article 17 Station
		if(isset($data[0]) &&($data[0] == '' || empty($data[0]))){
			$e = 1;
			$emes = t('The data you are trying to add for the "uwwCode" column in the Uwwtps article 17 doesn\'t contain an identifier');
			uwwtd_set_error($i, $emes);
			uwwtd_add_error(2, 4, $emes, $timestamp, null, $data);
		}
		if(isset($data[1]) &&($data[1] == '' || empty($data[1]))){
			$e = 1;
			$emes = t('The data you are trying to add for the "uwwName" column in the Uwwtps article 17 doesn\'t contain an identifier');
			uwwtd_set_error($i, $emes);
			uwwtd_add_error(2, 4, $emes, $timestamp, null, $data);
		}
		if(isset($data[2]) && ($data[2] == '' || empty($data[2]))){
			$e = 1;
			$emes = t('The data you are trying to add for the "aggCode" column in the Uwwtps article 17 doesn\'t contain an identifier');
			uwwtd_set_error($i, $emes);
			uwwtd_add_error(2, 4, $emes, $timestamp, null, $data);
		}
		if(isset($data[3]) &&($data[3] == '' || empty($data[3]))){
			$e = 1;
			$emes = t('The data you are trying to add for the "aggName" column in the Uwwtps article 17 doesn\'t contain an identifier');
			uwwtd_set_error($i, $emes);
			uwwtd_add_error(2, 4, $emes, $timestamp, null, $data);
		}
		if(isset($data[4]) && ($data[4] == '' || empty($data[4]))){
			$e = 1;
			$emes = t('The data you are trying to add for the "flatpStatus" column in the Uwwtps article 17 doesn\'t contain an identifier');
			uwwtd_set_error($i, $emes);
			uwwtd_add_error(2, 4, $emes, $timestamp, null, $fata);
		}
		if(isset($data[5]) && ($data[5] == '' || empty($data[5]))){
			$e = 1;
			$emes = t('The data you are trying to add for the "flatpreasons" column in the Uwwtps article 17 doesn\'t contain an identifier');
			uwwtd_set_error($i, $emes);
			uwwtd_add_error(2, 4, $emes, $timestamp, null, $data);
		}
		if(isset($data[6]) && ($data[6] == '' || empty($data[6]))){
			$e = 1;
			$emes = t('The data you are trying to add for the "flatpMeasures" column in the Uwwtps article 17 doesn\'t contain an identifier');
			uwwtd_set_error($i, $emes);
			uwwtd_add_error(2, 4, $emes, $timestamp, null, $data);
		}
		if(isset($data[7]) && ($data[7] == '' || empty($data[7]))){
			$e = 1;
			$emes = t('The data you are trying to add for the "flatpExpload" column in the Uwwtps article 17 doesn\'t contain an identifier');
			uwwtd_set_error($i, $emes);
			uwwtd_add_error(2, 4, $emes, $timestamp, null, $data);
		}
		if(isset($data[8]) && ($data[8] == '' || empty($data[8]))){
			$e = 1;
			$emes = t('The data you are trying to add for the "flatpExpCapacity" column in the Uwwtps article 17 doesn\'t contain an identifier');
			uwwtd_set_error($i, $emes);
			uwwtd_add_error(2, 4, $emes, $timestamp, null, $data);
		}
		if(isset($data[9]) && ($data[9] == '' || empty($data[9]))){
			$e = 1;
			$emes = t('The data you are trying to add for the "flatpExpecTreatment" column in the Uwwtps article 17 doesn\'t contain an identifier');
			uwwtd_set_error($i, $emes);
			uwwtd_add_error(2, 4, $emes, $timestamp, null, $data);
		}
		if(isset($data[10]) && ($data[10] == '' || empty($data[10]))){
			$e = 1;
			$emes = t('The data you are trying to add for the "flatpExpecDateStart" column in the Uwwtps article 17 doesn\'t contain an identifier');
			uwwtd_set_error($i, $emes);
			uwwtd_add_error(2, 4, $emes, $timestamp, null, $data);
		}
		if(isset($data[11]) && ($data[11] == '' || empty($data[11]))){
			$e = 1;
			$emes = t('The data you are trying to add for the "flatpExpecDateStartWork" column in the Uwwtps article 17 doesn\'t contain an identifier');
			uwwtd_set_error($i, $emes);
			uwwtd_add_error(2, 4, $emes, $timestamp, null, $data);
		}
		if(isset($data[12]) && ($data[12] == '' || empty($data[12]))){
			$e = 1;
			$emes = t('The data you are trying to add for the "flatpExpecDateCompletion" column in the Uwwtps article 17 doesn\'t contain an identifier');
			uwwtd_set_error($i, $emes);
			uwwtd_add_error(2, 4, $emes, $timestamp, null, $data);
		}
		if(isset($data[13]) && ($data[13] == '' || empty($data[13]))){
			$e = 1;
			$emes = t('The data you are trying to add for the "flatpExpecDateperformance" column in the Uwwtps article 17 doesn\'t contain an identifier');
			uwwtd_set_error($i, $emes);
			uwwtd_add_error(2, 4, $emes, $timestamp, null, $data);
		}
		if(isset($data[14]) && ($data[14] == '' || empty($data[14]))){
			$e = 1;
			$emes = t('The data you are trying to add for the "flatpInv" column in the Uwwtps article 17 doesn\'t contain an identifier');
			uwwtd_set_error($i, $emes);
			uwwtd_add_error(2, 4, $emes, $timestamp, null, $data);
		}
		if(isset($data[15]) && ($data[15] == '' || empty($data[15]))){
			$e = 1;
			$emes = t('The data you are trying to add for the "flatpEUfundname" column in the Uwwtps article 17 doesn\'t contain an identifier');
			uwwtd_set_error($i, $emes);
			uwwtd_add_error(2, 4, $emes, $timestamp, null, $data);
		}
		if(isset($data[16]) && ($data[16] == '' || empty($data[16]))){
			$e = 1;
			$emes = t('The data you are trying to add for the "flatpEUfund" column in the Uwwtps article 17 doesn\'t contain an identifier');
			uwwtd_set_error($i, $emes);
			uwwtd_add_error(2, 4, $emes, $timestamp, null, $data);
		}

	}
	//Agglo
	if($context['sandbox']['existsUwwtp'] == 0){
		if(isset($data[0]) && ($data[0] == '' || empty($data[0]))){
			$e = 1;
			$emes = t('The data you are trying to add for the "aggCode" column in the Agglomerations article 17 doesn\'t contain an identifier');
			uwwtd_set_error($i, $emes);
			uwwtd_add_error(2, 4, $emes, $timestamp, null, $data);
		}
		if(isset($data[1]) && ($data[1] == '' || empty($data[1]))){
			$e = 1;
			$emes = t('The data you are trying to add for the "aggName" column in the Agglomerations article 17 doesn\'t contain an identifier');
			uwwtd_set_error($i, $emes);
			uwwtd_add_error(2, 4, $emes, $timestamp, null, $data);
		}
		if(isset($data[2]) && ($data[2] == '' || empty($data[2]))){
			$e = 1;
			$emes = t('The data you are trying to add for the "flaggStatus" column in the Agglomerations article 17 doesn\'t contain an identifier');
			uwwtd_set_error($i, $emes);
			uwwtd_add_error(2, 4, $emes, $timestamp, null, $data);
		}
		if(isset($data[3]) && ($data[3] == '' || empty($data[3]))){
			$e = 1;
			$emes = t('The data you are trying to add for the "flaggreasons" column in the Agglomerations article 17 doesn\'t contain an identifier');
			uwwtd_set_error($i, $emes);
			uwwtd_add_error(2, 4, $emes, $timestamp, null, $data);
		}
		if(isset($data[4]) && ($data[4] == '' || empty($data[4]))){
			$e = 1;
			$emes = t('The data you are trying to add for the "flaggMeasures" column in the Agglomerations article 17 doesn\'t contain an identifier');
			uwwtd_set_error($i, $emes);
			uwwtd_add_error(2, 4, $emes, $timestamp, null, $data);
		}
		if(isset($data[5]) && ($data[5] == '' || empty($data[5]))){
			$e = 1;
			$emes = t('The data you are trying to add for the "flaggExpecDateStart" column in the Agglomerations article 17 doesn\'t contain an identifier');
			uwwtd_set_error($i, $emes);
			uwwtd_add_error(2, 4, $emes, $timestamp, null, $data);
		}
		if(isset($data[6]) && ($data[6] == '' || empty($data[6]))){
			$e = 1;
			$emes = t('The data you are trying to add for the "flaggExpecDateStartWork" column in the Agglomerations article 17 doesn\'t contain an identifier');
			uwwtd_set_error($i, $emes);
			uwwtd_add_error(2, 4, $emes, $timestamp, null, $data);
		}
		if(isset($data[7]) && ($data[7] == '' || empty($data[7]))){
			$e = 1;
			$emes = t('The data you are trying to add for the "flaggExpecDateCompletion" column in the Agglomerations article 17 doesn\'t contain an identifier');
			uwwtd_set_error($i, $emes);
			uwwtd_add_error(2, 4, $emes, $timestamp, null, $data);
		}
		if(isset($data[8]) && ($data[8] == '' || empty($data[8]))){
			$e = 1;
			$emes = t('The data you are trying to add for the "flaggInv" column in the Agglomerations article 17 doesn\'t contain an identifier');
			uwwtd_set_error($i, $emes);
			uwwtd_add_error(2, 4, $emes, $timestamp, null, $data);
		}
		if(isset($data[9]) && ($data[9] == '' || empty($data[9]))){
			$e = 1;
			$emes = t('The data you are trying to add for the "flaggEUfundname" column in the Agglomerations article 17 doesn\'t contain an identifier');
			uwwtd_set_error($i, $emes);
			uwwtd_add_error(2, 4, $emes, $timestamp, null, $data);
		}
		if(isset($data[10]) && ($data[10] == '' || empty($data[10]))){
			$e = 1;
			$emes = t('The data you are trying to add for the "FlaggEUfund" column in the Agglomerations article 17 doesn\'t contain an identifier');
			uwwtd_set_error($i, $emes);
			uwwtd_add_error(2, 4, $emes, $timestamp, null, $data);
		}
	}

	// Check if no errors were found
	if($e == 0){

		// Variables
		$uri = $newFile->uri;
		$filename = $newFile->filename;
		$filename .= ".csv";
		$fid = $newFile->fid;
		
		if($context['sandbox']['existsUwwtp'] == 1) {
			$siteId = $annee.'_uww_'.uwwtd_check_text($data[0]);
		}else{
			$siteId = $annee.'_agg_'.uwwtd_check_text($data[0]);
		}
		// Check if id exists
		$exists = uwwtd_check_exist($siteId);
		// If the element exists
		if($exists != false){
			// load the exisiting element
			$element = node_load($exists);
			$art17_title = $element->field_siteid['und'][0]['value'] .' - Article 17 data '.$annee;
			// dsm($element);
			if($element->type == 'agglomeration'){
				if(isset($element->field_article17_agglo['und'][0]['nid']) && $element->field_article17_agglo['und'][0]['nid']!= ""){
					$art = node_load($element->field_article17_agglo['und'][0]['nid']);
				}else{
					// Create new article 17 node
					$art = new StdClass();
					$art->type = 'article_17_agglomeration';
					$art->title = $art17_title;
				}
				// Article 17 mapping for Agglomerations
				if(isset($data[0]) && !empty($data[0])) $art->field_art17agg_aggcode['und'][0]['value'] = $data[0];
				if(isset($data[1]) && !empty($data[1])) $art->field_art17agg_aggname['und'][0]['value'] = $data[1];
				if(isset($data[2]) && !empty($data[2])) $art->field_art17_flaggstatus['und'][0]['value'] = $data[2];
				if(isset($data[3]) && !empty($data[3])) $art->field_art17_flaggreasons['und'][0]['value'] = $data[3];
				if(isset($data[4]) && !empty($data[4])) $art->field_art17_flaggmeasures['und'][0]['value'] = $data[4];
				if(isset($data[5]) && !empty($data[5])) $art->field_art17_flaggexpecdatestart['und'][0]['value'] = uwwtd_check_date($data[5], $timestamp);
				if(isset($data[6]) && !empty($data[6])) $art->field_art17_flaggexpecdatestartw['und'][0]['value'] = uwwtd_check_date($data[6], $timestamp);
				if(isset($data[7]) && !empty($data[7])) $art->field_art17_flaggexpecdatecomple['und'][0]['value'] = uwwtd_check_date($data[7], $timestamp);
				if(isset($data[8]) && !empty($data[8])) $art->field_art17_flagginv['und'][0]['value'] = uwwtd_check_decimal($data[8], $timestamp);
				if(isset($data[9]) && !empty($data[9])) $art->field_art17_flaggeufundname['und'][0]['value'] = $data[9];
				if(isset($data[10]) && !empty($data[10])) $art->field_art17_flaggeufund['und'][0]['value'] = uwwtd_check_numeric($data[10], $timestamp);
				if(isset($data[11]) && !empty($data[11])) $art->field_art17_flaggcomments['und'][0]['value'] = $data[11];
				if(isset($data[12]) && !empty($data[12])) $art->field_art17_flaggexpload['und'][0]['value'] = uwwtd_check_numeric($data[12], $timestamp);
				if(isset($data[13]) && !empty($data[13])) $art->field_art17_flaggexploadcoll['und'][0]['value'] = uwwtd_check_decimal($data[13], $timestamp);
				if(isset($data[14]) && !empty($data[14])) $art->field_art17_flaggexploadias['und'][0]['value'] = uwwtd_check_decimal($data[14], $timestamp);
				if(isset($data[15]) && !empty($data[15])) $art->field_art17_flaggotherfund['und'][0]['value'] = uwwtd_check_numeric($data[15], $timestamp);
				if(isset($data[16]) && !empty($data[16])) $art->field_art17_flaggotherfundname['und'][0]['value'] = $data[16];
				if(isset($data[17]) && !empty($data[17])) $art->field_art17_flaggloan['und'][0]['value'] = uwwtd_check_numeric($data[17], $timestamp);
				if(isset($data[18]) && !empty($data[18])) $art->field_art17_flaggloanname['und'][0]['value'] = $data[18];
				
				$art->field_anneedata['und'][0]['value'] = $annee;
				$art->uid = 1;
				$art->language = $element->language;
				// Article 17 link to element
				$art->field_art17agg_link_agglo['und'][0]['nid'] = $element->nid;
			}else{
				if(isset($element->field_article17_uwwtp['und'][0]['nid']) && ($element->field_article17_uwwtp['und'][0]['nid']!= "" || $element->field_article17_uwwtp['und'][0]['nid']!= NULL)){
					$art = node_load($element->field_article17_uwwtp['und'][0]['nid']);
				}else{
					// Create new article 17 node
					$art = new StdClass();
					$art->type = 'article_17_uwwtp';
					$art->title = $art17_title;
				}
			
				// Article 17 mapping for UWWTP
				if(isset($data[0]) && !empty($data[0])) $art->field_art17uwwtp_uwwcode['und'][0]['value'] = $data[0];
				if(isset($data[1]) && !empty($data[1])) $art->field_art17uwwtp_uwwname['und'][0]['value'] = $data[1];
				if(isset($data[2]) && !empty($data[2])) $art->field_art17uwwtp_aggcode['und'][0]['value'] = $data[2];
				if(isset($data[3]) && !empty($data[3])) $art->field_art17uwwtp_aggname['und'][0]['value'] = $data[3];
				if(isset($data[4]) && !empty($data[4])) $art->field_art17_flatpstatus['und'][0]['value'] = $data[4];
				if(isset($data[5]) && !empty($data[5])) $art->field_art17_flatpreasons['und'][0]['value'] = $data[5];
				if(isset($data[6]) && !empty($data[6])) $art->field_art17_flatpmeasures['und'][0]['value'] = $data[6];
				if(isset($data[7]) && !empty($data[7])) $art->field_art17_flatpexpload['und'][0]['value'] = uwwtd_check_numeric($data[7], $timestamp);
				if(isset($data[8]) && !empty($data[8])) $art->field_art17_flatpexpcapacity['und'][0]['value'] = uwwtd_check_numeric($data[8],$timestamp);
				if(isset($data[9]) && !empty($data[9])) $art->field_art17_flatptexpectreatment['und'][0]['value'] = $data[9];
				if(isset($data[10]) && !empty($data[10])) $art->field_art17_flatpexpecdatestart['und'][0]['value'] = uwwtd_check_date($data[10], $timestamp);
				if(isset($data[11]) && !empty($data[11])) $art->field_art17_flatpexpecdatestartw['und'][0]['value'] = uwwtd_check_date($data[11], $timestamp);
				if(isset($data[12]) && !empty($data[12])) $art->field_art17_flatpexpecdatecomple['und'][0]['value'] = uwwtd_check_date($data[12], $timestamp);
				if(isset($data[13]) && !empty($data[13])) $art->field_art17_flatpexpecdateperfor['und'][0]['value'] = uwwtd_check_date($data[13], $timestamp);
				if(isset($data[14]) && !empty($data[14])) $art->field_art17_flatpinv['und'][0]['value'] = uwwtd_check_numeric($data[14], $timestamp);
				if(isset($data[15]) && !empty($data[15])) $art->field_art17_flatpeufundname['und'][0]['value'] = $data[15];
				if(isset($data[16]) && !empty($data[16])) $art->field_art17_flatpeufund['und'][0]['value'] = uwwtd_check_numeric($data[16], $timestamp);
				if(isset($data[17]) && !empty($data[17])) $art->field_art17_flatpcomments['und'][0]['value'] = $data[17];
				if(isset($data[18]) && !empty($data[18])) $art->field_art17_flatpexploadtruck['und'][0]['value'] = uwwtd_check_decimal($data[18], $timestamp);
				if(isset($data[19]) && !empty($data[19])) $art->field_art17_flatpotherfund['und'][0]['value'] = uwwtd_check_numeric($data[19], $timestamp);
				if(isset($data[20]) && !empty($data[20])) $art->field_art17_flatpotherfundname['und'][0]['value'] = $data[20];
				if(isset($data[22]) && !empty($data[21])) $art->field_art17_flatploan['und'][0]['value'] = uwwtd_check_numeric($data[21], $timestamp);
				if(isset($data[22]) && !empty($data[22])) $art->field_art17_flatploanname['und'][0]['value'] = $data[22];
				$art->field_anneedata['und'][0]['value'] = $annee;
				$art->uid = 1;
				$art->language = $element->language;
				// Article 17 link to element
				$art->field_art17uwwtp_link_uwwtp['und'][0]['nid'] = $element->nid;
			}
			// Save the article 17 element
			node_save($art);
			
			// Link element tot Article 17
			if($element->type == 'agglomeration'){
				$element->field_article17_agglo['und'][0]['nid'] = $art->nid;
			}else{
				$element->field_article17_uwwtp['und'][0]['nid'] = $art->nid;
			}
			// Save the element
			node_save($element);
		}
		else{
			$emes = t('WARNING : the element at index').': '.$i.' '.t('does not correspond to any identifier in the database.');
			uwwtd_set_warning($i, $emes);

		}
	}
	uwwtd_flush_errors();
	$context['sandbox']['progress']++;
	$context['message'] = t('Processing Article 17...' . $context['sandbox']['progress'] .'/'. $context['sandbox']['max']);
	
	if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
		$context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
	}
}

// function uwwtd_art17_date($string){
	// $exploded = explode('/', $string);
	// if(count($exploded) > 1){
		// $date = $exploded[1].'-'.$exploded[0].'-01 00:00:00';
		// dsm($date);
		// return $date;
	// }
// }

function uwwtd_art17_finished($success, $results, $operations){
	if ($success) {
		drupal_set_message(t('All the Article 17 data has been added to the site.'));
		if(isset($_SESSION['uwwtd_error'])){
			uwwtd_add_error(2, 4, $_SESSION['uwwtd_error'], $timestamp, null, $data);
			
			foreach($_SESSION['uwwtd_error'] as $error){
				drupal_set_message(t('Error occured on row index : ').$error[0].' (" '.$error[1].' ") '.t(' of your file. This element was not added, please check your input file.'), 'error');
			}
		}
		if(isset($_SESSION['uwwtd_warnings'])){
			uwwtd_add_error(2, 4, $_SESSION['uwwtd_warnings'], $timestamp, null, $data);
			foreach($_SESSION['uwwtd_warnings'] as $warning){
				drupal_set_message(t('Warning occured on row index : ').$warning[0].' (" '.$warning[1].' ") '.t(' of your file. This element was not added, please check your input file.'), 'warning');
			}
		}
	}
	else {
		// An error occurred.
		// $operations contains the operations that remained unprocessed.
		$error_operation = reset($operations);
		drupal_set_message(
			t('An error occurred while processing @operation with arguments : @args',
				array(
					'@operation' => $error_operation[0],
					'@args' => print_r($error_operation[0], TRUE),
				)
			)
		);
	}
}