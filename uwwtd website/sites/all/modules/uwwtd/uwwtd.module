<?php

require_once(drupal_get_path('module', 'uwwtd') . '/inc/uwwtd.config.inc');
require_once(drupal_get_path('module', 'uwwtd') . '/inc/utils.inc');

//refaire menu listerror
//dans bulk datadeletion, supprimer error
//get all label from database ?   $field = field_info_field('field_uwwtd_err_category');
//get all color from database ?   $field = field_info_field('field_uwwtd_err_category');

function uwwtd_menu(){
	$items = array();
	$items['data'] = array(
		'title' => t('Data management center'),
		'description' => t('A center to manage all the site data'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('uwwtd_data_form'),
		//'access callback' => TRUE,
		'access arguments' => array('Data-management access'),
		'file' => 'data_center.inc',
		'file path' => drupal_get_path('module', 'uwwtd') . '/inc/',
		);
	$items['data/import'] = array(
		'title' => t('Data import'),
		'description' => t('Form to upload new data'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('uwwtd_import_form'),
		//'access callback' => TRUE,
		'access arguments' => array('Data-management access'),
		'file' => 'data_center.inc',
		'file path' => drupal_get_path('module', 'uwwtd') . '/inc/',
		);
	$items['data/shapes'] = array(
		'title' => t('Receiving areas\' shapes upload'),
		'description' => t('Form to upload the receiving areas\' shapes'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('uwwtd_shapes_form'),
		//'access callback' => TRUE,
		'access arguments' => array('Data-management access'),
		'file' => 'data_center.inc',
		'file path' => drupal_get_path('module', 'uwwtd') . '/inc/',
		);
	$items['data/check'] = array(
		'title' => t('Data checking process'),
		'description' => t('Process to check all the entered data for a given year'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('uwwtd_check_form'),
		//'access callback' => TRUE,
		'access arguments' => array('Data-management access'),
		'file' => 'data_center.inc',
		'file path' => drupal_get_path('module', 'uwwtd') . '/inc/',
		);
	$items['data/conformity'] = array(
		'title' => t('Data conformity'),
		'description' => t('Data conformity page'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('uwwtd_conformity_form'),
		//'access callback' => TRUE,
		'access arguments' => array('Data-management access'),
		'file' => 'data_center.inc',
		'file path' => drupal_get_path('module', 'uwwtd') . '/inc/',
		);


	$items['register']=array(
		'title' => t('Register'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('uwwtd_register_form'),
		//'access callback' => TRUE,
		'access arguments' => array('Data-management access'),
		'file' => 'inc/register.inc',
		'file path' => drupal_get_path('module', 'uwwtd')
	);

	$items['id/%/%'] = array(
        'page callback' => 'uwwtd_node_redirect',
        'page arguments' => array(1,2),
        'access arguments' => true,
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
  $items['id/%/%/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['id/%/%/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'uwwtd_node_redirect',
    'page arguments' => array(1,2,3),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  //redirection treatment-plant
  $items['treatment-plant/%'] = array(
    'page callback' => 'uwwtd_node_redirection',
    'page arguments' => array(1),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );
  //redirection agglomeration
  $items['agglomeration/%'] = array(
    'page callback' => 'uwwtd_node_redirection',
    'page arguments' => array(1),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );
  //redirection receiving-area
  $items['receiving-area/%'] = array(
    'page callback' => 'uwwtd_node_redirection',
    'page arguments' => array(1),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );
  //redirection discharge-point
  $items['discharge-point/%'] = array(
    'page callback' => 'uwwtd_node_redirection',
    'page arguments' => array(1),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );
  ///////////////////////////////////////////////////////////////////
  $items['agglomerations/compliance'] = array(
    'page callback' => 'uwwtd_page_agglomeration_compliance',
    'page arguments' => array(),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
    'file' => 'pages.inc',
 	'file path' => drupal_get_path('module', 'uwwtd') . '/inc/'
  );
  $items['agglomerations/compliance/csv'] = array(
    'page callback' => 'uwwtd_page_agglomeration_compliance',
    'page arguments' => array('csv'),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
    'file' => 'pages.inc',
 	'file path' => drupal_get_path('module', 'uwwtd') . '/inc/'
  );
  $items['agglomerations/compliance/xls'] = array(
    'page callback' => 'uwwtd_page_agglomeration_compliance',
    'page arguments' => array('xls'),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
    'file' => 'pages.inc',
 	'file path' => drupal_get_path('module', 'uwwtd') . '/inc/'
  );
  $items['agglomerations/connection'] = array(
    'page callback' => 'uwwtd_page_agglomeration_connection',
    'page arguments' => array(),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
    'file' => 'pages.inc',
 	'file path' => drupal_get_path('module', 'uwwtd') . '/inc/'
  );
  $items['agglomerations/connection/csv'] = array(
    'page callback' => 'uwwtd_page_agglomeration_connection',
    'page arguments' => array('csv'),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
    'file' => 'pages.inc',
 	'file path' => drupal_get_path('module', 'uwwtd') . '/inc/'
  );
  $items['agglomerations/connection/xls'] = array(
    'page callback' => 'uwwtd_page_agglomeration_connection',
    'page arguments' => array('xls'),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
    'file' => 'pages.inc',
 	'file path' => drupal_get_path('module', 'uwwtd') . '/inc/'
  );    
  $items['uwwtps/compliance'] = array(
    'page callback' => 'uwwtd_page_uwwtps_compliance',
    'page arguments' => array(),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
    'file' => 'pages.inc',
 	'file path' => drupal_get_path('module', 'uwwtd') . '/inc/'
  );
  $items['uwwtps/compliance/csv'] = array(
    'page callback' => 'uwwtd_page_uwwtps_compliance',
    'page arguments' => array('csv'),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
    'file' => 'pages.inc',
 	'file path' => drupal_get_path('module', 'uwwtd') . '/inc/'
  );
  $items['uwwtps/compliance/xls'] = array(
    'page callback' => 'uwwtd_page_uwwtps_compliance',
    'page arguments' => array('xls'),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
    'file' => 'pages.inc',
 	'file path' => drupal_get_path('module', 'uwwtd') . '/inc/'
  );
  $items['uwwtps/treatment'] = array(
    'page callback' => 'uwwtd_page_uwwtps_treatment',
    'page arguments' => array(),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
    'file' => 'pages.inc',
 	'file path' => drupal_get_path('module', 'uwwtd') . '/inc/'
  );
  $items['uwwtps/treatment/csv'] = array(
    'page callback' => 'uwwtd_page_uwwtps_treatment',
    'page arguments' => array('csv'),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
    'file' => 'pages.inc',
 	'file path' => drupal_get_path('module', 'uwwtd') . '/inc/'
  );
  $items['uwwtps/treatment/xls'] = array(
    'page callback' => 'uwwtd_page_uwwtps_treatment',
    'page arguments' => array('xls'),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
    'file' => 'pages.inc',
 	'file path' => drupal_get_path('module', 'uwwtd') . '/inc/'
  );    
  $items['uwwtps/pressure'] = array(
    'page callback' => 'uwwtd_page_uwwtps_pressure',
    'page arguments' => array(),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
    'file' => 'pages.inc',
 	'file path' => drupal_get_path('module', 'uwwtd') . '/inc/'
  );
  $items['uwwtps/pressure/csv'] = array(
    'page callback' => 'uwwtd_page_uwwtps_pressure',
    'page arguments' => array('csv'),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
    'file' => 'pages.inc',
 	'file path' => drupal_get_path('module', 'uwwtd') . '/inc/'
  );
  $items['uwwtps/pressure/xls'] = array(
    'page callback' => 'uwwtd_page_uwwtps_pressure',
    'page arguments' => array('xls'),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
    'file' => 'pages.inc',
 	'file path' => drupal_get_path('module', 'uwwtd') . '/inc/'
  );

  $items['sensitive-areas'] = array(
    'title' => 'Sensitive areas',
    'page callback' => 'uwwtd_sensitive_areas_page',
    'access callback' => true,
    'type' => MENU_CALLBACK,
    'file' => 'pages.inc',
 	'file path' => drupal_get_path('module', 'uwwtd') . '/inc/'
  );
  $items['sensitive_areas/csv'] = array(
    'page callback' => 'uwwtd_sensitive_areas_page',
    'page arguments' => array('csv'),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
    'file' => 'pages.inc',
 	'file path' => drupal_get_path('module', 'uwwtd') . '/inc/'
  );
  $items['sensitive_areas/xls'] = array(
    'page callback' => 'uwwtd_sensitive_areas_page',
    'page arguments' => array('xls'),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
    'file' => 'pages.inc',
 	'file path' => drupal_get_path('module', 'uwwtd') . '/inc/'
  );
  
  $items['discharge-points'] = array(
    'title' => 'Discharge points',
    'page callback' => 'uwwtd_dcp_page',
    'access callback' => true,
    'type' => MENU_CALLBACK,
    'file' => 'pages.inc',
 	'file path' => drupal_get_path('module', 'uwwtd') . '/inc/'
  );
  $items['discharge-points/csv'] = array(
    'page callback' => 'uwwtd_dcp_page',
    'page arguments' => array('csv'),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
    'file' => 'pages.inc',
 	'file path' => drupal_get_path('module', 'uwwtd') . '/inc/'
  );
  $items['discharge-points/xls'] = array(
    'page callback' => 'uwwtd_dcp_page',
    'page arguments' => array('xls'),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
    'file' => 'pages.inc',
 	'file path' => drupal_get_path('module', 'uwwtd') . '/inc/'
  );
  
  $items['download'] = array(
    'page callback' => 'uwwtd_page_download',
    'page arguments' => array(),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );  
  ///////////////////////////////////////////////////////////////////
//     $items['report/pdf'] = array(
// 		'title' => t('PDF report'),
// 		'description' => t('Data conformity page'),
// 		'page callback' => 'uwwtd_make_pdf_report',
// 		//'page arguments' => array('uwwtd_conformity_form'),
// 		'access callback' => TRUE,
// 		//'access arguments' => array('Data-management access'),
// 		'file' => 'pdf.inc',
// 		'file path' => drupal_get_path('module', 'uwwtd')
// 	);
  $items['debug-export-xml/nid/%/aggcode/%'] = array(
    'page callback' => 'debug_export_xml',
    'page arguments' => array(2,3,4),
//     'access callback' => true,
    'access arguments' => array('Data-management access'),
    'type' => MENU_CALLBACK,
// 	'file' => 'utils.inc',
// 	'file path' => drupal_get_path('module', 'uwwtd') . '/inc/'
  );
    $items['uwwtd-debug']=array(
    	'title' => t('Debug'),
    	'page callback' => 'uwwtd_debug',
    	//'page arguments' => array('uwwtd_debug_form'),
    	//'access callback' => TRUE,
    	'access arguments' => array('Data-management access'),
     	'file' => 'utils.inc',
     	'file path' => drupal_get_path('module', 'uwwtd') . '/inc',
    );
  $items['stats/querys'] = array(
  		'page callback' => 'uwwtd_page_stats_querys',
  		'page arguments' => array(),
  		'access callback' => true,
  		'access arguments' => true,
  		'type' => MENU_CALLBACK,
  		'file' => 'uwwtd.stats.inc',
  		'file path' => drupal_get_path('module', 'uwwtd')
  );
  $items['stats/graphs'] = array(
  		'page callback' => 'uwwtd_stats_graphs_page',
  		'page arguments' => array(),
  		'access callback' => true,
  		'access arguments' => true,
  		'type' => MENU_CALLBACK,
  		'file' => 'uwwtd.graphs.inc',
  		'file path' => drupal_get_path('module', 'uwwtd')
  );
	//MENUS FOR CONFIGURATION

  	$items['admin/config/uwwtd'] = array(
      'title' => 'uwwtd configuration',
      'description' => 'Settings for the uwwtd application',
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('Data-management access'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
  	);

    $items['admin/config/uwwtd/extlinks'] = array(
    'title' => 'Set external links',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('construct_extlinks_form'),
    'access arguments' => array('Data-management access'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'uwwtd.forms.inc'
    );
    
    $items['admin/config/uwwtd/general'] = array(
    'title' => 'General settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uwwtd_general_config'),
    'access arguments' => array('Data-management access'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'inc/uwwtd.admin.config.inc'
    );    

	$items['admin/config/uwwtd/download'] = array(
    'title' => 'Metadata links',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uwwtd_download_config'),
    'access arguments' => array('Data-management access'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'inc/uwwtd.admin.config.inc'
    );  
	
  //rebuild slovenia deadline
    $items['correction_slovenia_date'] = array(
    'page callback' => 'uwwtd_correction_slovenia_date',
//     'access callback' => true,
    'access arguments' => array('Data-management access'),
    'type' => MENU_CALLBACK,
    'file' => 'correction.inc',
    'file path' => drupal_get_path('module', 'uwwtd') . '/inc',
    );

  return $items;
}

function uwwtd_node_redirect($annee, $id, $action = null){
	$query = db_select('field_data_field_siteid', 's');
	$query->fields('s', array('entity_id', 'field_siteid_value'));
	$query->condition('field_siteid_value', db_like($annee.'_'.$id), 'LIKE');

	$result = $query->execute();
	$node = false;
	while($record = $result->fetchAssoc()) {
		$node = node_load($record['entity_id']);
	}

	if($action == 'edit') {
		drupal_goto('node/' . $node->nid . '/edit');
	}

	if($node == false){
		drupal_set_message(t("The element you were searching for doesn't exist, sorry."), 'warning');
		drupal_goto('<front>');
	}
	else{
		drupal_set_title($node->title);
		return render(node_view($node, 'full'));
	}
}

function uwwtd_init(){
    //$d3 = d3_get_libraries();
    //dsm($d3);
    //drupal_add_library('d3', 'd3.drupal');
   
    
}

//test
function uwwtd_node_redirection($id){
	$page_url = "http://".$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];
	//echo "<pre>";print_r($_SERVER['REQUEST_URI']);echo "</pre>";
	$type= explode("/",$page_url);
	$type= $type[4];
	//echo "<pre>";print_r($type);echo "</pre>";
	if($type=='treatment-plant'){
		$typeR='uww';
		$id= strtolower($id);
	}
	if($type=='agglomeration'){
		$typeR='agg';
		$id= strtolower($id);
	}
	if($type=='receiving-area'){
		$typeR='rca';
		$id= strtolower($id);
	}
	if($type=='discharge-point'){
		$typeR='dcp';
		$id= strtolower($id);
	}
	//selectionne la dernière année
// 	$query = "SELECT MAX(field_anneedata_value) FROM {field_data_field_anneedata}";
// 	$result = db_query($query);
// 	$annee = $result->fetchField();
    $annee = uwwtd_get_max_annee();

	$query = db_select('field_data_field_siteid', 's');
	$query->fields('s', array('entity_id', 'field_siteid_value'));
	$query->condition('field_siteid_value', db_like($annee.'_'.$typeR.'_'.$id), 'LIKE');
	$result = $query->execute();
	$record = $result->fetchAssoc();
	$node = false;

	if($record ==''){
		$query = db_select('field_data_field_siteid', 's');
		$query->fields('s', array('entity_id', 'field_siteid_value'));
		$query->condition('field_siteid_value',  db_like($annee.'_'.$id), '=');
		$result = $query->execute();
		$record = $result->fetchAssoc();
		$node=$record['entity_id'];
	}else{
		$node=$record['entity_id'];
	}
	if($node == false){
		drupal_set_message(t("The element you were searching for doesn't exist, sorry."), 'warning');
		drupal_goto('<front>');
	}
	else{
            drupal_goto($GLOBALS['base_url'] . '/'.$type.'/'.$id.'/'.$annee);
    		drupal_set_title($node->title);        
	}
}

// function uwwtd_debug_form($form, &$form_state){
// 	// definition du champ input de type file
// 	$form['uwwtd_file'] = array(
// 		'#type' => 'managed_file',
// 		'#title' => t('Data file'),
// 		'#upload_validators' => array('file_validate_extensions' => array('shp')),
// 		'#required' => TRUE,
// 	);
//
// 	// Bouton envoyer
// 	$form['submit_button'] = array(
// 		'#type' => 'submit',
// 		'#value' => t('Submit'),
// 	);
//
// 	// Fonction a appeller quand on clique sur envoyer
// 	$form['#submit'][] = 'uwwtd_debug_submit_handler';
//     return $form;
// }

function uwwtd_views_pre_build(&$view){
	//dsm($view);
	if(
		$view->name == 'waste_water_network' ||
		$view->name == 'uwwtp_map' ||
		$view->name == 'uwwtp_treatment' ||
		$view->name == 'agglomeration' ||
		$view->name == 'agglomeration_conformity' ||
		$view->name == 'data_deletion'
	){
// 		$year = db_query(
// 			"SELECT MAX(field_anneedata_value) FROM {field_data_field_anneedata}"
// 		)->fetchField();
        $year = uwwtd_get_max_annee();
		if(!empty($year)) $view->filter['field_anneedata_value']->value = $year;
	}
    
//     if ($view->name == 'error_list') {
//         dsm($view);
//     }
}

function uwwtd_views_pre_render(&$view){
// 	dsm($view);

//todo use config 
// $GLOBALS['uwwtd_errors_type']['category'] = array(
//     'input' => 0,
//     'linking' => 1,
//     'geometry' => 2,
//     'conformity' => 3,
//     'format' => 4,
// );
// // 0|Notification
// // 1|Warning
// // 2|Error
// //$GLOBALS['uwwtd_errors_type']['type']['error']
// $GLOBALS['uwwtd_errors_type']['type'] = array(
//     'notification' => 0,
//     'warning' => 1,
//     'error' => 2,
// );

    if ($view->name == 'error_list' && is_array($view->result)) {
        $type_error = array_flip($GLOBALS['uwwtd_errors_type']['type']);
        $category_error = array_flip($GLOBALS['uwwtd_errors_type']['category']);
// dsm($type_error);
// dsm($category_error);
//         
        foreach($view->result as $r => $result){
            if(isset($view->result[$r]->uwwtd_import_errors_type)){
//                 dsm($view->result[$r]);
// dsm($view->result[$r]->uwwtd_import_errors_type);
// dsm($type_error[$view->result[$r]->uwwtd_import_errors_type]);
                if (isset($type_error[$view->result[$r]->uwwtd_import_errors_type])) {
                    $view->result[$r]->uwwtd_import_errors_type = t($type_error[$view->result[$r]->uwwtd_import_errors_type]);
                }
                if (isset($category_error[$view->result[$r]->uwwtd_import_errors_category])) {
                    $view->result[$r]->uwwtd_import_errors_category = t($category_error[$view->result[$r]->uwwtd_import_errors_category]);
                }
//                 break;
            }    
        }
    }
    
	// if uwwtd treatment view
	if($view->name == 'uwwtp_treatment' && $view->result !== TRUE){
		foreach($view->result as $r => $result){
			//dsm($result);
		    //$view->result[$r]->field = 1;
		    if(isset($view->result[$r]->field_field_uwwprimarytreatment[0]['raw']['value'])){
		    	//dsm($view->result[$r]->field_field_uwwprimarytreatment[0]);
		    	if($view->result[$r]->field_field_uwwprimarytreatment[0]['raw']['value'] === '1') $view->result[$r]->field_field_uwwprimarytreatment[0]['rendered']['#markup'] = t('Yes');
		    	else $view->result[$r]->field_field_uwwprimarytreatment[0]['rendered']['#markup'] = t('No');
		    }
		    if(isset($view->result[$r]->field_field_uwwsecondarytreatment[0]['raw']['value'])){
		    	if($view->result[$r]->field_field_uwwsecondarytreatment[0]['raw']['value'] === '1') $view->result[$r]->field_field_uwwsecondarytreatment[0]['rendered']['#markup'] = t('Yes');
		    	else $view->result[$r]->field_field_uwwsecondarytreatment[0]['rendered']['#markup'] = t('No');
		    }
		    if(isset($view->result[$r]->field_field_uwwnremoval[0]['raw']['value'])){
		    	if($view->result[$r]->field_field_uwwnremoval[0]['raw']['value'] === '1') $view->result[$r]->field_field_uwwnremoval[0]['rendered']['#markup'] = t('Yes');
		    	else $view->result[$r]->field_field_uwwnremoval[0]['rendered']['#markup'] = t('No');
		    }
		    if(isset($view->result[$r]->field_field_uwwpremoval[0]['raw']['value'])){
		    	if($view->result[$r]->field_field_uwwpremoval[0]['raw']['value'] === '1') $view->result[$r]->field_field_uwwpremoval[0]['rendered']['#markup'] = t('Yes');
		    	else $view->result[$r]->field_field_uwwpremoval[0]['rendered']['#markup'] = t('No');
		    }
		}
	}
}

function uwwtd_form_views_exposed_form_alter(&$form, &$form_state){
	//dsm($form);
		// for treatment plant booleans
		if($form['#id'] == "views-exposed-form-uwwtp-treatment-page"){
			$options = array(
				'All' => t('- All -'),
				'1' => t('Yes'),
				'0' => t('No')
			);

			$form['field_uwwprimarytreatment_value'] = array(
				'#type' => 'select',
				'#options' => $options
			);
			$form['field_uwwsecondarytreatment_value'] = array(
				'#type' => 'select',
				'#options' => $options
			);
			$form['field_uwwnremoval_value'] = array(
				'#type' => 'select',
				'#options' => $options
			);
			$form['field_uwwpremoval_value'] = array(
				'#type' => 'select',
				'#options' => $options
			);
		}

		if(
			$form['#id'] == "views-exposed-form-waste-water-network-page" ||
			$form['#id'] == 'views-exposed-form-uwwtp-map-page' ||
			$form['#id'] == 'views-exposed-form-waste-water-network-openlayers-1' ||
			$form['#id'] == 'views-exposed-form-waste-water-network-openlayers-2' ||
			$form['#id'] == 'views-exposed-form-waste-water-network-openlayers-3' ||
			$form['#id'] == 'views-exposed-form-uwwtp-treatment-page' ||
			$form['#id'] == 'views-exposed-form-uwwtp-treatment-openlayers-2' ||
			$form['#id'] == 'views-exposed-form-uwwtp-treatment-attachment-1' ||
			$form['#id'] == 'views-exposed-form-agglomeration-page' ||
			$form['#id'] == 'views-exposed-form-agglomeration-openlayers-1' ||
			$form['#id'] == 'views-exposed-form-agglomeration-conformity-page' ||
			$form['#id'] == 'views-exposed-form-agglomeration-conformity-openlayers-1' ||
			$form['#id'] == 'views-exposed-form-data-deletion-page'
		){

			// Get all available years
			$query = db_select('field_data_field_anneedata', 'a');
			$query->fields('a', array('field_anneedata_value'));
			$query->orderBy('field_anneedata_value', 'DESC');
			$results = $query->execute();
			$years = array();
			while($record = $results->fetchAssoc()) {
				$years[$record['field_anneedata_value']] = $record['field_anneedata_value'];
			}
			//dsm($years);

			//$form_state['input']['field_anneedata_value'] = '2010';
			$form['field_anneedata_value'] = array(
				'#type' => 'select',
				'#options' => $years,
				//'#default_value' => array('2000' => '2000'),
			);
		}
    if(in_array($form['#id'], array("views-exposed-form-uwwtp-map-page"))){
		if(isset($form['field_physicalcapacityinput_value_op'])){
			$cap_op_options= $form['field_physicalcapacityinput_value_op']['#options'];
			unset($cap_op_options['between'], $cap_op_options['not between'], $cap_op_options['empty'], $cap_op_options['not empty']);
			$form['field_physicalcapacityinput_value_op']['#options'] = $cap_op_options;
		}
		if(isset($form['field_uwwnuts_value'])){
			$query = db_select('field_data_field_uwwnuts', 'nuts');
				$query->fields('nuts', array('field_uwwnuts_value'));
				$query->condition('deleted', 0,'=');
				$query->groupBy('nuts.field_uwwnuts_value');//GROUP BY user ID
			$result = $query->execute();
			$nuts_options=array();
			while($record = $result->fetchAssoc()) {
				//dsm($record);
				$nuts_options[$record['field_uwwnuts_value']]=$record['field_uwwnuts_value'];
			}

			$old = $form['field_uwwnuts_value'];
			//dsm($old);
			//dsm($form_state);
			$form['field_uwwnuts_value'] = array(
				'#type'=>'select',
				'#options'=>$nuts_options,
				'#default_value'=>$old['#default_value'],
				'#empty_value'=>'',
				'#empty_option'=>t('- All -')
			);
		}
	}
}

// function uwwtd_debug_submit_handler($form, &$form_state){
// 	//require_once ( dirname(__FILE__) . '/shpParser.php');
// 	require_once ( dirname(__FILE__) . '/ShapeFile.inc.php');
// 	$file = file_load($form_state['values']['uwwtd_file']);
// 	$uri = $file->uri;
//
// 	// On upload le file et la fonction renvoie le nouveau nom du fichier
// 	$ext = '.shp';
// 	$newFile = uwwtd_file_upload($file, $ext);
// 	$path = file_create_url($newFile->uri);
// 	$shp = new ShapeFile($path, array('noparts' => false));
// 	  $records = array();
// 		foreach($shp->records as $record){
// 		$dbf_data = $record->getDbfData();
// 		$shp_data = $record->getShpData();
//
// 		//Dump the information
// 		$obj = array(
// 		  'type' => $shp->getShpTypeName($record->getShpType())
// 		);
//
// 		$obj['shape'] = $shp_data;
// 		$obj['meta'] = $dbf_data;
//
// 		$records[] = $obj;
// 	}
// 	dsm($records);
// }




// permission to view data pages
function uwwtd_permission() {
  return array(
    'Data-management access' => array(
      'title' => t('Access to the data management pages'),
    )
  );
}

function uwwtd_cron(){
    $lastGen = variable_get('uwwtd_wfs_table', 0);
// 	if((time() - $lastGen) > (60*60*24)){
	// Requires postgres for DROP TABLE IF
	db_query('DROP TABLE IF EXISTS wfs."UWWTD_UrbanWasteWaterTreatmentPlant";
	CREATE TABLE wfs."UWWTD_UrbanWasteWaterTreatmentPlant"
        AS SELECT * from public."UWWTD_UrbanWasteWaterTreatmentPlant";
	ALTER TABLE wfs."UWWTD_UrbanWasteWaterTreatmentPlant"
	ADD PRIMARY KEY ("siteId");

	DROP TABLE IF EXISTS wfs."UWWTD_Agglomeration";
	CREATE TABLE wfs."UWWTD_Agglomeration"
        AS SELECT * from public."UWWTD_Agglomeration";
	ALTER TABLE wfs."UWWTD_Agglomeration"
	ADD PRIMARY KEY ("siteId");

	DROP TABLE IF EXISTS wfs."UWWTD_ReceivingArea";
	CREATE TABLE wfs."UWWTD_ReceivingArea"
        AS SELECT * from public."UWWTD_ReceivingArea";
	ALTER TABLE wfs."UWWTD_ReceivingArea"
	ADD PRIMARY KEY ("siteId");

	DROP TABLE IF EXISTS wfs."UWWTD_DischargePoint";
	CREATE TABLE wfs."UWWTD_DischargePoint"
        AS SELECT * from public."UWWTD_DischargePoint";
	ALTER TABLE wfs."UWWTD_DischargePoint"
	ADD PRIMARY KEY ("siteId");
    ');

    	variable_set('uwwtd_wfs_table', time());
// 	}
}



//=============================Fonction de gestion des erreurs de l'import======================
function uwwtd_errors_get_category($cat=null){
    $categories = array(
        0=>'Input',
        1=>'Linking',
        2=>'Geometry',
        3=>'Conformity',
        4=>'Format',
    );
    if($cat){
        if(isset($categories[$cat])) return $categories[$cat];
        else return false;
    }
    else return $categories;
}
function uwwtd_errors_get_types($type=null){
    $types = array(
        0=>'Notification',
        1=>'Warning',
        2=>'Error',
    );
    if($type){
        if(isset($types[$type])) return $types[$type];
        else return false;
    }
    else return $types;
}
//=========================TODO for gettings error with an entity_id & entity_type
function uwwtd_errors_get_errors($entity_id, $entity_type){
    $errors = array();

    //TODO db_select();

    return $errors;
}


function uwwtd_block_info() {

  $blocks['map_home'] = array(
                        'info' => t('Map home'),
                        'cache' => DRUPAL_NO_CACHE,
                        );
  return $blocks;
}

function uwwtd_get_cache_key_agglomeration($option)
{
    return 'data_agglomeration_' . $option['field_anneedata_value'];
}
function uwwtd_get_cache_key_sensitive_area($option)
{
    return 'data_sensitive_area_' . $option['field_anneedata_value'];
}

function uwwtd_get_cache_key_uwwtp($option)
{
    return 'data_uwwtp_' . $option['field_anneedata_value'];
}

function uwwtd_get_cache_key_dcp($option)
{
    return 'data_dcp_' . $option['field_anneedata_value'];
}

function uwwtd_get_cache_key_block_home()
{
    return 'data_block_map_home';
}

function uwwtd_is_user_anonymous()
{
    global $user;
    return ($user->uid == 0);
}

function uwwtd_get_cache_key_page_agglo_compliance($option)
{
    return 'page_agglomeration_compliance_' . $option['field_anneedata_value'];
}
function uwwtd_get_cache_key_page_sensitive_area($option)
{
    return 'page_sensitive_area_' . $option['field_anneedata_value'];
}
function uwwtd_get_cache_key_page_dcp($option)
{
    return 'page_dcp_' . $option['field_anneedata_value'];
}

function uwwtd_get_cache_key_page_agglo_treatment($option)
{
    return 'page_agglomeration_treatment_' . $option['field_anneedata_value'];
}

function uwwtd_get_cache_key_page_uwwtp_treatment($option)
{
    return 'page_uwwtp_treatment_' . $option['field_anneedata_value'];
}

function uwwtd_get_cache_key_page_uwwtp_compliance($option)
{
    return 'page_uwwtp_compliance_' . $option['field_anneedata_value'];
}

function uwwtd_get_cache_key_page_uwwtp_pressure($option)
{
    return 'page_uwwtp_pressure_' . $option['field_anneedata_value'];
}

function uwwtd_block_view($delta = ''){
    switch ($delta) {
        case 'map_home':
            module_load_include('inc','uwwtd','inc/pages');
            $cache = '';
            $cache_name = uwwtd_get_cache_key_block_home();
            //we always need to build the map because openlayer set some css and js
            $preset_name = 'waste_water_treatment_network_map';   //layer agglomeration_treatment 'Agglomeration connection map and list'
            $preset = openlayers_preset_load($preset_name);
            $map    = openlayers_build_map($preset->data);
            $put_in_cache = uwwtd_is_user_anonymous();
            if (UWWTD_CACHE_ACTIVE === true && true === $put_in_cache) {
                $cache = cache_get($cache_name, 'cache_block');
            }
            if (!empty($cache) && isset($cache->data) && !empty($cache->data)) {
                $block['content'] = $cache->data;
            } else {
                $option['field_anneedata_value'] = uwwtd_get_max_annee();

                $data = uwwtd_get_data_agglomeration($option);
                //     dsm($data);
                //e.vincent / bruno want to show only agglo > 2000
                $filter = array();
                $filter['filter'] = array();
                $filter_force = array();
                $filter_force['filter']['field_agggenerated_value_op'] = '>';
                $filter_force['filter']['field_agggenerated_value']['value'] = variable_get('min_aggenerated_display', '2000');
                if (variable_get('display_only_active', '1') == 1) {
                    $filter_force['filter']['field_status_value'] = '1';
                }
                uwwtd_filter_data($filter, $data, $filter_force);
                //     uwwtd_filter_data($filter, $data);
                //     dsm($data);
                $optionstyle = array();
                $optionstyle['weight']['list'] = uwwtd_get_point_size_from_preset($preset, 'openlayers_plus_behavior_scalepoints');
                $optionstyle['weight']['field'] = 'field_agggenerated_value';
                $optionstyle['popup_title_type'] = 'agglomeration';
                $optionstyle['popup'] = array(
                    'field_agggenerated_value_format' => array('label' => 'Generated load (p.e.)'),
                    'field_aggcompliance_value_format' => array('label' => 'Compliance'),
                    'field_aggart3compliance_value_format' => array('label' => 'Connection compliance'),
                    'field_aggart4compliance_value_format' => array('label' => '2nd treatment compliance'),
                    'field_aggart5compliance_value_format' => array('label' => '3rd treatment compliance'),
                );			
				
                $features['agglomerations'] = uwwtd_build_feature($data, $optionstyle, $returnvalue);
                unset($data);
                $data = uwwtd_get_data_uwwtp($option);
                $filter = array();
                $filter['filter'] = array();                
                $filter_force = array();
                if (variable_get('display_only_active', '1') == 1) {
                    $filter_force['filter']['field_status_value'] = '1';
                }
                uwwtd_filter_data($filter, $data, $filter_force);                
                $optionstyle = array();
                $optionstyle['popup_title_type'] = 'treatment-plant';
                $optionstyle['popup'] = array(
                    'field_uwwcompliance_value_format' => array('label' => 'Compliance'),
                    'field_uwwprimarytreatment_value_format' => array('label' => 'Primary treatment'),
                    'field_uwwsecondarytreatment_value_format' => array('label' => 'Secondary treatment'),
                    'field_uwwnremoval_value_format' => array('label' => 'N-removal'),
                    'field_uwwpremoval_value_format' => array('label' => 'P-removal'),
                );
                $features['uwwtp'] = uwwtd_build_feature($data, $optionstyle, $returnvalue);
                unset($data);
                $data = uwwtd_get_data_dcp($option);
                $optionstyle = array();
                $optionstyle['popup_title_type'] = 'discharge-point';
                $features['dcp'] = uwwtd_build_feature($data, $optionstyle, $returnvalue);
                unset($data);

                $block['content'] =  uwwtd_build_map($map, $features);
                if (true === $put_in_cache) {
                    cache_set($cache_name, $block['content'], 'cache_block', CACHE_PERMANENT);
                }
            }
            return $block;
            break;
        default:
            break;
    }
}


function uwwtd_get_url_path($type, $param = array())
{
    $path = '';
    switch($type) {
        case 'agglomeration':
        case 'treatment-plant':
        case 'discharge-point':
        case 'receiving-area':
            $path .= $type;
            foreach ($param as $value) {
                $path.= '/' . $value;
            }
            break;
    }
    return $path;
}

function uwwtd_update_cache_data($list_year = array())
{
//     dsm(__FUNCTION__);
    module_load_include('inc','uwwtd','inc/pages');
    if (empty($list_year)) {
        $list_year = uwwtd_get_all_year();
    }
    foreach($list_year as $year) {
        $option['field_anneedata_value'] = $year;
        //clear last cache with empty string
        cache_set(uwwtd_get_cache_key_agglomeration($option), '', 'cache', 10);
        cache_set(uwwtd_get_cache_key_uwwtp($option), '', 'cache', 10);
        cache_set(uwwtd_get_cache_key_dcp($option), '', 'cache', 10);

        //calculate new cache
        uwwtd_get_data_agglomeration($option['field_anneedata_value']);
        uwwtd_get_data_uwwtp($option['field_anneedata_value']);
        uwwtd_get_data_dcp($option['field_anneedata_value']);

        //clear cachhe block and page
        cache_set(uwwtd_get_cache_key_block_home($option), '', 'cache_block', 10);

        cache_set(uwwtd_get_cache_key_page_agglo_compliance($option), '', 'cache_page', 10);
        cache_set(uwwtd_get_cache_key_page_agglo_treatment($option), '', 'cache_page', 10);
        cache_set(uwwtd_get_cache_key_page_uwwtp_treatment($option), '', 'cache_page', 10);
        cache_set(uwwtd_get_cache_key_page_uwwtp_compliance($option), '', 'cache_page', 10);
    }
}

function uwwtd_format_number($number, $precision = 0)
{
  if ($number === '-') {
    return $number;
  }
    return number_format($number, $precision, '.', ' ');
}
function uwwtd_format_decimal($number, $precision = 1)
{
    return number_format($number, $precision, '.', ' ');
}

function uwwtd_get_point_size_from_preset($preset, $behaviour)
{
// dsm($behaviour);
// dsm($preset);   

    $weightClass = $preset->data['behaviors'][$behaviour]['arbitrary_classes'];
    $configuredWeight = explode("\n", $weightClass);
// dsm($configuredWeight);
    $list = array();
    $numWeight = 1;
    foreach($configuredWeight as $oneweight) {
        $tmp = explode('|', $oneweight);
        $list[ $numWeight ] = isset($tmp[1]) ? (int)$tmp[1] : 0;
        $numWeight++;
    }
// dsm($list);
    return $list;
}

// $GLOBALS['uwwtd']['ui']['compliance_color']  = array(
//     'C' => "#4f91e1",
//     'NR' => "#a2a2a2",
//     'NC' => "#d93c3c",
//     'NI' => "#6b6b6b",
// );
function uwwtd_get_point_color_from_preset($preset)
{
    $configuredColor = $preset->data['behaviors']['openlayers_plus_behavior_scalepoints']['fields_colors_values'];
    $configuredColor = explode("\n", $configuredColor);
    $list = array();
    foreach($configuredColor as $onecolor) {
        $tmp = explode('|', $onecolor);
        $list[ $tmp[1] ] = $tmp[2];
    }
    return $list;
}

//     $optionstyle['piechart'] = array(
//         'field_aggc1_value' => array(
//             'label' => 'Collective system',
//             'color' => '#74FFE0',
//         ),
//         'field_aggc2_value' => array(
//             'label' => 'Individual and Appropriate Systems (IAS)',
//             'color' => '#BD8842',
//         ),
//         'field_aggpercwithouttreatment_value' => array(
//             'label' => 'Discharge without treatment',
//             'color' => '#C00000',
//         ),
//     );
function uwwtd_get_piechart_from_preset($preset, $behaviour)
{
// dsm($preset);
    $configuredPiechart = $preset->data['behaviors'][$behaviour]['fields_series'];
    $configuredPiechart = explode("\n", $configuredPiechart);
// dsm($configuredPiechart);
    $list = array();
    foreach($configuredPiechart as $onefield) {
        $tmp = explode('|', $onefield);
        $list[ $tmp[0] . '_value' ] = array(
            'label' => $tmp[1],
            'color' => $tmp[2],
        );
    }
// dsm($list);
    return $list;
}

function uwwtd_get_svg_piechart($i, $values, $optionstyle, $weightstyle)
{
	$chartelem = "";

    $radius = $weightstyle['pointRadius'];
    $cx = $cy = $radius;
    $opacity = $weightstyle['fillOpacity'];
    $strokeWidth = $weightstyle['strokeWidth'];

	$sum = 0;
	foreach ($optionstyle['piechart'] as $field=>$detail) {
        if ($values[$field] == 0) {
            $values[$field] = 1;
        }
		$sum += $values[$field];
	}
	$deg = $sum/360; // one degree
	$jung = $sum/2; // necessary to test for arc type

	/* Data for grid, circle, and slices */

	$dx = $radius; // Starting point:
	$dy = 0; // first slice starts in the East
	$oldangle = 0;

	/* Loop through the slices */
    foreach ($optionstyle['piechart'] as $field=>$detail) {
		$angle = $oldangle + $values[$field]/$deg; // cumulative angle
		$x = cos(deg2rad($angle)) * $radius; // x of arc's end point
		$y = sin(deg2rad($angle)) * $radius; // y of arc's end point

		$colour = $optionstyle['piechart'][$field]['color'];

		if ($values[$field] > $jung) {
			// arc spans more than 180 degrees
			$laf = 1;
		}
		else {
			$laf = 0;
		}

		$ax = $cx + $x; // absolute $x
		$ay = $cy + $y; // absolute $y
		$adx = $cx + $dx; // absolute $dx
		$ady = $cy + $dy; // absolute $dy
		$chartelem .= "\n";
        $chartelem .= "\n";
        $chartelem .= "<g class=\"arc\" >\n";
		$chartelem .= "<path d=\"M$cx,$cy "; // move cursor to center
		$chartelem .= " L$adx,$ady "; // draw line away away from cursor
		$chartelem .= " A$radius,$radius 0 $laf,1 $ax,$ay "; // draw arc
		$chartelem .= " z\" "; // z = close path
        $chartelem .= ' style="fill: '.$colour.'; stroke: rgb(34, 34, 34); opacity: '.$opacity.'; stroke-width: '.$strokeWidth.';" stroke-linejoin="round"/>';
        $chartelem .= "</g>\n";
		$dx = $x; // old end points become new starting point
		$dy = $y; // id.
		$oldangle = $angle;
	}

	return  '<svg style="display:none;" id="pie_'.$i.'">
                '
             . $chartelem
             . '
             </svg>';
}

function uwwtd_export_data($type_export, $title, $header, $rows){
    $filename = tempnam('public://tmp/', 'export');
    $r = fopen($filename, 'wb');
    switch($type_export) {
        case 'csv':
            fputcsv($r, $header, ';');
            foreach($rows as $row) {
                fputcsv($r, $row['data'], ';');
            }
            break;
        case 'xls':
            fputs($r, '<html>
                        <head>
                        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
                        </head>
                        <body>
                        <table>
                        <thead>
                        ');
            fputs($r, '<tr><th>' . implode('</th><th>', $header) . '</th></tr>');
            fputs($r, '</thead><tbody>');
            foreach($rows as $row) {
                fputs($r, '<tr><td>' . implode('</td><td>', $row['data']) . '</td></tr>');
            }
            fputs($r, '</tbody></table></body></html>');
            break;
        default:
            $type_export = '';
            break;
    }
    fclose($r);
//     dsm(file_get_contents($filename));
//     return;
    ini_set("auto_detect_line_endings", false); //for Mac user
    $aHeaders = array(
          'Content-Type'        => 'application/octet-stream',
          'Content-Disposition' => 'attachment; filename="'.$title.'.'.$type_export.'"',
          'Expires'             => '0',
          'Cache-Control'       => 'must-revalidate',
          'Pragma'              =>'public',
          'Content-Length'      => filesize($filename),
      );
    foreach ($aHeaders as $sName => $sValue) {
        drupal_add_http_header($sName, $sValue);
    }

    readfile($filename);
    unlink($filename);
    exit();
}
/*
function uwwtd_form($form, &$form_state) {
	if($form['element']['#action'] == '/ap_uwwtd_si/stats/graphs'){



		// Get available years for data
		$query = db_select('field_data_field_anneedata', 'a');
		$query->fields('a', array('field_anneedata_value'));
		$query->orderBy('field_anneedata_value', 'DESC');
		$results = $query->execute();
		$years = array('all' => 'Show all');
		while($record = $results->fetchAssoc()) {
			$years[$record['field_anneedata_value']] = $record['field_anneedata_value'];
		}
		$form['year'] = array(
				'#title' => t('Year'),
				'#type' => 'select',
				'#options' => $years,
				'#default_value' => isset($form_state['values']['year']) ? $form_state['values']['year'] : 'all',
		);







		dpm($form);
	}

	return $form;
}
*/

/**
 *
 */ 
function uwwtd_page_download()
{
    $title = 'Download';
    drupal_set_title($title);
    
    $page = ''
            . '<h1>'.$title.'</h1>'
    ;
    return $page;
}
 
/**
 * hook_node_delete
 * delete all error whose reference this node 
 */ 
function uwwtd_node_delete($node) {
//     dsm($node);
	if (true === in_array($node->type, array(
       'agglomeration',
       'agglo_uww',
       'big_city',
       'discharge_point',
       'ms_level',
       'receiving_area',
       'uwwtp',        
        ))) {
//         dsm('entity_id ' . $node->nid);
		db_delete('uwwtd_import_errors')
        ->condition('entity_id', $node->nid, '=')
        ->execute();
	}
}

function uwwtd_get_national_stat_str($year){
	module_load_include('inc','uwwtd','inc/pages');
    $option['field_anneedata_value'] = $year;
	$dataUwwtp = uwwtd_get_data_uwwtp($option);
	$dataAggl = uwwtd_get_data_agglomeration($option);

	$nbGeneratedLoad = 0;
	$nbCollectingSystem = 0;
	$nbPrimaryTreatement = 0;
	$nbSecondaryTreatement = 0;
	$nbOtherTreatement = 0;
	$nbPhysicalCapacity = 0;
	$nbIAS = 0;
	foreach($dataAggl as $agglo){
		$nbGeneratedLoad = $agglo['field_agggenerated_value']+ $nbGeneratedLoad;
		$aggloCollectingSystem = ($agglo['field_aggc1_value'] /100) * $agglo['field_agggenerated_value'];
		$nbCollectingSystem = $aggloCollectingSystem + $nbCollectingSystem;
		
		$aggloIAS = ($agglo['field_aggc2_value'] /100) * $agglo['field_agggenerated_value'];
		$nbIAS = $aggloIAS + $nbIAS;
	}
	
	foreach($dataUwwtp as $uwwtp){
		// dsm($uwwtp);
		if($uwwtp['field_uwwtreatmenttype_value'] == "P"){
			$nbPrimaryTreatement = $nbPrimaryTreatement+1;
		}elseif($uwwtp['field_uwwtreatmenttype_value'] == "S"){
			$nbSecondaryTreatement = $nbSecondaryTreatement +1;
		}elseif($uwwtp['field_uwwtreatmenttype_value'] == "MS"){
			$nbOtherTreatement = $nbOtherTreatement+1;
		}
		$nbPhysicalCapacity = $uwwtp['field_physicalcapacityactivity_value']+ $nbPhysicalCapacity;
	}
	$nbCollectingSystem = $nbCollectingSystem *100 / $nbGeneratedLoad;
	$totalCollectingSystem= number_format($nbCollectingSystem, 0, ".", " ");
	$nbIAS =$nbIAS *100 / $nbGeneratedLoad;
	$totalIAS = number_format($nbIAS, 0, ".", " ");
	
	$annee = $option['field_anneedata_value'];
	$nbUrban = count($dataAggl);
	$nbGeneratedLoad = number_format($nbGeneratedLoad, 0, ".", " ");
	$nbPhysicalCapacity = number_format($nbPhysicalCapacity, 0, ".", " ");
	
	return  "In ".$annee.", ".variable_get('siif_eru_country_name')." had ".$nbUrban." urban waste water agglomerations of more then 2 000 population equivalent (p.e).
			These agglomerations generated a total load of ".$nbGeneratedLoad." p.e. ".$totalCollectingSystem." % of this load is connected to collecting systems and ".$totalIAS." % 
			addressed through Individual and Appropriate Systems (storage or septic tanks, micro-stations,...). These agglomerations are
			connected to ".$nbPrimaryTreatement." primary treatment plant, ".$nbSecondaryTreatement." secondary treatment plants and ".$nbOtherTreatement." more stringent treatment plants.
			All these treatment plants have a total design capacity of ".$nbPhysicalCapacity. " p.e. ";
}
//hook_wms_getlegend_alter
function uwwtd_wms_getlegend_alter(&$result, &$url){
    parse_str($url['query'], $params);
    if($result!='' && !$url["processed"]){
        if($url['host']=='maps.oieau.fr'){
            $result = '<div class="legend-label">'.t($params['LAYER']).'</div><div  class="legend-img">'.$result.'</div>';
            
        }
        elseif($url['host']=='bio.discomap.eea.europa.eu'){
            if($params['LAYER']=='8'){
                $result = '<div class="legend-label">'.t('Natura 2000').'</div><div  class="legend-img">'.$result.'</div>';
            }else{
                $result ='';
            }
           //krumo($result); 
        }
        elseif($url['host']=='water.discomap.eea.europa.eu'){
            if($params['LAYER']=='4' && strpos($url['path'], 'BathingWater')>0){
                $result = '<div class="legend-label">'.t('Bathing water').'</div><div  class="legend-img">'.$result.'</div>';
            }
            elseif($params['LAYER']=='1' && strpos($url['path'], 'NitrateRivers') > 0){
                $result = '<div class="legend-label">'.t('Mean annual nitrates in rivers by station').'</div><div  class="legend-img">'.$result.'</div>';
            }
            elseif($params['LAYER']=='3' && strpos($url['path'], 'OrthophosphateRivers') > 0){
                $result = '<div class="legend-label">'.t('Mean annual orthophosphate in rivers by station').'</div><div  class="legend-img">'.$result.'</div>';
            }
            elseif($params['LAYER']=='1' && strpos($url['path'], 'BODRivers') > 0){
                $result = '<div class="legend-label">'.t('Mean annual BOD in rivers by station').'</div><div  class="legend-img">'.$result.'</div>'; 
            }
            elseif($params['LAYER']=='1' && strpos($url['path'], 'AmmoniumRivers') > 0){
                $result = '<div class="legend-label">'.t('Mean annual Ammonium in rivers by station').'</div><div  class="legend-img">'.$result.'</div>'; 
            }
            
            elseif($params['LAYER']=='3' && strpos($url['path'], 'MonitoringStations') > 0){
                $result = '<div class="legend-label">'.t('SoE Monitoring Station').'</div><div  class="legend-img">'.$result.'</div>';
            }
            else{
                //krumo($url);
                $result ='';
            }
        }
    }
    $url["processed"] = true;
}
//hook_wms_getfeatureinfo_alter
function uwwtd_wms_getfeatureinfo_alter(&$result, &$url){
    //Uncomment for debug
    //krumo($url);
    //krumo($result);
    foreach($result as $layer=>$features){
        //Natura 2000
        if($url['host']=='bio.discomap.eea.europa.eu'){
            if($layer=='8'){
                $new_layer = t('Natura 2000');
                
                $data =array();
                $keys = array('SITECODE','SITENAME','MS','SITETYPE', 'RELEASE_DATE');
                foreach($features as $feature){
                    $data[] = array_intersect_key($feature, array_flip($keys));
                }
                $result[$new_layer] = $data;
                unset($result[$layer]);
            }
            elseif(is_numeric($layer)){
                unset($result[$layer]);
            }
        }
        
        elseif($url['host']=='water.discomap.eea.europa.eu'){
            //Bathing water : level 4
            if($layer=='4'  && strpos($url['path'], 'BathingWater')>0){
                $new_layer = t('Bathing water');
                $data =array();
                $keys = array('Bathingwatername','Country', 'Watertype', '2012', '2013', '2014', '2015', '2016', '2017', '2018','Linktobathingwaterprofile');
                foreach($features as $feature){
                    $item = array_intersect_key($feature, array_flip($keys));
                    if(isset($item['Linktobathingwaterprofile']) && $item['Linktobathingwaterprofile']!=''){
                        $item['Linktobathingwaterprofile'] = l("More information", $item['Linktobathingwaterprofile'], array('attributes'=>array('target'=>'_blank')));
                    }
                    $data[] = $item;
                }
                $result[$new_layer] = $data;
                unset($result[$layer]);
            }
            elseif($layer=='3' && strpos($url['path'], 'MonitoringStations')>0){
                $new_layer =t("SoE Monitoring Stations");
                $keys = array("WaterCategory","CountryCode","CountryName","Waterbase_StationID","NationalStationID","NationalStationName","WFD_EU_CD","River_Lake_SeaRegion_Name","Surface_Ground_WaterBodyID","Surface_Ground_WaterBodyName","RBDcode","RBDname","RecordReported","Remarks");
                foreach($features as $feature){
                    $data[] = array_intersect_key($feature, array_flip($keys));
                }
                $result[$new_layer] = $data;
                unset($result[$layer]);
            }
            elseif($layer=='1' && strpos($url['path'], 'NitrateRivers') > 0){
                $new_layer = t('Mean annual nitrates in rivers by station');
                $result[$new_layer] = uwwtd_wms_preprocess_soe_data($features);
                unset($result[$layer]);
            }
            elseif($layer=='1' && strpos($url['path'], 'OrthophosphateRivers') > 0){
                $new_layer = t('Mean annual orthophosphate in rivers by station');
                $result[$new_layer] = uwwtd_wms_preprocess_soe_data($features);
                unset($result[$layer]);
            }
            elseif($layer=='1' && strpos($url['path'], 'BODRivers') > 0){
                $new_layer = t('Mean annual BOD in rivers by station');
                $result[$new_layer] = uwwtd_wms_preprocess_soe_data($features);
                unset($result[$layer]);
            }
            elseif($layer=='1' && strpos($url['path'], 'AmmoniumRivers') > 0){
                $new_layer = t('Mean annual Ammonium in rivers by station');
                $result[$new_layer] = uwwtd_wms_preprocess_soe_data($features);
                unset($result[$layer]);
            }
            //Other layers/levels
            elseif(is_numeric($layer)){
                unset($result[$layer]);
            }
        }
        elseif($url['host']=='maps.oieau.fr'){
            //NUTS
            
            if(substr($layer, 0,4)=='NUTS'){
                $new_layer = t('Nomenclature des Unités Territoriales Statistiques (NUTS)').' '.t('level').' '.substr($layer, -1);
                foreach($features as $feature){
                    $item = array(
                        "NUTS ID"=>$feature['NUTS_ID'],
                        "Level"=>$feature['STAT_LEVL_']
                    );
                    $data[] = $item;
                }
                $result[$new_layer] = $data;
                unset($result[$layer]);
            }
            elseif($layer=='RBD'){
                $new_layer =t("River Basin Districts (RBD)");
                $keys = array("C_CD","EURBDCode","RBD_MS_CD","EUCD_RBD","RBDName","RBDNameNL","Internatio");
                foreach($features as $feature){
                    $data[] = array_intersect_key($feature, array_flip($keys));
                }
                $result[$new_layer] = $data;
                unset($result[$layer]);
            }
            elseif($layer=='RBDSU'){
                $new_layer =t("River Basin Districts Subunits (RBDSU)");
                $keys = array("C_CD","EURBDCode","RBD_MS_CD","EUCD_RBD","RBDName","RBDNameNL","EUSubUnitC","MS_SubUnit","SubUnitNam","SubUnitN_1","Internatio");
                foreach($features as $feature){
                    $data[] = array_intersect_key($feature, array_flip($keys));
                }
                $result[$new_layer] = $data;
                unset($result[$layer]);
            }
        }
    }
}


function uwwtd_wms_preprocess_soe_data($features){
    $data = array();
    if(!empty($features)){
        foreach($features as $feature){
            $WaterbasestationID = $feature['WaterbasestationID'];
            $Year = (string)$feature['Year'];
            $Meanannualconcentration = $feature['Meanannualconcentration'];
            if(!isset($data[$WaterbasestationID])){
                $keys = array('Country','Rivername','WaterbasestationID','Stationname', 'Longitude', 'Latitude', 'WaterBodyID','Waterbodyname','RBDcode','RBDname');
                $data[$WaterbasestationID] = array_intersect_key($feature, array_flip($keys));;
            }
            $data[$WaterbasestationID]['Meanannualconcentration'][$Year] = $Year.' : '.$Meanannualconcentration.' '.$feature['Unit'];
            /*
            $data[$WaterbasestationID]['#data'][(integer)$Year] = array(
                'value'=>(float)$Meanannualconcentration,
                'valueformat'=>$Meanannualconcentration.' '.$feature['Unit'],
                'label'=>(string)$Year
            );
            */
        }
        foreach($data as $k=>$v){
            ksort($v['Meanannualconcentration'], SORT_NUMERIC);
            $data[$k]['Meanannualconcentration'] = theme('item_list', array('items'=>$v['Meanannualconcentration']));
            //ksort($data[$k]['#data'], SORT_NUMERIC);
            
            //Bad ==> change wms module for have a jsonp calling
            /*
            $data[$k]['#chart'] = '<script> 
                var data = '.json_encode($data[$k]['#data']).';
                console.log(data);
            </script>';
            */
            
        }
    }
    return $data;
}
/**
 * Crée un fichier xls avec le tableau de valeurs donnés et l'ouvre.
 * Le tableau donné doit être un tableau à 2 dimensions, simple.
 */
function uwwtd_create_xls($filename, $rows) {
	require_once(drupal_get_path('module', 'uwwtd') . '/lib/PHPExcel-1.8.1/Classes/PHPExcel.php');
	
	// Création du excel :
	$objPHPExcel = new PHPExcel();
	$objPHPExcel->getProperties()->setCreator("Office International de l'Eau");
	$objPHPExcel->setActiveSheetIndex(0);
	
	// Création du contenu :
	$objPHPExcel->getActiveSheet()->fromArray($rows, "", 'A1');
	
	// Resize :
	foreach(range('A','Z') as $columnID) {
		$objPHPExcel->getActiveSheet()->getColumnDimension($columnID)
		->setAutoSize(true);
	}
	
	// Sauvegarde du fichier :
	$path = 'temporary://' . $filename;
	$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
	$objWriter->save(drupal_realpath($path));
	unset($objWriter);
	
	// Header du fichier :
	$headers = array(
		'Content-Type' => 'application/octet-stream',
		'Content-Transfer-Encoding' => 'binary',
		'Content-Disposition' => 'attachment; filename="' . basename($path) . '";',
		'Content-Length' => sprintf('%u', filesize($path)),
	);
		
	// Envoie en téléchargement :
	file_transfer($path, $headers);
}