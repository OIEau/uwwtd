<?php
//todo 
//erreur home http://webnuxdev.rnde.tm.fr/ev_uwwtd_si/content/defs/EPSG3857.js

//désactiver navigation clavier sur les cartes                      => ok tester avec nouvelle base
//faire script pour exporter n agglo du xml pour pouvoir les réimporter et les tester  => ok
//virer les menu des vue dans le main menu                      => ok


//refaire menu listerror 
//dans bulk datadeletion, supprimer error
//get all label from database ?   $field = field_info_field('field_uwwtd_err_category');
//get all color from database ?   $field = field_info_field('field_uwwtd_err_category'); 
//desactivate cron 
//build table for mapserver when ? 
//delete view postgres ?
//correct view request -> duplicate

//display title on 4 pages : ok
//format number  : ok
//ajouter les erreur :ok
//ajouter un titre au graphique : ok
//ajouter les bon libellé dans les popup (NR, 1, F...) : ok
//bien rpésenté les pages des vues : ok
//todo format data block ok
//check all warning in log : ok
//ajouter nouvelle fonction de cache dans function clear cache : ok
//mettre en cache json : ok     
//check log :ok

define('UWWTD_CACHE_ACTIVE', true);  

// $GLOBALS['uwwtd']['cache'] = array(
//     
// );

// $GLOBALS['uwwtd']['ui']['compliance'] = array(
//     'All' => '- Any -',
//     'NI' => 'No information',
//     'NR' => 'Not relevant',
//     'NC' => 'Not compliant',
//     'C' => 'Compliant',
//     '?' => '?',
// );

// $GLOBALS['uwwtd']['ui']['compliance_color']  = array(  
//     'C' => "#4f91e1",
//     'NR' => "#a2a2a2",
//     'NC' => "#d93c3c",
//     'NI' => "#6b6b6b",                          
// );
// $GLOBALS['uwwtd']['ui']['more_stringent_color']  = array(  
//     'MS' => "#5ddfff",   //Morestringenttreatment|More stringent|#5ddfff
//     'S' => "#3cc53c",  //Secondarytreatment|Secondary treatment|#3cc53c
//     'P' => "#ea8b2e",  //Primarytreatment|Primary treatment|#ea8b2e
//     'NI' => "#d92424",  //Noinformation|No treatment or no information|#d92424                        
// );


// $GLOBALS['uwwtd']['ui']['pe_weight'] = array(
//       1 =>  2000,
//       2 =>  10000,
//       3 =>  150000,
//       4 =>  0,    
//     );
    
$GLOBALS['uwwtd']['ui']['operator'] = array(
    '<' => 'Is less than',
    '<=' => 'Is less than or equal to',
    '=' => 'Is equal to',
    '!=' => 'Is not equal to',
    '>=' => 'Is greater than or equal to',
    '>' => 'Is greater than',
);

// $GLOBALS['uwwtd']['ui']['operatorfunction'] = array(
//     '<' => 'uwwtd_is_less_than',               
//     '<=' => 'uwwtd_is_less_than_or_equal_to',  
//     '=' => 'uwwtd_is_equal_to',                
//     '!=' => 'uwwtd_is_not_equal_to',           
//     '>=' => 'uwwtd_is greater_than_or_equal_to',
//     '>' => 'uwwtd_is_greater_than',            
// );

$GLOBALS['uwwtd']['ui']['operatorfunction'] = array(
    '<' => function ($a, $b) {return $a < $b;},      //'uwwtd_is_less_than',               
    '<=' => function ($a, $b) {return $a <= $b;},     //'uwwtd_is_less_than_or_equal_to',  
    '=' => function ($a, $b) {return $a == $b;},    // 'uwwtd_is_equal_to',                
    '!=' => function ($a, $b) {return $a != $b;},     //'uwwtd_is_not_equal_to',           
    '>=' => function ($a, $b) {return $a >= $b;},     //'uwwtd_is greater_than_or_equal_to',
    '>' => function ($a, $b) {return $a > $b;},     //'uwwtd_is_greater_than',            
);

$GLOBALS['uwwtd']['ui']['sort'] = array(
    'asc' => function ($a, $b) {if ($a[$GLOBALS['uwwtd']['ui']['sortfield']] == $b[$GLOBALS['uwwtd']['ui']['sortfield']]) { return 0; } return ($a[$GLOBALS['uwwtd']['ui']['sortfield']] < $b[$GLOBALS['uwwtd']['ui']['sortfield']]) ? -1 : 1;},                  
    'desc' => function ($a, $b) {if ($a[$GLOBALS['uwwtd']['ui']['sortfield']] == $b[$GLOBALS['uwwtd']['ui']['sortfield']]) { return 0; } return ($a[$GLOBALS['uwwtd']['ui']['sortfield']] < $b[$GLOBALS['uwwtd']['ui']['sortfield']]) ? 1 : -1;},              
);

$GLOBALS['uwwtd']['ui']['field']['agglomeration'] = array(
    'title'                           =>  t('Name'),
    'field_inspireidlocalid_value'    =>  t('Identifier Code'),
    'field_agggenerated_value'        =>  t('Generated Load (p.e.)'),
    'field_regionnuts_value'          =>  t('Region (NUTS)'),
    'field_aggcompliance_value'       =>  t('Compliance'),
    'field_aggart3compliance_value'   =>  t('Article 3 compliance'),
    'field_aggart4compliance_value'   =>  t('Article 4 compliance'),
    'field_aggart5compliance_value'    =>  t('Article 5 compliance'),
    'field_aggart6compliance_value'   =>  t('Article 6 compliance'),
);

$GLOBALS['uwwtd']['ui']['field']['agglomeration_treatment'] = array(
    'title'                           =>  t('Name'),
    'field_inspireidlocalid_value'    =>  t('Identifier Code'),
    'field_agggenerated_value'        =>  t('Generated Load (p.e.)'),
    'field_regionnuts_value'          =>  t('Region (NUTS)'),
    'field_aggc2_value'       =>  t('IAS (% of p.e.)'),
    'field_aggc1_value'   =>  t('Collective system (% of p.e.) '),
    'field_aggpercwithouttreatment_value'   =>  t('Not addressed through IAS (% of p.e.)'),
);

// field_aggc1|Collective system|#74FFE0
// field_aggc2|Individual and Appropriate Systems (IAS)|#BD8842
// field_aggpercwithouttreatment|Discharge without treatment|#C00000

$GLOBALS['uwwtd']['ui']['field']['uwwtp'] = array(
    'title'                           =>  t('Name'),
    'field_inspireidlocalid_value'    =>  t('Identifier Code'),
    'field_uwwloadenteringuwwtp_value'        =>  t('Load entering (p.e.)'),
    'field_regionnuts_value'          =>  t('Region (NUTS)'),
    'field_uwwcompliance_value'       =>  t('Compliance'),
    'field_uwwbod5perf_value'   =>  t('Performance: BOD5'),
    'field_uwwcodperf_value'   =>  t('Performance: COD '),
    'field_uwwntotperf_value'   =>  t('Performance: Total nitrogen'),
    'field_uwwptotperf_value'   =>  t('Performance: Total phosphorus'),
    'field_uwwtreatmenttype_value'   =>  t('Treatment type in place'),
);

$GLOBALS['uwwtd']['ui']['field']['uwwtp_treatment'] = array(
    'title'                             =>  t('Name'),
    'field_inspireidlocalid_value'      =>  t('Identifier Code'),
    'field_uwwloadenteringuwwtp_value'  =>  t('Load entering (p.e.)'),
    'field_regionnuts_value'            =>  t('Region (NUTS)'),
    'field_uwwprimarytreatment_value'   =>  t('Primary treatment'),
    'field_uwwsecondarytreatment_value' =>  t('Secondary treatment'),
    'field_uwwnremoval_value'           =>  t('N removal'),
    'field_uwwpremoval_value'           =>  t('P removal'),
    'field_uwwspecification_value'      =>  t('More stringent treatment'),
);

$GLOBALS['uwwtd']['ui']['compliance'] = array(
    'All' => '- Any -',
    'NI' => 'No information',
    'NR' => 'Not relevant',
    'NC' => 'Not Compliant',
    'C' => 'Compliant',
    '?' => '?',
);

//todo delete this one if all works
$GLOBALS['uwwtd']['ui']['field']['compliance_label'] = $GLOBALS['uwwtd']['ui']['compliance'];

// $GLOBALS['uwwtd']['ui']['field']['compliance_label'] = array(
//     'NR'   =>  'Not relevant',
//     'NI'   =>  'No information',
//     'C'    =>  'Compliant',
//     'NC'   =>  'Not Compliant',
//     '?'    =>  '?',
// );

$GLOBALS['uwwtd']['ui']['test_pass'] = array(
    'All' => '- Any -',
    'P' => 'Pass',
    'F' => 'Fail',
    'NR' => 'Not relevant',
);

$GLOBALS['uwwtd']['ui']['yes_no'] = array(
    'All' => '- Any -',
    '1' => 'Yes',
    '0' => 'No',
);


$GLOBALS['uwwtd']['ui']['treatment_type_in_place'] = array(
    'All' => '- Any -',
    'NI' => 'No information',
    'P' => 'Primary treatment',
    'S' => 'Secondary treatment',
    'MS' => 'More stringent treatment',
);




function uwwtd_menu(){
	$items = array();
	$items['data'] = array(
		'title' => t('Data management center'),
		'description' => t('A center to manage all the site data'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('uwwtd_data_form'),
		//'access callback' => TRUE,
		'access arguments' => array('Data-management access'),
		'file' => 'data_center.inc',
		'file path' => drupal_get_path('module', 'uwwtd')
		);
	$items['data/import'] = array(
		'title' => t('Data import'),
		'description' => t('Form to upload new data'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('uwwtd_import_form'),
		//'access callback' => TRUE,
		'access arguments' => array('Data-management access'),
		'file' => 'data_center.inc',
		'file path' => drupal_get_path('module', 'uwwtd')
		);
	$items['data/shapes'] = array(
		'title' => t('Receiving areas\' shapes upload'),
		'description' => t('Form to upload the receiving areas\' shapes'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('uwwtd_shapes_form'),
		//'access callback' => TRUE,
		'access arguments' => array('Data-management access'),
		'file' => 'data_center.inc',
		'file path' => drupal_get_path('module', 'uwwtd')
		);
	$items['data/check'] = array(
		'title' => t('Data checking process'),
		'description' => t('Process to check all the entered data for a given year'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('uwwtd_check_form'),
		//'access callback' => TRUE,
		'access arguments' => array('Data-management access'),
		'file' => 'data_center.inc',
		'file path' => drupal_get_path('module', 'uwwtd')
		);
	$items['data/conformity'] = array(
		'title' => t('Data conformity'),
		'description' => t('Data conformity page'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('uwwtd_conformity_form'),
		//'access callback' => TRUE,
		'access arguments' => array('Data-management access'),
		'file' => 'data_center.inc',
		'file path' => drupal_get_path('module', 'uwwtd')
		);
	$items['data/debug']=array(
		'title' => t('Data debug'),
		'page callback' => 'uwwtd_debug',
		//'page arguments' => array('uwwtd_debug_form'),
		//'access callback' => TRUE,
		'access arguments' => array('Data-management access'),
		'file' => 'data_center.inc',
		'file path' => drupal_get_path('module', 'uwwtd')
	);

	$items['id/%/%'] = array(
        'page callback' => 'uwwtd_node_redirect',
        'page arguments' => array(1,2),
        'access arguments' => true,
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
  $items['id/%/%/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['id/%/%/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'uwwtd_node_redirect',
    'page arguments' => array(1,2,3),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  
  //redirection treatment-plant
  $items['treatment-plant/%'] = array(
    'page callback' => 'uwwtd_node_redirection',
    'page arguments' => array(1),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );
  //redirection agglomeration
  $items['agglomeration/%'] = array(
    'page callback' => 'uwwtd_node_redirection',
    'page arguments' => array(1),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );
  //redirection receiving-area
  $items['receiving-area/%'] = array(
    'page callback' => 'uwwtd_node_redirection',
    'page arguments' => array(1),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );
  //redirection discharge-point
  $items['discharge-point/%'] = array(
    'page callback' => 'uwwtd_node_redirection',
    'page arguments' => array(1),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );
  ///////////////////////////////////////////////////////////////////
  $items['agglomerations/compliance'] = array(
    'page callback' => 'uwwtd_page_agglomeration_compliance',
    'page arguments' => array(),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );
  $items['agglomerations/connection'] = array(
    'page callback' => 'uwwtd_page_agglomeration_connection',
    'page arguments' => array(),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );
  $items['uwwtps/compliance'] = array(
    'page callback' => 'uwwtd_page_uwwtps_compliance',
    'page arguments' => array(),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );
  $items['uwwtps/treatment'] = array(
    'page callback' => 'uwwtd_page_uwwtps_treatment',
    'page arguments' => array(),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );        
  ///////////////////////////////////////////////////////////////////
    $items['report/pdf'] = array(
		'title' => t('PDF report'),
		'description' => t('Data conformity page'),
		'page callback' => 'uwwtd_make_pdf_report',
		//'page arguments' => array('uwwtd_conformity_form'),
		'access callback' => TRUE,
		//'access arguments' => array('Data-management access'),
		'file' => 'pdf.inc',
		'file path' => drupal_get_path('module', 'uwwtd')
	);
  $items['debug-create-xml/nid-agglo/%'] = array(
    'page callback' => 'debug_create_xml',
    'page arguments' => array(1,2),
//     'access callback' => true,
    'access arguments' => array('Data-management access'),
    'type' => MENU_CALLBACK,
	'file' => 'data_center.inc',
	'file path' => drupal_get_path('module', 'uwwtd')    
  );    
    
	return $items;
}

function uwwtd_node_redirect($annee, $id, $action = null){
	$query = db_select('field_data_field_siteid', 's');
	$query->fields('s', array('entity_id', 'field_siteid_value'));
	$query->condition('field_siteid_value', db_like($annee.'_'.$id), 'LIKE');

	$result = $query->execute();
	$node = false;
	while($record = $result->fetchAssoc()) {
		$node = node_load($record['entity_id']);
	}

	if($action == 'edit') {
		drupal_goto('node/' . $node->nid . '/edit');
	}

	if($node == false){
		drupal_set_message(t("The element you were searching for doesn't exist, sorry."), 'warning');
		drupal_goto('<front>');
	}
	else{
		drupal_set_title($node->title);
		return render(node_view($node, 'full'));
	}
}

function uwwtd_get_max_annee()
{
	$query = "SELECT MAX(field_anneedata_value) FROM {field_data_field_anneedata}";
	$result = db_query($query);
	$annee = $result->fetchField();
    return $annee;
}

//test
function uwwtd_node_redirection($id){
	$page_url = "http://".$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI']; 
	//echo "<pre>";print_r($_SERVER['REQUEST_URI']);echo "</pre>";
	$type= explode("/",$page_url);
	$type= $type[4];
	//echo "<pre>";print_r($type);echo "</pre>";
	
	if($type=='treatment-plant'){
		$typeR='uww';
		$id= strtolower($id);
	}
	if($type=='agglomeration'){
		$typeR='agg';
		$id= strtolower($id);
	}
	if($type=='receiving-area'){
		$typeR='rca';
		$id= strtolower($id);
	}
	if($type=='discharge-point'){
		$typeR='dcp';
		$id= strtolower($id);
	}
	//selectionne la dernière année
// 	$query = "SELECT MAX(field_anneedata_value) FROM {field_data_field_anneedata}";
// 	$result = db_query($query);
// 	$annee = $result->fetchField();
    $annee = uwwtd_get_max_annee();
	
	$query = db_select('field_data_field_siteid', 's');
	$query->fields('s', array('entity_id', 'field_siteid_value'));
	$query->condition('field_siteid_value', db_like($annee.'_'.$typeR.'_'.$id), 'LIKE');
	$result = $query->execute();
	$record = $result->fetchAssoc();
	$node = false;
	
	if($record ==''){
		$query = db_select('field_data_field_siteid', 's');
		$query->fields('s', array('entity_id', 'field_siteid_value'));
		$query->condition('field_siteid_value',  db_like($annee.'_'.$id), '=');
		$result = $query->execute();
		$record = $result->fetchAssoc();
		$node=$record['entity_id'];
	}else{
		$node=$record['entity_id'];
	}
	if($node == false){
		drupal_set_message(t("The element you were searching for doesn't exist, sorry."), 'warning');
		drupal_goto('<front>');
	}
	else{
        drupal_goto($GLOBALS['base_url'] . '/'.$type.'/'.$id.'/'.$annee);
		drupal_set_title($node->title);
		//return render(node_view($node, 'full'));
	}
}

// function uwwtd_debug_form($form, &$form_state){
// 	// definition du champ input de type file
// 	$form['uwwtd_file'] = array(
// 		'#type' => 'managed_file',
// 		'#title' => t('Data file'),
// 		'#upload_validators' => array('file_validate_extensions' => array('shp')),
// 		'#required' => TRUE,
// 	);
// 	
// 	// Bouton envoyer
// 	$form['submit_button'] = array(
// 		'#type' => 'submit',
// 		'#value' => t('Submit'),
// 	);
// 	
// 	// Fonction a appeller quand on clique sur envoyer
// 	$form['#submit'][] = 'uwwtd_debug_submit_handler';
//     return $form;
// }

function uwwtd_views_pre_build(&$view){
	//dsm($view);
	if(
		$view->name == 'waste_water_network' || 
		$view->name == 'uwwtp_map' ||
		$view->name == 'uwwtp_treatment' ||
		$view->name == 'agglomeration' ||
		$view->name == 'agglomeration_conformity' ||
		$view->name == 'data_deletion'
	){            
// 		$year = db_query(
// 			"SELECT MAX(field_anneedata_value) FROM {field_data_field_anneedata}"
// 		)->fetchField();
        $year = uwwtd_get_max_annee();
		if(!empty($year)) $view->filter['field_anneedata_value']->value = $year;
	}
}

function uwwtd_views_pre_render(&$view){
	//dsm($view);

	// if uwwtd treatment view
	if($view->name == 'uwwtp_treatment' && $view->result !== TRUE){
		foreach($view->result as $r => $result){
			//dsm($result);
		    //$view->result[$r]->field = 1;
		    if(isset($view->result[$r]->field_field_uwwprimarytreatment[0]['raw']['value'])){
		    	//dsm($view->result[$r]->field_field_uwwprimarytreatment[0]);
		    	if($view->result[$r]->field_field_uwwprimarytreatment[0]['raw']['value'] === '1') $view->result[$r]->field_field_uwwprimarytreatment[0]['rendered']['#markup'] = t('Yes');
		    	else $view->result[$r]->field_field_uwwprimarytreatment[0]['rendered']['#markup'] = t('No');
		    }
		    if(isset($view->result[$r]->field_field_uwwsecondarytreatment[0]['raw']['value'])){
		    	if($view->result[$r]->field_field_uwwsecondarytreatment[0]['raw']['value'] === '1') $view->result[$r]->field_field_uwwsecondarytreatment[0]['rendered']['#markup'] = t('Yes');
		    	else $view->result[$r]->field_field_uwwsecondarytreatment[0]['rendered']['#markup'] = t('No');
		    }
		    if(isset($view->result[$r]->field_field_uwwnremoval[0]['raw']['value'])){
		    	if($view->result[$r]->field_field_uwwnremoval[0]['raw']['value'] === '1') $view->result[$r]->field_field_uwwnremoval[0]['rendered']['#markup'] = t('Yes');
		    	else $view->result[$r]->field_field_uwwnremoval[0]['rendered']['#markup'] = t('No');
		    }
		    if(isset($view->result[$r]->field_field_uwwpremoval[0]['raw']['value'])){
		    	if($view->result[$r]->field_field_uwwpremoval[0]['raw']['value'] === '1') $view->result[$r]->field_field_uwwpremoval[0]['rendered']['#markup'] = t('Yes');
		    	else $view->result[$r]->field_field_uwwpremoval[0]['rendered']['#markup'] = t('No');
		    }
		} 
	}
}

function uwwtd_form_views_exposed_form_alter(&$form, &$form_state){
	//dsm($form);
		// for treatment plant booleans
		if($form['#id'] == "views-exposed-form-uwwtp-treatment-page"){
			$options = array(
				'All' => t('- All -'),
				'1' => t('Yes'),
				'0' => t('No')
			);

			$form['field_uwwprimarytreatment_value'] = array(
				'#type' => 'select',
				'#options' => $options
			);
			$form['field_uwwsecondarytreatment_value'] = array(
				'#type' => 'select',
				'#options' => $options
			);
			$form['field_uwwnremoval_value'] = array(
				'#type' => 'select',
				'#options' => $options
			);
			$form['field_uwwpremoval_value'] = array(
				'#type' => 'select',
				'#options' => $options
			);
		}

		if(
			$form['#id'] == "views-exposed-form-waste-water-network-page" || 
			$form['#id'] == 'views-exposed-form-uwwtp-map-page' ||
			$form['#id'] == 'views-exposed-form-waste-water-network-openlayers-1' ||
			$form['#id'] == 'views-exposed-form-waste-water-network-openlayers-2' ||
			$form['#id'] == 'views-exposed-form-waste-water-network-openlayers-3' ||
			$form['#id'] == 'views-exposed-form-uwwtp-treatment-page' ||
			$form['#id'] == 'views-exposed-form-uwwtp-treatment-openlayers-2' ||
			$form['#id'] == 'views-exposed-form-uwwtp-treatment-attachment-1' ||
			$form['#id'] == 'views-exposed-form-agglomeration-page' ||
			$form['#id'] == 'views-exposed-form-agglomeration-openlayers-1' ||
			$form['#id'] == 'views-exposed-form-agglomeration-conformity-page' ||
			$form['#id'] == 'views-exposed-form-agglomeration-conformity-openlayers-1' ||
			$form['#id'] == 'views-exposed-form-data-deletion-page'
		){

			// Get all available years
			$query = db_select('field_data_field_anneedata', 'a');
			$query->fields('a', array('field_anneedata_value'));
			$query->orderBy('field_anneedata_value', 'DESC');
			$results = $query->execute();
			$years = array();
			while($record = $results->fetchAssoc()) {
				$years[$record['field_anneedata_value']] = $record['field_anneedata_value'];
			}
			//dsm($years);

			//$form_state['input']['field_anneedata_value'] = '2010';
			$form['field_anneedata_value'] = array(
				'#type' => 'select',
				'#options' => $years,
				//'#default_value' => array('2000' => '2000'),
			);
		} 
    if(in_array($form['#id'], array("views-exposed-form-uwwtp-map-page"))){
		if(isset($form['field_physicalcapacityinput_value_op'])){
			$cap_op_options= $form['field_physicalcapacityinput_value_op']['#options'];
			unset($cap_op_options['between'], $cap_op_options['not between'], $cap_op_options['empty'], $cap_op_options['not empty']);
			$form['field_physicalcapacityinput_value_op']['#options'] = $cap_op_options;
		}
		if(isset($form['field_uwwnuts_value'])){
			$query = db_select('field_data_field_uwwnuts', 'nuts');
				$query->fields('nuts', array('field_uwwnuts_value'));
				$query->condition('deleted', 0,'=');
				$query->groupBy('nuts.field_uwwnuts_value');//GROUP BY user ID
			$result = $query->execute();
			$nuts_options=array();
			while($record = $result->fetchAssoc()) {
				//dsm($record);
				$nuts_options[$record['field_uwwnuts_value']]=$record['field_uwwnuts_value'];
			}
			
			$old = $form['field_uwwnuts_value'];
			//dsm($old);
			//dsm($form_state);
			$form['field_uwwnuts_value'] = array(
				'#type'=>'select',
				'#options'=>$nuts_options,
				'#default_value'=>$old['#default_value'],
				'#empty_value'=>'',
				'#empty_option'=>t('- All -')
			);
		}
	}
}

// function uwwtd_debug_submit_handler($form, &$form_state){
// 	//require_once ( dirname(__FILE__) . '/shpParser.php');
// 	require_once ( dirname(__FILE__) . '/ShapeFile.inc.php');
// 	$file = file_load($form_state['values']['uwwtd_file']);
// 	$uri = $file->uri;
// 	
// 	// On upload le file et la fonction renvoie le nouveau nom du fichier
// 	$ext = '.shp';
// 	$newFile = uwwtd_file_upload($file, $ext);
// 	$path = file_create_url($newFile->uri);
// 	$shp = new ShapeFile($path, array('noparts' => false));
// 	  $records = array();
// 		foreach($shp->records as $record){
// 		$dbf_data = $record->getDbfData();
// 		$shp_data = $record->getShpData();
// 
// 		//Dump the information
// 		$obj = array(
// 		  'type' => $shp->getShpTypeName($record->getShpType())
// 		);
// 
// 		$obj['shape'] = $shp_data;
// 		$obj['meta'] = $dbf_data;
// 
// 		$records[] = $obj;
// 	}
// 	dsm($records);
// }


/**
 * Extract an xml for only one agglo from a xml source
 */ 
function debug_create_xml($type, $value)
{
    //todo, get a list of agglo nid (to test mutliple agglo)
    if ($type != 'nid-agglo') {
        return '';
    }
    $s = '';
    $listNid = explode('-', $value);
    $currentCodeAgglo = array();
    foreach($listNid as $nid) {
        $agg = node_load($nid);        
        $currentCodeAgglo[] = $agg->field_inspireidlocalid['und'][0]['value'];
    }
//     dsm($agg->field_sourcefile['und'][0]['uri']);
//     echo '<pre>';var_export($agg->field_sourcefile['und'][0]['uri']);echo '</pre>';
    $xml = uwwtd_xml_to_array($agg->field_sourcefile['und'][0]['uri']);
    unset($agg);
//     codeagglo in $agg->field_inspireidlocalid['und'][0]['value']
//     copier xml node /Reporter
//                     /ReportPeriod
//                     /Contacts
//                     /BigCityDischargers     
//     Agglomerations/Agglomeration/aggCode = codeagglo
//         copier l'agglo
//     UwwtpAgglos/UwwtpAgglo/aucAggCode =  codeagglo
//         copier UwwtpAgglo de l'agglo
//     UwwtpAgglos/UwwtpAgglo/aucUwwCode =  codeuwwtp
//         copier les uwwtp de l'agglo avec contenu de UwwtpAgglos
//     UWWTPs/UWWTP/uwwCode = codeuwwtp
//         !! copier toutes les agglo de ce uwwtp (et agglo et agglo_uwwtp) 
//     DischargePoints/DischargePoint/uwwID = codeuwwtp
//         copier les dcp de chaque uwwtp
//     DischargePoints/DischargePoint/rcaID = rcacode
//         copier les rca de chaque dcp
//     ReceivingAreas/ReceivingArea/rcaCode = rcacode
    $xmlTest = array();
    $xmlTest['UWWTD_Report']['Reporter'] = $xml['UWWTD_Report']['Reporter'];
    $xmlTest['UWWTD_Report']['ReportPeriod'] = $xml['UWWTD_Report']['ReportPeriod'];
    $xmlTest['UWWTD_Report']['Contacts'] = $xml['UWWTD_Report']['Contacts'];
    $xmlTest['UWWTD_Report']['BigCityDischargers'] = $xml['UWWTD_Report']['BigCityDischargers'];
    
    //AGGLO ======================================================
    if(isset($xml['UWWTD_Report']['Agglomerations']['Agglomeration']['aggCode'])){
        $imports[0] = $xml['UWWTD_Report']['Agglomerations']['Agglomeration'];
    }
    else{
        $imports = $xml['UWWTD_Report']['Agglomerations']['Agglomeration'];
    }
    $aggloFound = 0;
    foreach($imports as $agglo) {
        if (in_array($agglo['aggCode'],$currentCodeAgglo)) {
            $xmlTest['UWWTD_Report']['Agglomerations']['Agglomeration'][] = $agglo;
            $aggloFound++;
//             break; //only one agglo
        }
    }
    if ($aggloFound != count($currentCodeAgglo)) {
        return "error, can't find agglo in xml " . implode(',', $currentCodeAgglo) . "</br>";
    }
    //UwwtpAgglos for agglo ======================================================
    if(isset($xml['UWWTD_Report']['UwwtpAgglos']['UwwtpAgglo']['aucUwwCode'])){
        $imports[0] = $xml['UWWTD_Report']['UwwtpAgglos']['UwwtpAgglo'];
    }
    else{
        $imports = $xml['UWWTD_Report']['UwwtpAgglos']['UwwtpAgglo'];
    } 
    $uwwtd_aggloFound = array();
    foreach($imports as $uwwtp_agglo) {
        if (in_array($uwwtp_agglo['aucAggCode'],$currentCodeAgglo)) {
            $xmlTest['UWWTD_Report']['UwwtpAgglos']['UwwtpAgglo'][] = $uwwtp_agglo;
            $uwwCode[] = $uwwtp_agglo['aucUwwCode'];  //list of uwwtp attach to the agglo
            $uwwtd_aggloFound[$uwwtp_agglo['aucAggCode']]++;;
        }
    }
    if (count($uwwtd_aggloFound) != count($currentCodeAgglo)) {
//         return "error, can't find buwwtd_agglo in xml for agglo " . $currentCodeAgglo . "</br>";
        drupal_set_message("error, can't find buwwtd_agglo in xml for agglo " . implode(',', $currentCodeAgglo));
                $s .= "<!-- error, can't find buwwtd_agglo in xml for agglo " . implode(',', $currentCodeAgglo) . "-->
        ";
    }
    //UwwtpAgglos for uwwtp======================================================
    foreach($imports as $uwwtp_agglo) {
        if (true === in_array($uwwtp_agglo['aucUwwCode'],$uwwCode) && ! in_array($uwwtp_agglo['aucAggCode'], $currentCodeAgglo)) {
            $listeAgglo[] = $uwwtp_agglo['aucAggCode']; //all other agglo attach to the uwwtp (need for calculation)
            $xmlTest['UWWTD_Report']['UwwtpAgglos']['UwwtpAgglo'][] = $uwwtp_agglo;
        }
    }
    
    //Agglo for uwwtp======================================================
    if (true === isset($listeAgglo)) {
        if(isset($xml['UWWTD_Report']['Agglomerations']['Agglomeration']['aggCode'])){
            $imports[0] = $xml['UWWTD_Report']['Agglomerations']['Agglomeration'];
        }
        else{
            $imports = $xml['UWWTD_Report']['Agglomerations']['Agglomeration'];
        }
        $bAggloFound = 0;
        foreach($imports as $agglo) {
            if (true === in_array($agglo['aggCode'], $listeAgglo)) {
                $xmlTest['UWWTD_Report']['Agglomerations']['Agglomeration'][] = $agglo;
                $bAggloFound++;
            }
        }
        if ($bAggloFound != count($listeAgglo)) {
//             return "error, can't find agglo attach to uwwtp in xml " . implode(',', $listeAgglo) . "</br>";
            drupal_set_message("error, can't find agglo attach to uwwtp in xml " . implode(',', $listeAgglo));
                    $s .= "<!-- error, can't find agglo attach to uwwtp in xml " . implode(',', $listeAgglo) . "-->
        ";
        } 
    }    
    
    //uwwtp======================================================
    if(isset($xml['UWWTD_Report']['UWWTPs']['UWWTP']['uwwCode'])){
        $imports[0] = $xml['UWWTD_Report']['UWWTPs']['UWWTP'];
    }
    else{
        $imports = $xml['UWWTD_Report']['UWWTPs']['UWWTP'];
    } 
    $buwwtpFound = 0;
    foreach($imports as $uwwtp) {
        if (true === in_array($uwwtp['uwwCode'],$uwwCode)) {
            $xmlTest['UWWTD_Report']['UWWTPs']['UWWTP'][] = $uwwtp;
            $buwwtpFound++;
        }
    }
    if ($buwwtpFound != count($uwwCode)) {
//         return "error, can't find uwwtp in xml  " . implode(',', $uwwCode) . "</br>";
        drupal_set_message("error, can't find uwwtp in xml  " . implode(',', $uwwCode));
                $s .= "<!-- error, can't find uwwtp in xml  " . implode(',', $uwwCode) . "-->
        ";
    } 
    
    //DischargePoints/DischargePoint/uwwID = codeuwwtp ======================================================
    if(isset($xml['UWWTD_Report']['DischargePoints']['DischargePoint']['dcpCode'])){
        $imports[0] = $xml['UWWTD_Report']['DischargePoints']['DischargePoint'];
    }
    else{
        $imports = $xml['UWWTD_Report']['DischargePoints']['DischargePoint'];
    } 
    $bdcpFound = array();
    $rcaCode = array();
    foreach($imports as $dcp) {
//         dsm($dcp['uwwID']);
//         dsm($dcp['rcaID']);
        if (true === in_array($dcp['uwwID'],$uwwCode)) {
            $xmlTest['UWWTD_Report']['DischargePoints']['DischargePoint'][] = $dcp;
            if (!in_array($dcp['rcaID'], $rcaCode)) {
                $rcaCode[] = $dcp['rcaID'];
            }
            $bdcpFound[$dcp['uwwID']]++;
        }
    }
//     dsm($rcaCode);
    if (count($bdcpFound) != count($uwwCode)) {
//         return "error, can't find dcp in xml for uwwtp " . implode(',', $uwwCode) . "</br>";
        drupal_set_message("error, can't find dcp in xml for uwwtp " . implode(',', $uwwCode));
        $s .= "<!-- error, can't find dcp in xml for uwwtp " . implode(',', $uwwCode) . "-->
        ";        
    } 
    //RCA====================================================== 
    if(isset($xml['UWWTD_Report']['ReceivingAreas']['ReceivingArea']['rcaCode'])){
        $imports[0] = $xml['UWWTD_Report']['ReceivingAreas']['ReceivingArea'];
    }
    else{
        $imports = $xml['UWWTD_Report']['ReceivingAreas']['ReceivingArea'];
    }   
    
    $brcaFound = 0;
    foreach($imports as $rca) {
        if (true === in_array($rca['rcaCode'],$rcaCode)) {
            $xmlTest['UWWTD_Report']['ReceivingAreas']['ReceivingArea'][] = $rca;
            $brcaFound++;
        }
    }
    if ($brcaFound != count($rcaCode)) {
//         return "error, can't find rca in xml for rca " . implode(',', $rcaCode) . "</br>";
        drupal_set_message("error, can't find rca in xml for rca " . implode(',', $rcaCode));
        $s .= "<!-- error, can't find rca in xml for rca " . implode(',', $rcaCode) . "-->
        ";        
    }
    
    //CREATE XML======================================================
    $s .= '<'.'?xml version="1.0" encoding="UTF-8"?'.'>
<UWWTD_Data xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xsi:noNamespaceSchemaLocation="http://water.eionet.europa.eu/schemas/dir91271eec/UWWTD2011.xsd">

';
   
//     if ($uwwtd_aggloFound != count($currentCodeAgglo)) {
//         $s .= "<!-- error, can't find buwwtd_agglo in xml for agglo " . implode(',', $currentCodeAgglo) . "-->
//         ";
//     }
//     if ($bAggloFound != count($listeAgglo)) {
//         $s .= "<!-- error, can't find agglo attach to uwwtp in xml " . implode(',', $listeAgglo) . "-->
//         ";
//     } 
    
//     if ($buwwtpFound != count($uwwCode)) {
//         $s .= "<!-- error, can't find uwwtp in xml  " . implode(',', $uwwCode) . "-->
//         ";
//     } 
//     if ($bdcpFound != count($currentCodeAgglo)) {
//         $s .= "<!-- error, can't find dcp in xml for uwwtp " . implode(',', $uwwCode) . "-->
//         ";
//     }
//     if ($brcaFound != count($rcaCode)) {
//         $s .= "<!-- error, can't find rca in xml for rca " . implode(',', $rcaCode) . "-->
//         ";
//     }
       
    $s .= uwwtd_debug_create_tag_from_array($xmlTest, '');
    
    $s .= '

</UWWTD_Data>';
    ini_set("auto_detect_line_endings", false); //for Mac user    
    $aHeaders = array(
          'Content-Type'        => 'text/xml',   
          'Content-Disposition' => 'attachment; filename="agglo'.$value.'.xml' . '"',
          'Expires'             => '0',
          'Cache-Control'       => 'must-revalidate',
          'Pragma'              =>'public',
//           'Content-Length'      => mb_strlen($filename),
      );            
    foreach ($aHeaders as $sName => $sValue) {
        drupal_add_http_header($sName, $sValue);
    }
    echo $s; 
    
    exit();
//     dsm($s);
//     return 'qsd';      
}
 
/**
 * Extract an xml for only one agglo from a xml source
 */ 
function debug_create_xml_old($type, $value)
{
    //todo, get a list of agglo nid (to test mutliple agglo)
    if ($type != 'nid-agglo') {
        return '';
    }
    $agg = node_load($value);
    $xml = uwwtd_xml_to_array($agg->field_sourcefile['und'][0]['uri']);
    $currentCodeAgglo = $agg->field_inspireidlocalid['und'][0]['value'];
//     codeagglo in $agg->field_inspireidlocalid['und'][0]['value']
//     copier xml node /Reporter
//                     /ReportPeriod
//                     /Contacts
//                     /BigCityDischargers     
//     Agglomerations/Agglomeration/aggCode = codeagglo
//         copier l'agglo
//     UwwtpAgglos/UwwtpAgglo/aucAggCode =  codeagglo
//         copier UwwtpAgglo de l'agglo
//     UwwtpAgglos/UwwtpAgglo/aucUwwCode =  codeuwwtp
//         copier les uwwtp de l'agglo avec contenu de UwwtpAgglos
//     UWWTPs/UWWTP/uwwCode = codeuwwtp
//         !! copier toutes les agglo de ce uwwtp (et agglo et agglo_uwwtp) 
//     DischargePoints/DischargePoint/uwwID = codeuwwtp
//         copier les dcp de chaque uwwtp
//     DischargePoints/DischargePoint/rcaID = rcacode
//         copier les rca de chaque dcp
//     ReceivingAreas/ReceivingArea/rcaCode = rcacode
    $xmlTest = array();
    $xmlTest['UWWTD_Report']['Reporter'] = $xml['UWWTD_Report']['Reporter'];
    $xmlTest['UWWTD_Report']['ReportPeriod'] = $xml['UWWTD_Report']['ReportPeriod'];
    $xmlTest['UWWTD_Report']['Contacts'] = $xml['UWWTD_Report']['Contacts'];
    $xmlTest['UWWTD_Report']['BigCityDischargers'] = $xml['UWWTD_Report']['BigCityDischargers'];
    
    //AGGLO ======================================================
    if(isset($xml['UWWTD_Report']['Agglomerations']['Agglomeration']['aggCode'])){
        $imports[0] = $xml['UWWTD_Report']['Agglomerations']['Agglomeration'];
    }
    else{
        $imports = $xml['UWWTD_Report']['Agglomerations']['Agglomeration'];
    }
    $aggloFound = false;
    foreach($imports as $agglo) {
        if ($agglo['aggCode'] == $currentCodeAgglo) {
            $xmlTest['UWWTD_Report']['Agglomerations']['Agglomeration'][] = $agglo;
            $aggloFound = true;
            break; //only one agglo
        }
    }
    if ($aggloFound == false) {
        return "error, can't find agglo in xml " . $currentCodeAgglo . "</br>";
    }
    //UwwtpAgglos for agglo ======================================================
    if(isset($xml['UWWTD_Report']['UwwtpAgglos']['UwwtpAgglo']['aucUwwCode'])){
        $imports[0] = $xml['UWWTD_Report']['UwwtpAgglos']['UwwtpAgglo'];
    }
    else{
        $imports = $xml['UWWTD_Report']['UwwtpAgglos']['UwwtpAgglo'];
    } 
    $uwwtd_aggloFound = false;
    foreach($imports as $uwwtp_agglo) {
        if ($uwwtp_agglo['aucAggCode'] == $currentCodeAgglo) {
            $xmlTest['UWWTD_Report']['UwwtpAgglos']['UwwtpAgglo'][] = $uwwtp_agglo;
            $uwwCode[] = $uwwtp_agglo['aucUwwCode'];  //list of uwwtp attach to the agglo
            $uwwtd_aggloFound = true;
        }
    }
    if ($uwwtd_aggloFound == false) {
//         return "error, can't find buwwtd_agglo in xml for agglo " . $currentCodeAgglo . "</br>";
        drupal_set_message("error, can't find buwwtd_agglo in xml for agglo " . $currentCodeAgglo);
    }
    //UwwtpAgglos for uwwtp======================================================
    foreach($imports as $uwwtp_agglo) {
        if (true === in_array($uwwtp_agglo['aucUwwCode'],$uwwCode) && $uwwtp_agglo['aucAggCode'] != $currentCodeAgglo) {
            $listeAgglo[] = $uwwtp_agglo['aucAggCode']; //all other agglo attach to the uwwtp (need for calculation)
            $xmlTest['UWWTD_Report']['UwwtpAgglos']['UwwtpAgglo'][] = $uwwtp_agglo;
        }
    }
    
    //Agglo for uwwtp======================================================
    if (true === isset($listeAgglo)) {
        if(isset($xml['UWWTD_Report']['Agglomerations']['Agglomeration']['aggCode'])){
            $imports[0] = $xml['UWWTD_Report']['Agglomerations']['Agglomeration'];
        }
        else{
            $imports = $xml['UWWTD_Report']['Agglomerations']['Agglomeration'];
        }
        $bAggloFound = false;
        foreach($imports as $agglo) {
            if (true === in_array($agglo['aggCode'], $listeAgglo)) {
                $xmlTest['UWWTD_Report']['Agglomerations']['Agglomeration'][] = $agglo;
                $bAggloFound = true;
            }
        }
        if ($bAggloFound == false) {
//             return "error, can't find agglo attach to uwwtp in xml " . implode(',', $listeAgglo) . "</br>";
            drupal_set_message("error, can't find agglo attach to uwwtp in xml " . implode(',', $listeAgglo));
        } 
    }    
    
    //uwwtp======================================================
    if(isset($xml['UWWTD_Report']['UWWTPs']['UWWTP']['uwwCode'])){
        $imports[0] = $xml['UWWTD_Report']['UWWTPs']['UWWTP'];
    }
    else{
        $imports = $xml['UWWTD_Report']['UWWTPs']['UWWTP'];
    } 
    $buwwtpFound = false;
    foreach($imports as $uwwtp) {
        if (true === in_array($uwwtp['uwwCode'],$uwwCode)) {
            $xmlTest['UWWTD_Report']['UWWTPs']['UWWTP'][] = $uwwtp;
            $buwwtpFound = true;
        }
    }
    if ($buwwtpFound == false) {
//         return "error, can't find uwwtp in xml  " . implode(',', $uwwCode) . "</br>";
        drupal_set_message("error, can't find uwwtp in xml  " . implode(',', $uwwCode));
    } 
    
    //DischargePoints/DischargePoint/uwwID = codeuwwtp ======================================================
    if(isset($xml['UWWTD_Report']['DischargePoints']['DischargePoint']['dcpCode'])){
        $imports[0] = $xml['UWWTD_Report']['DischargePoints']['DischargePoint'];
    }
    else{
        $imports = $xml['UWWTD_Report']['DischargePoints']['DischargePoint'];
    } 
    $bdcpFound = false;
    foreach($imports as $dcp) {
        if (true === in_array($dcp['uwwID'],$uwwCode)) {
            $xmlTest['UWWTD_Report']['DischargePoints']['DischargePoint'][] = $dcp;
            $rcaCode[] = $dcp['rcaID'];
            $bdcpFound = true;
        }
    }
    if ($bdcpFound == false) {
//         return "error, can't find dcp in xml for uwwtp " . implode(',', $uwwCode) . "</br>";
        drupal_set_message("error, can't find dcp in xml for uwwtp " . implode(',', $uwwCode));
    } 
    //RCA====================================================== 
    if(isset($xml['UWWTD_Report']['ReceivingAreas']['ReceivingArea']['rcaCode'])){
        $imports[0] = $xml['UWWTD_Report']['ReceivingAreas']['ReceivingArea'];
    }
    else{
        $imports = $xml['UWWTD_Report']['ReceivingAreas']['ReceivingArea'];
    }   
    
    $brcaFound = false;
    foreach($imports as $rca) {
        if (true === in_array($rca['rcaCode'],$rcaCode)) {
            $xmlTest['UWWTD_Report']['ReceivingAreas']['ReceivingArea'][] = $rca;
            $brcaFound = true;
        }
    }
    if ($brcaFound == false) {
//         return "error, can't find rca in xml for rca " . implode(',', $rcaCode) . "</br>";
        drupal_set_message("error, can't find rca in xml for rca " . implode(',', $rcaCode));
    }
    
    //CREATE XML======================================================
    $s = '<'.'?xml version="1.0" encoding="UTF-8"?'.'>
<UWWTD_Data xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xsi:noNamespaceSchemaLocation="http://water.eionet.europa.eu/schemas/dir91271eec/UWWTD2011.xsd">

';
   
    if ($uwwtd_aggloFound == false) {
        $s .= "<!-- error, can't find buwwtd_agglo in xml for agglo " . $currentCodeAgglo . "-->
        ";
    }
    if ($bAggloFound == false) {
        $s .= "<!-- error, can't find agglo attach to uwwtp in xml " . implode(',', $listeAgglo) . "-->
        ";
    } 
    
    if ($buwwtpFound == false) {
        $s .= "<!-- error, can't find uwwtp in xml  " . implode(',', $uwwCode) . "-->
        ";
    } 
    if ($bdcpFound == false) {
        $s .= "<!-- error, can't find dcp in xml for uwwtp " . implode(',', $uwwCode) . "-->
        ";
    }
    if ($brcaFound == false) {
        $s .= "<!-- error, can't find rca in xml for rca " . implode(',', $rcaCode) . "-->
        ";
    }
       
    $s .= uwwtd_debug_create_tag_from_array($xmlTest, '');
    
    $s .= '

</UWWTD_Data>';
    ini_set("auto_detect_line_endings", false); //for Mac user    
    $aHeaders = array(
          'Content-Type'        => 'text/xml',   
          'Content-Disposition' => 'attachment; filename="agglo'.$value.'.xml' . '"',
          'Expires'             => '0',
          'Cache-Control'       => 'must-revalidate',
          'Pragma'              =>'public',
//           'Content-Length'      => mb_strlen($filename),
      );            
    foreach ($aHeaders as $sName => $sValue) {
        drupal_add_http_header($sName, $sValue);
    }
    echo $s; 
    exit();      
}              

//TODO better !! 
function uwwtd_debug_create_tag_from_array($array, $parentkey)
{
    if (false === is_array($array)) {
        return $array;
    }
    $s = '';  
    foreach($array as $key => $value) {
        if (true === is_int($key)) {
            $s .= '<'.$parentkey.'>';
        }elseif (false === is_array($value) || false === isset($value[0])) {
            $s .= '<'.$key.'>';
        }
        
        $s .= uwwtd_debug_create_tag_from_array($value, $key);

        if (true === is_int($key)) {
            $s .= '</'.$parentkey.'>';
        }elseif (false === is_array($value) || false === isset($value[0])) {
            $s .= '</'.$key.'>';    
        }               
        $s .= "\n";
    }    
    return $s;
} 

function uwwtd_debug(){
    return '';
                         
    return 'debug';                                                
}

// permission to view data pages
function uwwtd_permission() {
  return array(
    'Data-management access' => array(
      'title' => t('Access to the data management pages'),
    )
  );
}

function uwwtd_cron(){
    $lastGen = variable_get('uwwtd_wfs_table', 0);
// 	if((time() - $lastGen) > (60*60*24)){
	// Requires postgres for DROP TABLE IF
	db_query('DROP TABLE IF EXISTS wfs."UWWTD_UrbanWasteWaterTreatmentPlant";
	CREATE TABLE wfs."UWWTD_UrbanWasteWaterTreatmentPlant"
        AS SELECT * from public."UWWTD_UrbanWasteWaterTreatmentPlant";
	ALTER TABLE wfs."UWWTD_UrbanWasteWaterTreatmentPlant"
	ADD PRIMARY KEY ("siteId");

	DROP TABLE IF EXISTS wfs."UWWTD_Agglomeration";
	CREATE TABLE wfs."UWWTD_Agglomeration"
        AS SELECT * from public."UWWTD_Agglomeration";
	ALTER TABLE wfs."UWWTD_Agglomeration"
	ADD PRIMARY KEY ("siteId");

	DROP TABLE IF EXISTS wfs."UWWTD_ReceivingArea";
	CREATE TABLE wfs."UWWTD_ReceivingArea"
        AS SELECT * from public."UWWTD_ReceivingArea";
	ALTER TABLE wfs."UWWTD_ReceivingArea"
	ADD PRIMARY KEY ("siteId");

	DROP TABLE IF EXISTS wfs."UWWTD_DischargePoint";
	CREATE TABLE wfs."UWWTD_DischargePoint"
        AS SELECT * from public."UWWTD_DischargePoint";
	ALTER TABLE wfs."UWWTD_DischargePoint"
	ADD PRIMARY KEY ("siteId"); 
    ');
        
    	variable_set('uwwtd_wfs_table', time());
// 	}
}



//=============================Fonction de gestion des erreurs de l'import======================
function uwwtd_errors_get_category($cat=null){
    $categories = array(
        0=>'Input',
        1=>'Linking',
        2=>'Geometry',
        3=>'Conformity',
        4=>'Format',
    );
    if($cat){
        if(isset($categories[$cat])) return $categories[$cat];
        else return false;
    }
    else return $categories;
}
function uwwtd_errors_get_types($type=null){
    $types = array(
        0=>'Notification',
        1=>'Warning',
        2=>'Error',
    );
    if($type){
        if(isset($types[$type])) return $types[$type];
        else return false;
    }
    else return $types;
}
//=========================TODO for gettings error with an entity_id & entity_type 
function uwwtd_errors_get_errors($entity_id, $entity_type){
    $errors = array();
    
    //TODO db_select();
    
    return $errors;
}


function uwwtd_block_info() {

  $blocks['map_home'] = array(
                        'info' => t('Map home'),
                        'cache' => DRUPAL_NO_CACHE,
                        );                                                 
  return $blocks;
}

function uwwtd_get_cache_key_agglomeration($option)
{
    return 'data_agglomeration_' . $option['field_anneedata_value']; 
}

function uwwtd_get_cache_key_uwwtp($option)
{
    return 'data_uwwtp_' . $option['field_anneedata_value']; 
}

function uwwtd_get_cache_key_dcp($option)
{
    return 'data_dcp_' . $option['field_anneedata_value']; 
}

function uwwtd_get_cache_key_block_home()
{
    return 'data_block_map_home'; 
}

function uwwtd_is_user_anonymous()
{
    global $user;
    return ($user->uid == 0);
}

function uwwtd_get_cache_key_page_agglo_compliance($option)
{
    return 'page_agglomeration_compliance_' . $option['field_anneedata_value'];
}

function uwwtd_get_cache_key_page_agglo_treatment($option)
{
    return 'page_agglomeration_treatment_' . $option['field_anneedata_value'];
}

function uwwtd_get_cache_key_page_uwwtp_treatment($option)
{
    return 'page_uwwtp_treatment_' . $option['field_anneedata_value'];
}

function uwwtd_get_cache_key_page_uwwtp_compliance($option)
{
    return 'page_uwwtp_compliance_' . $option['field_anneedata_value'];
}

function uwwtd_block_view($delta = '')
{
    switch ($delta) {
        case 'map_home':            
            $cache = '';
            $cache_name = uwwtd_get_cache_key_block_home();
            //we always need to build the map because openlayer set some css and js
            $preset_name = 'waste_water_treatment_network_map';   //layer agglomeration_treatment 'Agglomeration connection map and list'
            $preset = openlayers_preset_load($preset_name);
            $map    = openlayers_build_map($preset->data);
            $put_in_cache = uwwtd_is_user_anonymous();             
            if (UWWTD_CACHE_ACTIVE === true && true === $put_in_cache) {                                    
                $cache = cache_get($cache_name, 'cache_block');
            }
            if (!empty($cache) && isset($cache->data) && !empty($cache->data)) {
                $block['content'] = $cache->data;
            } else {                      
                $option['field_anneedata_value'] = uwwtd_get_max_annee();
                
                $data = uwwtd_get_data_agglomeration($option);
                $optionstyle = array();
                $optionstyle['weight']['list'] = uwwtd_get_point_size_from_preset($preset, 'openlayers_plus_behavior_scalepoints');
                $optionstyle['weight']['field'] = 'field_agggenerated_value';
                $optionstyle['popup_title_type'] = 'agglomeration';                          
                $optionstyle['popup'] = array(
                    'field_agggenerated_value_format' => array('label' => 'Generated load (p.e.)'),
                    'field_aggcompliance_value_format' => array('label' => 'Compliance'),
                    'field_aggart3compliance_value_format' => array('label' => 'Article 3 compliance'),
                    'field_aggart4compliance_value_format' => array('label' => 'Article 4 compliance'),
                    'field_aggart5compliance_value_format' => array('label' => 'Article 5 compliance'),
                );                   
                $features['agglomerations'] = uwwtd_build_feature($data, $optionstyle);
                unset($data);
                $data = uwwtd_get_data_uwwtp($option);
                $optionstyle = array();
                $optionstyle['popup_title_type'] = 'treatment-plant';
                $optionstyle['popup'] = array(
                    'field_uwwcompliance_value_format' => array('label' => 'Compliance'),
                    'field_uwwprimarytreatment_value_format' => array('label' => 'Primary treatment'),
                    'field_uwwsecondarytreatment_value_format' => array('label' => 'Secondary treatment'),
                    'field_uwwnremoval_value_format' => array('label' => 'N-removal'),
                    'field_uwwpremoval_value_format' => array('label' => 'P-removal'),
                );                             
                $features['uwwtp'] = uwwtd_build_feature($data, $optionstyle);
                unset($data);          
                $data = uwwtd_get_data_dcp($option);
                $optionstyle = array();
                $optionstyle['popup_title_type'] = 'discharge-point';                
                $features['dcp'] = uwwtd_build_feature($data, $optionstyle);
                unset($data);
                
                $block['content'] =  uwwtd_build_map($map, $features);
                if (true === $put_in_cache) {
                    cache_set($cache_name, $block['content'], 'cache_block', CACHE_PERMANENT);
                }                
            }      
            return $block;
            break;    
//         case 'map_home':
//             
//             $cache = '';
//             $cache_name = uwwtd_get_cache_key_block_home(); 
//             if (UWWTD_CACHE_ACTIVE === true) {                                    
//                 $cache = cache_get($cache_name, 'cache_block');
//             }
//             if (!empty($cache) && isset($cache->data) && !empty($cache->data)) {
//                 $features = $cache->data;
//             }else {                      
//                 $option['field_anneedata_value'] = uwwtd_get_max_annee();
//                 
//                 $preset_name = 'waste_water_treatment_network_map';   //layer agglomeration_treatment 'Agglomeration connection map and list'
//                 $preset = openlayers_preset_load($preset_name);
//                     
//                 $data = uwwtd_get_data_agglomeration($option);
//                 $optionstyle = array();
//                 //size of the agglo
// //                 $optionstyle['weight'] = $GLOBALS['uwwtd']['ui']['pe_weight'];
// //                 $optionstyle['weight']['list'] = $GLOBALS['uwwtd']['ui']['pe_weight'];
// //                 $optionstyle['weight']['field'] = 'field_agggenerated_value';  
//                 
//                 $optionstyle['weight']['list'] = uwwtd_get_point_size_from_preset($preset, 'openlayers_plus_behavior_scalepoints');
//                 $optionstyle['weight']['field'] = 'field_agggenerated_value';
//                                                
// //                 array(
// //                   1 =>  2000,
// //                   2 =>  10000,
// //                   3 =>  0,    
// //                 );   
// //                 $optionstyle['popup_title_type'] = 'treatment-plant';
// //                 $optionstyle['popup_title_type'] = 'discharge-pointt';
//                 $optionstyle['popup_title_type'] = 'agglomeration';                          
//                 $optionstyle['popup'] = array(
//                     'field_agggenerated_value_format' => array('label' => 'Generated load (p.e.)'),
//                     'field_aggcompliance_value_format' => array('label' => 'Compliance'),
//                     'field_aggart3compliance_value_format' => array('label' => 'Article 3 compliance'),
//                     'field_aggart4compliance_value_format' => array('label' => 'Article 4 compliance'),
//                     'field_aggart5compliance_value_format' => array('label' => 'Article 5 compliance'),
//                 );                   
//                 $features['agglomerations'] = uwwtd_build_feature($data, $optionstyle);
//                 unset($data);
//                 
//                 $data = uwwtd_get_data_uwwtp($option);
//                 $optionstyle = array();
//                 $optionstyle['popup_title_type'] = 'treatment-plant';
//                 $optionstyle['popup'] = array(
//                     'field_uwwcompliance_value_format' => array('label' => 'Compliance'),
//                     'field_uwwprimarytreatment_value_format' => array('label' => 'Primary treatment'),
//                     'field_uwwsecondarytreatment_value_format' => array('label' => 'Secondary treatment'),
//                     'field_uwwnremoval_value_format' => array('label' => 'N-removal'),
//                     'field_uwwpremoval_value_format' => array('label' => 'P-removal'),
// //                     'field_physicalcapacityactivity_value' => array('label' => 'Capacity'),
// //                     'field_uwwbod5perf_value' => array('label' => 'Performance: BOD5'),
// //                     'field_uwwcodperf_value' => array('label' => 'Performance: COD'),
// //                     'field_uwwntotperf_value' => array('label' => 'Performance: Total nitrogen'),
// //                     'field_uwwptotperf_value' => array('label' => 'Performance: Total phosphorus'),
//                 );                             
//                 $features['uwwtp'] = uwwtd_build_feature($data, $optionstyle);
//                 unset($data);
//                 
//                 $data = uwwtd_get_data_dcp($option);
//                 $optionstyle = array();
//                 $optionstyle['popup_title_type'] = 'discharge-point';                
//                 $features['dcp'] = uwwtd_build_feature($data, $optionstyle);
//                 unset($data);
//                 cache_set($cache_name, $features, 'cache_block', CACHE_PERMANENT);                
//             }      
//             $block['content'] =  uwwtd_build_map($preset, $features);
//             return $block;
//             break;
        default:
            break;        
    }
}

/**
 * Get all agglomeration data for a year
 */ 
function uwwtd_get_data_agglomeration($option)
{   
//        dsm(__FUNCTION__);
    $cache_name = uwwtd_get_cache_key_agglomeration($option);
//     dsm($cache_name);
    $cache = '';
    if (UWWTD_CACHE_ACTIVE === true) {  
        $cache = cache_get($cache_name, 'cache');
    }
//     dsm($cache);
    if (!empty($cache) && isset($cache->data) && !empty($cache->data)) {
        return  $cache->data;  
    }
    
    $data = array();
           
    $query = 'select n.title,                                    
                     f_annee.field_anneedata_value,              
                     f_aggcode.field_inspireidlocalid_value,                        
                     f_agggenerated.field_agggenerated_value,
                     f_art3.field_aggart3compliance_value,       
                     f_art4.field_aggart4compliance_value,       
                     f_art5.field_aggart5compliance_value,       
                     f_art6.field_aggart6compliance_value,       
                     f_comp.field_aggcompliance_value,           
                     f_nuts.field_regionnuts_value,              
                     f_aggc2.field_aggc2_value,
                     f_aggc1.field_aggc1_value,
                     f_aggpercwithouttreatment.field_aggpercwithouttreatment_value,
                     st_astext(st_transform(f_geo.the_geom, 4326)) wkt
    from {node} n
        left join
            {field_data_field_anneedata} f_annee 
                ON n.nid = f_annee.entity_id
        left join
            {field_data_field_inspireidlocalid} f_aggcode
                ON n.nid = f_aggcode.entity_id
        left join
            {field_data_field_agggenerated} f_agggenerated
                ON n.nid = f_agggenerated.entity_id
        left join
            {field_data_field_aggart3compliance} f_art3
                ON n.nid = f_art3.entity_id
        left join
            {field_data_field_aggart4compliance} f_art4
                ON n.nid = f_art4.entity_id
        left join
            {field_data_field_aggart5compliance} f_art5
                ON n.nid = f_art5.entity_id
        left join
            {field_data_field_aggart6compliance} f_art6
                ON n.nid = f_art6.entity_id
        left join
            {field_data_field_aggcompliance} f_comp
                ON n.nid = f_comp.entity_id 
        left join
            {field_data_field_regionnuts} f_nuts
                ON n.nid = f_nuts.entity_id  
        left join
            {field_data_field_aggc2} f_aggc2
                ON n.nid = f_aggc2.entity_id  
        left join
            {field_data_field_aggc1} f_aggc1
                ON n.nid = f_aggc1.entity_id  
        left join
            {field_data_field_aggpercwithouttreatment} f_aggpercwithouttreatment
                ON n.nid = f_aggpercwithouttreatment.entity_id                                                                       
        left join
            {field_data_field_position_geo} f_geo
                ON n.nid = f_geo.entity_id
    where n.type = :typenode
        and f_annee.field_anneedata_value = :annee    
    ';

        
    $param = array(
        ':typenode' => 'agglomeration',
        ':annee' => $option['field_anneedata_value'],
        );
//    dsm($param);
//    dsm($query);
    
//     if (isset($option['filter']['field_anneedata_value'])) {
//         $query .= ' and f_annee.field_anneedata_value = :annee';
//         $param[':annee'] = $option['filter']['field_anneedata_value'];
//     } else {
//         $query .= ' and f_annee.field_anneedata_value = (select max(field_anneedata_value) from {field_data_field_anneedata})';
//     }
                                                                                                                                            
//     if (isset($option['filter']['field_agggenerated_value_op']) && isset($option['filter']['field_agggenerated_value']['value']) && !empty($option['filter']['field_agggenerated_value']['value'])) {
//         $query .= ' and f_agggenerated.field_agggenerated_value ' . $option['filter']['field_agggenerated_value_op'] . ' :f_agggenerated';
//         $param[':f_agggenerated'] = $option['filter']['field_agggenerated_value']['value'];
//     }
//     
//     if (isset($option['filter']['field_aggcompliance_value']) && $option['filter']['field_aggcompliance_value'] != 'All') {
//         $query .= ' and f_comp.field_aggcompliance_value = :f_comp';
//         $param[':f_comp'] = $option['filter']['field_aggcompliance_value'];
//     }  
//     
//     if (isset($option['filter']['field_aggart3compliance_value']) && $option['filter']['field_aggart3compliance_value'] != 'All') {
//         $query .= ' and f_art3.field_aggart3compliance_value = :f_art3';
//         $param[':f_art3'] = $option['filter']['field_aggart3compliance_value'];
//     } 
//     
//     if (isset($option['filter']['field_aggart4compliance_value']) && $option['filter']['field_aggart4compliance_value'] != 'All') {
//         $query .= ' and f_art4.field_aggart4compliance_value = :f_art4';
//         $param[':f_art4'] = $option['filter']['field_aggart4compliance_value'];
//     } 
//     
//     if (isset($option['filter']['field_aggart5compliance_value']) && $option['filter']['field_aggart5compliance_value'] != 'All') {
//         $query .= ' and f_art5.field_aggart5compliance_value = :f_art5';
//         $param[':f_art5'] = $option['filter']['field_aggart5compliance_value'];
//     } 
//     
//     if (isset($option['filter']['field_aggart6compliance_value']) && $option['filter']['field_aggart6compliance_value'] != 'All') {
//         $query .= ' and f_art6.field_aggart6compliance_value = :f_art6';
//         $param[':f_art6'] = $option['filter']['field_aggart6compliance_value'];
//     }                   
// 
//     //todo, sort in php 
//     if (isset($option['sort']) && in_array($option['sort'], array('field_agggenerated'))) {
//         $query .= ' order by ' . $option['sort'] . '_value';
//         if (isset($option['order']) && in_array($option['order'], array('asc', 'desc'))) {
//             $query .= ' ' . $option['order'];            
//         }                    
//     }
    
//     dsm($query);    
                                   
//     $param = array(
//         ':typenode' => 'agglomeration',
// //         ':annee' => '(select max(field_anneedata_value) from drupal_field_data_field_anneedata)',
//     );
    try {        
        $result = db_query($query, $param);
        while($row = $result->fetchAssoc()) {
            $row['field_agggenerated_value_format'] = is_null($row['field_agggenerated_value']) ? '' : uwwtd_format_number($row['field_agggenerated_value']);
            $row['field_aggcompliance_value_format'] = is_null($row['field_aggcompliance_value']) ? '' : $GLOBALS['uwwtd']['ui']['field']['compliance_label'][$row['field_aggcompliance_value']];
            $row['field_aggart3compliance_value_format'] = is_null($row['field_aggart3compliance_value']) ? '' : $GLOBALS['uwwtd']['ui']['field']['compliance_label'][$row['field_aggart3compliance_value']];
            $row['field_aggart4compliance_value_format'] = is_null($row['field_aggart4compliance_value']) ? '' : $GLOBALS['uwwtd']['ui']['field']['compliance_label'][$row['field_aggart4compliance_value']];
            $row['field_aggart5compliance_value_format'] = is_null($row['field_aggart5compliance_value']) ? '' : $GLOBALS['uwwtd']['ui']['field']['compliance_label'][$row['field_aggart5compliance_value']];
            $row['field_aggart6compliance_value_format'] = is_null($row['field_aggart6compliance_value']) ? '' : $GLOBALS['uwwtd']['ui']['field']['compliance_label'][$row['field_aggart6compliance_value']];
            $row['field_aggc1_value_format'] = is_null($row['field_aggc1_value']) ? '' : uwwtd_format_number($row['field_aggc1_value'], 2);
            $row['field_aggc2_value_format'] = is_null($row['field_aggc2_value']) ? '' : uwwtd_format_number($row['field_aggc2_value'], 2);
            $row['field_aggpercwithouttreatment_value_format'] = is_null($row['field_aggpercwithouttreatment_value']) ? '' : uwwtd_format_number($row['field_aggpercwithouttreatment_value'], 2);
            $data[] = $row;    
        }
        cache_set($cache_name, $data, 'cache', CACHE_PERMANENT);       
    }catch(Exception $e) {
        dsm($e->getMessage());
    }
                 
//     dsm($data);
    return $data;    
}

function uwwtd_get_data_uwwtp($option)
{   
    $cache_name = uwwtd_get_cache_key_uwwtp($option);
    $cache  = '';
    if (UWWTD_CACHE_ACTIVE === true) {
        $cache = cache_get($cache_name, 'cache');
    }
    if (!empty($cache) && isset($cache->data) && !empty($cache->data)) {
        return  $cache->data;
    }
    
    $data = array();
    
//     $agglouww->field_agglo_uww_perc_ent_uw['und'][0]['value']
    /*  todo use if we must display the calcul of the load entering from agglo_uww node   
    WITH total_entering_uwwtp as (
    select sub_uww.field_agglo_uww_uww_nid uwwtp_nid, sum(sub_percent.field_agglo_uww_perc_ent_uw_value::real * sub_agggenerated.field_agggenerated_value::integer / 100) 
    from drupal_node   agglo_uww
      inner join
         drupal_field_data_field_agglo_uww_perc_ent_uw  sub_percent 
            ON agglo_uww.nid = sub_percent.entity_id
      inner join
         drupal_field_data_field_agglo_uww_uww     sub_uww
            ON agglo_uww.nid = sub_uww.entity_id
      inner join
        drupal_field_data_field_agglo_uww_agglo    sub_agglo
            ON agglo_uww.nid = sub_agglo.entity_id
      inner join 
        drupal_field_data_field_agggenerated  sub_agggenerated
            on  sub_agglo.field_agglo_uww_agglo_nid  = sub_agggenerated.entity_id    
    where agglo_uww.type = 'agglo_uww'  
    group by sub_uww.field_agglo_uww_uww_nid
    ) 
    */ 
         
    $query = 'select n.title,
                     f_annee.field_anneedata_value,
                     f_uwwcode.field_inspireidlocalid_value,                   
                     f_comp.field_uwwcompliance_value,
                     f_primarytreatment.field_uwwprimarytreatment_value,
                     f_secondarytreatment.field_uwwsecondarytreatment_value,
                     f_nremoval.field_uwwnremoval_value,
                     f_premoval.field_uwwpremoval_value,
                     f_uwwloadenteringuwwtp.field_uwwloadenteringuwwtp_value,
                     f_regionnuts.field_regionnuts_value,  
                     f_uwwbod5perf.field_uwwbod5perf_value, 
                     f_uwwcodperf.field_uwwcodperf_value, 
                     f_uwwntotperf.field_uwwntotperf_value, 
                     f_uwwptotperf.field_uwwptotperf_value,  
                     f_uwwtreatmenttype.field_uwwtreatmenttype_value,
                     f_physicalcapacityactivity.field_physicalcapacityactivity_value,
                     f_uwwspecification.field_uwwspecification_value,                    
                     st_astext(st_transform(f_geo.the_geom, 4326)) wkt
    from {node} n
        left join
            {field_data_field_anneedata} f_annee 
                ON n.nid = f_annee.entity_id
        left join
            {field_data_field_inspireidlocalid} f_uwwcode
                ON n.nid = f_uwwcode.entity_id
        left join
            {field_data_field_uwwprimarytreatment} f_primarytreatment
                ON n.nid = f_primarytreatment.entity_id
        left join
            {field_data_field_uwwsecondarytreatment} f_secondarytreatment
                ON n.nid = f_secondarytreatment.entity_id
        left join
            {field_data_field_uwwnremoval} f_nremoval
                ON n.nid = f_nremoval.entity_id
        left join
            {field_data_field_uwwpremoval} f_premoval
                ON n.nid = f_premoval.entity_id
        left join
            {field_data_field_uwwcompliance} f_comp
                ON n.nid = f_comp.entity_id
                
        left join
            {field_data_field_uwwloadenteringuwwtp} f_uwwloadenteringuwwtp
                ON n.nid = f_uwwloadenteringuwwtp.entity_id 
        left join
            {field_data_field_regionnuts} f_regionnuts
                ON n.nid = f_regionnuts.entity_id 
        left join
            {field_data_field_uwwbod5perf} f_uwwbod5perf
                ON n.nid = f_uwwbod5perf.entity_id 
        left join
            {field_data_field_uwwcodperf} f_uwwcodperf
                ON n.nid = f_uwwcodperf.entity_id 
        left join
            {field_data_field_uwwntotperf} f_uwwntotperf
                ON n.nid = f_uwwntotperf.entity_id 
        left join
            {field_data_field_uwwptotperf} f_uwwptotperf
                ON n.nid = f_uwwptotperf.entity_id 
        left join
            {field_data_field_uwwtreatmenttype} f_uwwtreatmenttype
                ON n.nid = f_uwwtreatmenttype.entity_id    
        left join
            {field_data_field_physicalcapacityactivity} f_physicalcapacityactivity
                ON n.nid = f_physicalcapacityactivity.entity_id
        left join
            {field_data_field_uwwspecification} f_uwwspecification
                ON n.nid = f_uwwspecification.entity_id                                      
                                                                                                                               
                                                     
        left join
            {field_data_field_position_geo} f_geo
                ON n.nid = f_geo.entity_id
    where n.type = :typenode
    and f_annee.field_anneedata_value = :annee
    ';

    
        
//     dsm($query);
                                   
//     $param = array(
//         ':typenode' => 'uwwtp',
// //         ':annee' => '(select max(field_anneedata_value) from drupal_field_data_field_anneedata)',
//     );
    $param = array(
        ':typenode' => 'uwwtp',
        ':annee' => $option['field_anneedata_value'],
        );
            
    try {        
        $result = db_query($query, $param);
        while($row = $result->fetchAssoc()) {
            $row['field_uwwloadenteringuwwtp_value_format'] = is_null($row['field_uwwloadenteringuwwtp_value']) ? '' : uwwtd_format_number($row['field_uwwloadenteringuwwtp_value']);
            
            $row['field_uwwcompliance_value_format'] = is_null($row['field_uwwcompliance_value']) ? '' : $GLOBALS['uwwtd']['ui']['field']['compliance_label'][$row['field_uwwcompliance_value']];
            
            $row['field_uwwprimarytreatment_value_format'] = is_null($row['field_uwwprimarytreatment_value']) ? '' : $GLOBALS['uwwtd']['ui']['yes_no'][$row['field_uwwprimarytreatment_value']];
            $row['field_uwwsecondarytreatment_value_format'] = is_null($row['field_uwwsecondarytreatment_value']) ? '' : $GLOBALS['uwwtd']['ui']['yes_no'][$row['field_uwwsecondarytreatment_value']];
            $row['field_uwwnremoval_value_format'] = is_null($row['field_uwwnremoval_value']) ? '' : $GLOBALS['uwwtd']['ui']['yes_no'][$row['field_uwwnremoval_value']];
            $row['field_uwwpremoval_value_format'] = is_null($row['field_uwwpremoval_value']) ? '' : $GLOBALS['uwwtd']['ui']['yes_no'][$row['field_uwwpremoval_value']];
            
            $row['field_uwwbod5perf_value_format'] = is_null($row['field_uwwbod5perf_value']) ? '' : $GLOBALS['uwwtd']['ui']['test_pass'][$row['field_uwwbod5perf_value']];
            $row['field_uwwcodperf_value_format'] = is_null($row['field_uwwcodperf_value']) ? '' : $GLOBALS['uwwtd']['ui']['test_pass'][$row['field_uwwcodperf_value']];
            $row['field_uwwntotperf_value_format'] = is_null($row['field_uwwntotperf_value']) ? '' : $GLOBALS['uwwtd']['ui']['test_pass'][$row['field_uwwntotperf_value']];            
            $row['field_uwwptotperf_value_format'] = is_null($row['field_uwwptotperf_value']) ? '' : $GLOBALS['uwwtd']['ui']['test_pass'][$row['field_uwwptotperf_value']];
            
            $row['field_uwwtreatmenttype_value_format'] = is_null($row['field_uwwtreatmenttype_value']) ? '' : $GLOBALS['uwwtd']['ui']['treatment_type_in_place'][$row['field_uwwtreatmenttype_value']];
            
            $row['field_physicalcapacityactivity_value_format'] = is_null($row['field_physicalcapacityactivity_value']) ? '' : uwwtd_format_number($row['field_physicalcapacityactivity_value']);                    
            $data[] = $row;    
        }
        cache_set($cache_name, $data, 'cache', CACHE_PERMANENT);             
    }catch(Exception $e) {
        dsm($e->getMessage());
    }
               
//     dsm($data);
    return $data;    
}

function uwwtd_get_data_dcp($option)
{   
    $cache_name = uwwtd_get_cache_key_dcp($option);
    $cache  ='';
    if (UWWTD_CACHE_ACTIVE === true) {
        $cache = cache_get($cache_name, 'cache');
    }
    if (!empty($cache) && isset($cache->data) && !empty($cache->data)) {
        return  $cache->data;
    }
    $data = array();
         
    $query = 'select n.title,
                     f_annee.field_anneedata_value,
                     f_dcpcode.field_inspireidlocalid_value,            
                     st_astext(st_transform(f_geo.the_geom, 4326)) wkt
    from {node} n
        left join
            {field_data_field_anneedata} f_annee 
                ON n.nid = f_annee.entity_id
        left join
            {field_data_field_inspireidlocalid} f_dcpcode
                ON n.nid = f_dcpcode.entity_id                 
        left join
            {field_data_field_position_geo} f_geo
                ON n.nid = f_geo.entity_id
    where n.type = :typenode
    and f_annee.field_anneedata_value = :annee
    ';
//     dsm($query);
                                   
//     $param = array(
//         ':typenode' => 'discharge_point',
// //         ':annee' => '(select max(field_anneedata_value) from drupal_field_data_field_anneedata)',
//     );
    $param = array(
        ':typenode' => 'discharge_point',
        ':annee' => $option['field_anneedata_value'],
        );    
    try {        
        $result = db_query($query, $param);
        while($row = $result->fetchAssoc()) {
            $data[] = $row;    
        }   
        cache_set($cache_name, $data, 'cache', CACHE_PERMANENT);          
    }catch(Exception $e) {
        dsm($e->getMessage());
    }
               
//     dsm($data);
    return $data;    
}

function uwwtd_build_feature($data, $option = array())
{

    $feature = array();
//     dsm($option);
    $i = 0;
    foreach($data as $row) {
        $i++;
        $description = '';
        if (isset($option['popup'])) {
            foreach($option['popup'] as $field => $detail) {
//                 if (isset($detail['format'])) {
//                     switch($detail['format']['type']) {
//                         case 'function':
//                             $value = call_user_func_array($detail['format']['function'], $detail['format']['param']);
//                             break;
//                         case '':
//                             $value = 
//                             break;                            
//                     } 
//                 } else {
//                     $value = $row[$field];
//                 }
                
                $description .= "  \n  <span class=\"views-field views-field-".$field."\">    <span class=\"views-label views-label-".$field."\">".$detail['label'].": </span>    <span class=\"field-content\">"
                                . $row[$field] .
                                "</span>  </span>";    
            }
        }
//         $field_agggenerated = "  \n  <span class=\"views-field views-field-field-agggenerated\">    <span class=\"views-label views-label-field-agggenerated\">Generated load (p.e.): </span>    <span class=\"field-content\">"
//         .$row['field_agggenerated_value'].
//         "</span>  </span>";  
//         $field_aggcompliance = "\n  <span class=\"views-field views-field-field-aggcompliance\">    <span class=\"views-label views-label-field-aggcompliance\">Compliance: </span>    <span class=\"field-content\">"
//         .$GLOBALS['uwwtd']['ui']['field']['compliance_label'][$row['field_aggcompliance_value']].
//         "</span>  </span>";  
//         $field_aggart3compliance = "\n  <span class=\"views-field views-field-field-aggart3compliance\">    <span class=\"views-label views-label-field-aggart3compliance\">Article 3 compliance: </span>    <span class=\"field-content\">
//         ".$GLOBALS['uwwtd']['ui']['field']['compliance_label'][$row['field_aggart3compliance_value']].
//         "</span>  </span>";  
//         $field_aggart4compliance = "\n  <span class=\"views-field views-field-field-aggart4compliance\">    <span class=\"views-label views-label-field-aggart4compliance\">Article 4 compliance: </span>    <span class=\"field-content\">"
//         .$GLOBALS['uwwtd']['ui']['field']['compliance_label'][$row['field_aggart4compliance_value']].
//         "</span>  </span>";  
//         $field_aggart5compliance = "\n  <span class=\"views-field views-field-field-aggart5compliance\">    <span class=\"views-label views-label-field-aggart5compliance\">Article 5 compliance: </span>    <span class=\"field-content\">"
//         .$GLOBALS['uwwtd']['ui']['field']['compliance_label'][$row['field_aggart5compliance_value']].
//         "</span>  </span>";  
//         $field_aggart6compliance = "\n  <span class=\"views-field views-field-field-aggart6compliance\">    <span class=\"views-label views-label-field-aggart6compliance\">Article 6 compliance: </span>    <span class=\"field-content\">"
//         .$GLOBALS['uwwtd']['ui']['field']['compliance_label'][$row['field_aggart6compliance_value']].        
//         "</span>  </span>";
//         
//         $field_aggc1 = "\n  <span class=\"views-field views-field-field_aggc1\">    <span class=\"views-label views-label-field_aggc1\">Collective system: </span>    <span class=\"field-content\">"
//         .$row['field_aggc1_value'].        
//         "</span>  </span>";
//         
//         $field_aggc2 = "\n  <span class=\"views-field views-field-field_aggc2\">    <span class=\"views-label views-label-field_aggc2\">Individual and Appropriate Systems (IAS): </span>    <span class=\"field-content\">"
//         .$row['field_aggc2_value'].        
//         "</span>  </span>";
//         
//         $field_aggpercwithouttreatment = "\n  <span class=\"views-field views-field-field_aggpercwithouttreatment\">    <span class=\"views-label views-label-field_aggpercwithouttreatment\">Discharge without treatment: </span>    <span class=\"field-content\">"
//         .$row['field_aggpercwithouttreatment_value'].        
//         "</span>  </span>";                        
                                     
                            //http://webnuxdev.rnde.tm.fr/ev_uwwtd_si/agglomeration/si03556/2012
//         $title = l($row['title'], $option['popup_title_type'] . '/'.strtolower($row['field_inspireidlocalid_value']).'/'.$row['field_anneedata_value'], array('attributes'=>array('target'=>'_blank')));
        $title = l($row['title'], uwwtd_get_url_path($option['popup_title_type'], array(strtolower($row['field_inspireidlocalid_value']), $row['field_anneedata_value'])), array('attributes'=>array('target'=>'_blank')));
        
//         $title = l($row['title'], $option['popup_title_type'], array('attributes'=>array('target'=>'_blank')));
        
        
//         $description = $field_agggenerated . $field_aggcompliance . $field_aggart3compliance . $field_aggart4compliance . $field_aggart5compliance . $field_aggart6compliance
//                         . $field_aggc1 . $field_aggc2 . $field_aggpercwithouttreatment;
        
        //here calculate the weight for scaling point
        //try to get info from database configured on behaviour scale
        //todo here   field_aggcompliance_value must be pass by parameter
        //HERE, color may happen to not work because there is a \r adding in the map config
        //when map import, \r will disppear, try with a \r to see if ok
        //'C' => "#4f91e1\r",
        //'NR' => "#a2a2a2\r",
        //'NC' => "#d93c3c\r",
        //'NI' => "#6b6b6b\r",         
        $color = '#000000';
//         dsm($option);
//         dsm($row);
        if (isset($option['color'])) {
//             $color = $option['color'][$row['field_aggcompliance_value']];            
            $color = $option['color']['list'][$row[ $option['color']['field'] ]];
        }
        
//         dsm($color . ':' . $row['field_aggcompliance_value']);
        
        $weight = 1;
        if (isset($option['weight'])) {
//            foreach($option['weight'] as $key => $maxagggenerated) {
//              if ($row['field_agggenerated_value'] < $maxagggenerated) {
//                 $weight = $key;
//                 break;
//              }
//              if ($maxagggenerated == 0) {
//                 $weight = $key;
//              }
//            } 
           
           foreach($option['weight']['list'] as $key => $value) {
             if ($row[ $option['weight']['field'] ] < $value) {
                $weight = $key;
                break;
             }
             if ($value == 0) {
                $weight = $key;
             }
           } 
                      
          
        }
        $chart = array();     
        if (isset($option['piechart'])) {   
//             $svgtest = '<svg id="OpenLayers_Geometry_Point_24" cx="651.0175999995845" cy="389.9091049244453" r="1" viewBox="0 0 13.5 13.5" width="13.5" height="13.5" x="644.2675999995845" y="383.1591049244453" fill="#888888" fill-opacity="0.8" stroke="#222222" stroke-opacity="0.7" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" pointer-events="visiblePainted">
//             <g transform="translate(6.75,6.75)">
//                 <g class="arc">
//                 <path d="M4.133182947122317e-16,-6.75A6.75,6.75 0 1,1 -6.630438942418649,1.2648238734536408L0,0Z" style="fill: rgb(116, 255, 224); stroke: rgb(34, 34, 34); opacity: 0.8; stroke-width: 1;"/>
//                 </g>
//                 <g class="arc">
//                 <path d="M-6.630438942418649,1.2648238734536408A6.75,6.75 0 0,1 -3.8986157481003065,-5.510289942340991L0,0Z" style="fill: rgb(189, 136, 66); stroke: rgb(34, 34, 34); opacity: 0.8; stroke-width: 1;"/>
//                 </g>
//                 <g class="arc">
//                 <path d="M-3.8986157481003065,-5.510289942340991A6.75,6.75 0 0,1 -1.239954884136695e-15,-6.75L0,0Z" style="fill: rgb(192, 0, 0); stroke: rgb(34, 34, 34); opacity: 0.8; stroke-width: 1;"/>
//                 </g>
//             </g>
//                 
//             </svg>';                      
            foreach($option['piechart'] as $field => $detail) {
                $chart[] = array(
                    'label' => $detail['label'],
                    'value' => $row[$field],
                    'color' => $detail['color'],
                      
//                     'svg' => $svgtest,
                );
            }  
//             "data": [
//             {
//             "label": "Collective system",
//             "value": 90.85,
//             "color": "#74FFE0"
//             },
//             {
//             "label": "Individual and Appropriate Systems (IAS)",
//             "value": 8.54,
//             "color": "#BD8842"
//             },
//             {
//             "label": "Discharge without treatment",
//             "value": 0.61,
//             "color": "#C00000"
//             }
//             ]
        }        
//          else {
//             //todo
//             if ($row['field_agggenerated_value'] >= 2000 && $row['field_agggenerated_value'] < 10000) {
//                 $weight = 2;
//             } elseif ($row['field_agggenerated_value'] >= 10000) {
//                 $weight = 3;
//             }
//         }
        
        $feature[] = array(
            'projection' => 'EPSG:4326',
            'attributes' => array(                            
                'name'=> $title,
                'description'=> $description,
//                 'title' => $title,
//                 'count' => 0,
                'weight' => $weight,
                'color' => $color,//'#000000',
                'data' => $chart, 
//                 'piechartid' => 'pie_' .$i,       
//                 'field_agggenerated' => $field_agggenerated,
//                 'field_aggcompliance' => $field_aggcompliance,
//                 'field_aggart3compliance' => $field_aggart3compliance,
//                 'field_aggart4compliance' => $field_aggart4compliance,
//                 'field_aggart5compliance' => $field_aggart5compliance,
//                 'field_aggart6compliance' => $field_aggart6compliance,            
            ),
            'style' => null, 
            'wkt' => $row['wkt'],  
        );
    }
//     dsm($feature);
    return $feature;    
}

// function uwwtd_build_feature_uwwtp($data)
// {
//     $feature = array();
//     
//     foreach($data as $row) {
// //         $field_agggenerated = "  \n  <span class=\"views-field views-field-field-agggenerated\">    <span class=\"views-label views-label-field-agggenerated\">Generated load (p.e.): </span>    <span class=\"field-content\">"
// //         .$row['agggenerated'].
// //         "</span>  </span>";  
// //         $field_aggcompliance = "\n  <span class=\"views-field views-field-field-aggcompliance\">    <span class=\"views-label views-label-field-aggcompliance\">Compliance: </span>    <span class=\"field-content\">"
// //         .$row['aggcompliance'].
// //         "</span>  </span>";  
// //         $field_aggart3compliance = "\n  <span class=\"views-field views-field-field-aggart3compliance\">    <span class=\"views-label views-label-field-aggart3compliance\">Article 3 compliance: </span>    <span class=\"field-content\">
// //         ".$row['aggart3compliance'].
// //         "</span>  </span>";  
// //         $field_aggart4compliance = "\n  <span class=\"views-field views-field-field-aggart4compliance\">    <span class=\"views-label views-label-field-aggart4compliance\">Article 4 compliance: </span>    <span class=\"field-content\">"
// //         .$row['aggart4compliance'].
// //         "</span>  </span>";  
// //         $field_aggart5compliance = "\n  <span class=\"views-field views-field-field-aggart5compliance\">    <span class=\"views-label views-label-field-aggart5compliance\">Article 5 compliance: </span>    <span class=\"field-content\">"
// //         .$row['aggart5compliance'].
// //         "</span>  </span>";  
// //         $field_aggart6compliance = "\n  <span class=\"views-field views-field-field-aggart6compliance\">    <span class=\"views-label views-label-field-aggart6compliance\">Article 6 compliance: </span>    <span class=\"field-content\">"
// //         .$row['aggart6compliance'].        
// //         "</span>  </span>";
//             
//         $uwwcompliance = "<span class=\"views-field views-field-field-uwwcompliance\">    <span class=\"views-label views-label-field-uwwcompliance\">Compliance: </span>    <span class=\"field-content\">".$GLOBALS['uwwtd']['ui']['field']['compliance_label'][$row['field_uwwcompliance_value']]."</span>  </span>";  
//         $uwwprimarytreatment = "<span class=\"views-field views-field-field-uwwprimarytreatment\">    <span class=\"views-label views-label-field-uwwprimarytreatment\">Primary treatment: </span>    <span class=\"field-content\">".$row['field_uwwprimarytreatment_value']."</span>  </span>";  
//         $uwwsecondarytreatment = "<span class=\"views-field views-field-field-uwwsecondarytreatment\">    <span class=\"views-label views-label-field-uwwsecondarytreatment\">Secondary treatment: </span>    <span class=\"field-content\">".$row['field_uwwsecondarytreatment_value']."</span>  </span>";  
//         $uwwnremoval = "<span class=\"views-field views-field-field-uwwnremoval\">    <span class=\"views-label views-label-field-uwwnremoval\">N-removal: </span>    <span class=\"field-content\">".$row['field_uwwnremoval_value']."</span>  </span>";  
//         $uwwpremoval = "<span class=\"views-field views-field-field-uwwpremoval\">    <span class=\"views-label views-label-field-uwwpremoval\">P-removal: </span>    <span class=\"field-content\">".$row['field_uwwpremoval_value']."</span>  </span>";
//         
//         $physicalcapacityactivity = "<span class=\"views-field views-field-field-physicalcapacityactivity\">    <span class=\"views-label views-label-field-uwwpremoval\">Capacity: </span>    <span class=\"field-content\">".$row['field_physicalcapacityactivity_value']."</span>  </span>";
//         $uwwbod5perf = "<span class=\"views-field views-field-field-uwwbod5perf\">    <span class=\"views-label views-label-field-uwwpremoval\">Performance: BOD5: </span>    <span class=\"field-content\">".$row['field_uwwbod5perf_value']."</span>  </span>";
//         $uwwcodperf = "<span class=\"views-field views-field-field-uwwcodperf\">    <span class=\"views-label views-label-field-uwwpremoval\">Performance: COD: </span>    <span class=\"field-content\">".$row['field_uwwcodperf_value']."</span>  </span>";
//         $uwwntotperf = "<span class=\"views-field views-field-field-uwwntotperf\">    <span class=\"views-label views-label-field-uwwpremoval\">Performance: Total nitrogen: </span>    <span class=\"field-content\">".$row['field_uwwntotperf_value']."</span>  </span>";
//         $uwwptotperf = "<span class=\"views-field views-field-field-uwwptotperf\">    <span class=\"views-label views-label-field-uwwpremoval\">Performance: Total phosphorus: </span>    <span class=\"field-content\">".$row['field_uwwptotperf_value']."</span>  </span>";
//     
//             
//       
//                             //http://webnuxdev.rnde.tm.fr/uwwtd_cy/treatment-plant/cy110_uwwtp/2011
//         $title = l($row['title'], 'treatment-plant/'.strtolower($row['field_inspireidlocalid_value']).'/'.$row['field_anneedata_value'], array('attributes'=>array('target'=>'_blank')));
//         $description = $uwwcompliance . $uwwprimarytreatment . $uwwsecondarytreatment . $uwwnremoval . $uwwpremoval
//         . $physicalcapacityactivity . $uwwbod5perf . $uwwcodperf . $uwwntotperf . $uwwptotperf;
//         ;
//         
//         //here calculate the weight for scaling point
//         //try to get info from database configured on behaviour scale
// //         $weight = 1;
// //         if ($row['agggenerated'] >= 2000 && $row['agggenerated'] < 10000) {
// //             $weight = 2;
// //         } elseif ($row['agggenerated'] >= 10000) {
// //             $weight = 3;
// //         }
//         
//         $feature[] = array(
//             'projection' => 'EPSG:4326',
//             'attributes' => array(                            
//                 'name'=> $title,
//                 'description'=> $description,
// //                 'title' => $title,
// //                 'count' => 0,
// //                 'weight' => $weight,
// //                 'color' => '#000000',
// //                 'field_agggenerated' => $field_agggenerated,
// //                 'field_aggcompliance' => $field_aggcompliance,
// //                 'field_aggart3compliance' => $field_aggart3compliance,
// //                 'field_aggart4compliance' => $field_aggart4compliance,
// //                 'field_aggart5compliance' => $field_aggart5compliance,
// //                 'field_aggart6compliance' => $field_aggart6compliance,            
//             ),
//             'style' => null, 
//             'wkt' => $row['wkt'],  
//         );
//     }
//     return $feature;    
// }

// function uwwtd_build_feature_dcp($data)
// {
//     $feature = array();
//     
//     foreach($data as $row) {
// //         $field_agggenerated = "  \n  <span class=\"views-field views-field-field-agggenerated\">    <span class=\"views-label views-label-field-agggenerated\">Generated load (p.e.): </span>    <span class=\"field-content\">"
// //         .$row['agggenerated'].
// //         "</span>  </span>";  
// //         $field_aggcompliance = "\n  <span class=\"views-field views-field-field-aggcompliance\">    <span class=\"views-label views-label-field-aggcompliance\">Compliance: </span>    <span class=\"field-content\">"
// //         .$row['aggcompliance'].
// //         "</span>  </span>";  
// //         $field_aggart3compliance = "\n  <span class=\"views-field views-field-field-aggart3compliance\">    <span class=\"views-label views-label-field-aggart3compliance\">Article 3 compliance: </span>    <span class=\"field-content\">
// //         ".$row['aggart3compliance'].
// //         "</span>  </span>";  
// //         $field_aggart4compliance = "\n  <span class=\"views-field views-field-field-aggart4compliance\">    <span class=\"views-label views-label-field-aggart4compliance\">Article 4 compliance: </span>    <span class=\"field-content\">"
// //         .$row['aggart4compliance'].
// //         "</span>  </span>";  
// //         $field_aggart5compliance = "\n  <span class=\"views-field views-field-field-aggart5compliance\">    <span class=\"views-label views-label-field-aggart5compliance\">Article 5 compliance: </span>    <span class=\"field-content\">"
// //         .$row['aggart5compliance'].
// //         "</span>  </span>";  
// //         $field_aggart6compliance = "\n  <span class=\"views-field views-field-field-aggart6compliance\">    <span class=\"views-label views-label-field-aggart6compliance\">Article 6 compliance: </span>    <span class=\"field-content\">"
// //         .$row['aggart6compliance'].        
// //         "</span>  </span>";
//         
//                             //http://webnuxdev.rnde.tm.fr/uwwtd_cy/discharge-point/cy11_1-dispoint/2011
//         $title = l($row['title'], 'discharge-point/'.strtolower($row['field_inspireidlocalid_value']).'/'.$row['field_anneedata_value'], array('attributes'=>array('target'=>'_blank')));
//         $description = '';//$field_agggenerated . $field_aggcompliance . $field_aggart3compliance . $field_aggart4compliance . $field_aggart5compliance . $field_aggart6compliance;
//         
//         //here calculate the weight for scaling point
//         //try to get info from database configured on behaviour scale
// //         $weight = 1;
// //         if ($row['agggenerated'] >= 2000 && $row['agggenerated'] < 10000) {
// //             $weight = 2;
// //         } elseif ($row['agggenerated'] >= 10000) {
// //             $weight = 3;
// //         }
//         
//         $feature[] = array(
//             'projection' => 'EPSG:4326',
//             'attributes' => array(                            
//                 'name'=> $title,
//                 'description'=> $description,
// //                 'title' => $title,
// //                 'count' => 0,
// //                 'weight' => $weight,
// //                 'color' => '#000000',
// //                 'field_agggenerated' => $field_agggenerated,
// //                 'field_aggcompliance' => $field_aggcompliance,
// //                 'field_aggart3compliance' => $field_aggart3compliance,
// //                 'field_aggart4compliance' => $field_aggart4compliance,
// //                 'field_aggart5compliance' => $field_aggart5compliance,
// //                 'field_aggart6compliance' => $field_aggart6compliance,            
//             ),
//             'style' => null, 
//             'wkt' => $row['wkt'],  
//         );
//     }
//     return $feature;    
// }

function uwwtd_build_map($map, $features) {
  // Get map preset
//   $preset = openlayers_preset_load($preset_name);
//   dsm($map);
//   $map = openlayers_build_map($preset->data);
 //dsm($map);
  //dsm($map_type);
  //On active la couche "$map_type"
//   if($map_type && isset($map['layer_activated'][$map_type])){
//     $map['layer_activated'][$map_type] = $map_type;
//   }
  
//   if (!isset($map['layers']['geofield_formatter'])) {
//     drupal_set_message(t('Trying to render a geofield formatter on a map without the placeholder layer'), 'error');
//   }

  // Add the features to the placeholder layer
//   $map['layers'][$overlay] = $map['layers']['waste_water_network_openlayers_3'];
//   dsm($features);
//   return '';
// dsm($map);
// return '';
  foreach($features as $overlay => $feature) {
      if (!isset($map['layers'][$overlay])) {
        drupal_set_message(t('Trying to render a overlay ' . $overlay . ' on a map without the placeholder layer'), 'error');
      }  
    $map['layers'][$overlay]['features'] = $feature;
  }

  // Return themed map if no errors found
  if (empty($map['errors'])) {
    $js = array('openlayers' => array('maps' => array($map['id'] => $map)));
//     drupal_add_js($js, 'setting');
//     drupal_add_js($js,'jQuery.extend(Drupal.settings,'.json_encode($js).')', 'inline');
    //put js in html output in order to put all block in cache
    $output = 
    '<script>jQuery.extend(Drupal.settings,'.json_encode($js).');</script>'.
    '<div class="view-content">
    <div class="openlayers-views-map">'.
    theme('openlayers_map', array(
      'map' => $map,
      'map_name' => $map['map_name'],
    ))
    .'</div></div>'
    ;
  }
  
  return $output;
}

function uwwtd_get_all_year() 
{
    $year = array();
	$query = "SELECT field_anneedata_value FROM {field_data_field_anneedata} group by field_anneedata_value";
    $result = db_query($query);
	while($record = $result->fetchAssoc()) {
		$year[$record['field_anneedata_value']] = $record['field_anneedata_value'];
	}
    return $year;
}

function uwwtd_filter_form($list_field, $filter)
{
// $GLOBALS['uwwtd']['ui']['compliance'] = array(
//     'All' => '- Any -',
//     'NI' => 'No information',
//     'NR' => 'Not relevant',
//     'NC' => 'Not compliant',
//     'C' => 'Compliants',
//     '?' => '?',
// );
// $GLOBALS['uwwtd']['ui']['operator'] = array(
//     '<' => 'Is less than',
//     '<=' => 'Is less than or equal to',
//     '=' => 'Is equal to',
//     '!=' => 'Is not equal to',
//     '>=' => 'Is greater than or equal to',
//     '>' => 'Is greater than',
// );

// $listyear = uwwtd_get_all_year();
// // dsm($listyear);
// //     return '';
// $list_field = array(
//     'field_anneedata_value'         => array('title' => 'Year of data', 'type' => 'select', 'data' => $listyear),        
//     'field_agggenerated_value'      => array('title' => 'Generated load (p.e.)', 'type' => 'selectoperator', 'data' => $GLOBALS['uwwtd']['ui']['operator']),
//     'field_aggcompliance_value'     => array('title' => 'Compliance', 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['compliance']),
//     'field_aggart3compliance_value' => array('title' => 'Article 3 compliance', 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['compliance']),
//     'field_aggart4compliance_value' => array('title' => 'Article 4 compliance', 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['compliance']),
//     'field_aggart5compliance_value' => array('title' => 'Article 5 compliance', 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['compliance']),
//     'field_aggart6compliance_value' => array('title' => 'Article 6 compliance', 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['compliance']),
// );   

$render_field = '';
foreach($list_field as $field_name => $data) {
    $render_field .= '<div class="views-exposed-widget views-widget-filter-'.$field_name.'" id="edit-field-'.$field_name.'-wrapper">
    <label for="edit-'.$field_name.'">
    '.$data['title'].'     
    </label>
    ';
        switch($data['type']) {
            case 'selectoperator':
                 $render_field .= '<div class="views-operator">
                    <div class="form-type-select form-item-'.$field_name.'-op form-item form-group">
                        <select name="'.$field_name.'_op" id="edit-'.$field_name.'-op" class="form-control form-select">';
                        foreach($data['data'] as $operator => $label) {
                            $selected = "";
                            if (isset($filter['filter'][$field_name.'_op']) && $filter['filter'][$field_name.'_op'] == $operator) {
                                $selected = 'selected="selected"';
                            }                        
                            $render_field .= '<option value="'.htmlspecialchars($operator).'" '. $selected . '>'.$label.'</option>';
                        }
//                         <option value="&lt;=">Is less than or equal to</option>
//                         <option selected="selected" value="=">Is equal to</option>
//                         <option value="!=">Is not equal to</option>
//                         <option value="&gt;=">Is greater than or equal to</option>
//                         <option value="&gt;">Is greater than</option>
//                         <!--
//                         <option value="between">Is between</option>
//                         <option value="not between">Is not between</option>
//                         <option value="empty">Is empty (NULL)</option>
//                         <option value="not empty">Is not empty (NOT NULL)</option>
//                         -->
                        $render_field .= '</select>
                    </div>
                </div>
                <div class="views-widget">
                    <div class="form-type-textfield form-item-'.$field_name.'-value form-item form-group" style="display: block;">
                        <input type="text" maxlength="128" size="30" value="';
                        
                        if (isset($filter['filter'][$field_name]['value']) && $filter['filter'][$field_name]['value']) {
                            $render_field .= $filter['filter'][$field_name]['value'];
                        }                           
                        
                        $render_field .= '" name="'.$field_name.'[value]" id="edit-'.$field_name.'-value" class="form-control form-text">
                    </div>
                    <!--
                    <div class="form-type-textfield form-item-'.$field_name.'-min form-item form-group" style="display: none;">
                        <input type="text" maxlength="128" size="30" value="" name="'.$field_name.'[min]" id="edit-'.$field_name.'-min" class="form-control form-text">
                    </div>
                    <div class="form-type-textfield form-item-'.$field_name.'-max form-item form-group" style="display: none;">
                        <label for="edit-'.$field_name.'-max">And </label>
                        <input type="text" maxlength="128" size="30" value="" name="'.$field_name.'[max]" id="edit-'.$field_name.'-max" class="form-control form-text">
                    </div>
                    -->
                </div>';                   
                break;                 
            case 'select':
//             case 'field_aggcompliance_value':
//             case 'field_aggart3compliance_value':
//             case 'field_aggart4compliance_value':
//             case 'field_aggart5compliance_value':
//             case 'field_aggart6compliance_value':
                $render_field .= '<div class="views-widget">
                    <div class="form-type-select form-item-'.$field_name.' form-item form-group">                
                    <select name="'.$field_name.'" id="edit-'.$field_name.'" class="form-control form-select">
                    ';
                foreach($data['data'] as $key => $value) {
                    $selected = "";
//                     dsm($filter['filter'][$field_name]);
//                     dsm($key);
                    if (isset($filter['filter'][$field_name]) && $filter['filter'][$field_name] == $key) {
//                         dsm('find');
                        $selected = 'selected="selected"';
                    }
                    $render_field .= '<option  value="'.$key.'" '.$selected.'>'.$value.'</option>';
                }
                $render_field .= '</select></div>
                </div>';
                break;
              
        }
    $render_field .= '
    </div>';    
}
  
    return '<div class="view-filters">
<form accept-charset="UTF-8" id="views-exposed-form-agglomeration-conformity-page" method="get" action="">
<div>
<div class="views-exposed-form">
<div class="views-exposed-widgets clearfix">

'. $render_field . '

<div class="views-exposed-widget views-submit-button">
    <button class="btn btn-info form-submit" type="submit" value="Apply" name="" id="edit-submit-agglomeration-conformity">Apply</button>
</div>
<div class="views-exposed-widget views-reset-button">
    <button class="btn btn-default form-submit" type="submit" value="Reset" name="op" id="edit-reset">Reset</button>
</div>

</div>
</div>
</div>
</form>  
</div>';     
}

function uwwtd_get_form_filter($option)
{
    //check if we must reset
    if (isset($_GET['op']) && $_GET['op'] == 'Reset') {
        drupal_goto(request_path());
    }

    $filter = array();
    
    if (isset($_GET['field_anneedata_value']) && in_array($_GET['field_anneedata_value'], $option['allyear'])) {
        $filter['filter']['field_anneedata_value'] = $_GET['field_anneedata_value'];
    } else {
        $filter['filter']['field_anneedata_value'] = uwwtd_get_max_annee();
    }
    if (isset($_GET['field_agggenerated_value_op']) && in_array($_GET['field_agggenerated_value_op'], array_keys($GLOBALS['uwwtd']['ui']['operator'])) 
        && isset($_GET['field_agggenerated_value']['value']) 
        && '' != ($_GET['field_agggenerated_value']['value'] = trim($_GET['field_agggenerated_value']['value']))
        && ctype_digit($_GET['field_agggenerated_value']['value'])
//         && !empty($_GET['field_agggenerated_value']['value'])
        ) {
        $filter['filter']['field_agggenerated_value_op'] = $_GET['field_agggenerated_value_op'];
        $filter['filter']['field_agggenerated_value']['value'] = (int)$_GET['field_agggenerated_value']['value'];
    }
    
    
    if (isset($_GET['field_aggcompliance_value']) && in_array($_GET['field_aggcompliance_value'],  array_keys($GLOBALS['uwwtd']['ui']['compliance'])) 
        && $_GET['field_aggcompliance_value'] != 'All') {
        $filter['filter']['field_aggcompliance_value'] = $_GET['field_aggcompliance_value'];
    }  
    

    if (isset($_GET['field_aggart3compliance_value']) && in_array($_GET['field_aggart3compliance_value'],  array_keys($GLOBALS['uwwtd']['ui']['compliance']))  
        && $_GET['field_aggart3compliance_value'] != 'All') {
        $filter['filter']['field_aggart3compliance_value'] = $_GET['field_aggart3compliance_value'];
    } 

    if (isset($_GET['field_aggart4compliance_value']) && in_array($_GET['field_aggart4compliance_value'],  array_keys($GLOBALS['uwwtd']['ui']['compliance']))  
        && $_GET['field_aggart4compliance_value'] != 'All') {
        $filter['filter']['field_aggart4compliance_value'] = $_GET['field_aggart4compliance_value'];
    } 
    
    if (isset($_GET['field_aggart5compliance_value'])  && in_array($_GET['field_aggart5compliance_value'],  array_keys($GLOBALS['uwwtd']['ui']['compliance'])) 
        && $_GET['field_aggart5compliance_value'] != 'All') {
        $filter['filter']['field_aggart5compliance_value'] = $_GET['field_aggart5compliance_value'];
    } 
    
    if (isset($_GET['field_aggart6compliance_value']) && in_array($_GET['field_aggart6compliance_value'],  array_keys($GLOBALS['uwwtd']['ui']['compliance']))  
        && $_GET['field_aggart6compliance_value'] != 'All') {
        $filter['filter']['field_aggart6compliance_value'] = $_GET['field_aggart6compliance_value'];
    } 

    //agglo/treatment
    if (isset($_GET['field_aggc2_value_op']) && in_array($_GET['field_aggc2_value_op'], array_keys($GLOBALS['uwwtd']['ui']['operator']))  
        && isset($_GET['field_aggc2_value']['value'])         
        && '' != ($_GET['field_aggc2_value']['value'] = trim($_GET['field_aggc2_value']['value']))
        && ctype_digit($_GET['field_aggc2_value']['value'])
//         && !empty($_GET['field_aggc2_value']['value'])
        ) {
        $filter['filter']['field_aggc2_value_op'] = $_GET['field_aggc2_value_op'];
        $filter['filter']['field_aggc2_value']['value'] = (int)$_GET['field_aggc2_value']['value'];
    }

    if (isset($_GET['field_aggc1_value_op']) && in_array($_GET['field_aggc1_value_op'], array_keys($GLOBALS['uwwtd']['ui']['operator']))  
        && isset($_GET['field_aggc1_value']['value'])         
        && '' != ($_GET['field_aggc1_value']['value'] = trim($_GET['field_aggc1_value']['value']))
        && ctype_digit($_GET['field_aggc1_value']['value']) 
//         && !empty($_GET['field_aggc1_value']['value'])
        ) {
        $filter['filter']['field_aggc1_value_op'] = $_GET['field_aggc1_value_op'];
        $filter['filter']['field_aggc1_value']['value'] = (int)$_GET['field_aggc1_value']['value'];
    }

    if (isset($_GET['field_aggpercwithouttreatment_value_op']) && in_array($_GET['field_aggpercwithouttreatment_value_op'], array_keys($GLOBALS['uwwtd']['ui']['operator']))  
        && isset($_GET['field_aggpercwithouttreatment_value']['value'])         
        && '' != ($_GET['field_aggpercwithouttreatment_value']['value'] = trim($_GET['field_aggpercwithouttreatment_value']['value']))
        && ctype_digit($_GET['field_aggpercwithouttreatment_value']['value']) 
//         && !empty($_GET['field_aggpercwithouttreatment_value']['value'])
        ) {
        $filter['filter']['field_aggpercwithouttreatment_value_op'] = $_GET['field_aggpercwithouttreatment_value_op'];
        $filter['filter']['field_aggpercwithouttreatment_value']['value'] = (int)$_GET['field_aggpercwithouttreatment_value']['value'];
    } 
    

    if (isset($_GET['field_uwwloadenteringuwwtp_value_op']) && in_array($_GET['field_uwwloadenteringuwwtp_value_op'], array_keys($GLOBALS['uwwtd']['ui']['operator']))  
        && isset($_GET['field_uwwloadenteringuwwtp_value']['value']) 
        && '' != ($_GET['field_uwwloadenteringuwwtp_value']['value'] = trim($_GET['field_uwwloadenteringuwwtp_value']['value']))
        && ctype_digit($_GET['field_uwwloadenteringuwwtp_value']['value'])         
//         && !empty($_GET['field_uwwloadenteringuwwtp_value']['value'])
        ) {
        $filter['filter']['field_uwwloadenteringuwwtp_value_op'] = $_GET['field_uwwloadenteringuwwtp_value_op'];
        $filter['filter']['field_uwwloadenteringuwwtp_value']['value'] = (int)$_GET['field_uwwloadenteringuwwtp_value']['value'];
    } 
        
    if (isset($_GET['field_uwwcompliance_value']) && in_array($_GET['field_uwwcompliance_value'],  array_keys($GLOBALS['uwwtd']['ui']['compliance'])) 
        && $_GET['field_uwwcompliance_value'] != 'All') {
        $filter['filter']['field_uwwcompliance_value'] = $_GET['field_uwwcompliance_value'];
    } 
    
    if (isset($_GET['field_uwwbod5perf_value']) && in_array($_GET['field_uwwbod5perf_value'], array_keys($GLOBALS['uwwtd']['ui']['test_pass'])) 
        && $_GET['field_uwwbod5perf_value'] != 'All') {
        $filter['filter']['field_uwwbod5perf_value'] = $_GET['field_uwwbod5perf_value'];
    } 
    
    if (isset($_GET['field_uwwcodperf_value']) && in_array($_GET['field_uwwcodperf_value'], array_keys($GLOBALS['uwwtd']['ui']['test_pass'])) 
        && $_GET['field_uwwcodperf_value'] != 'All') {
        $filter['filter']['field_uwwcodperf_value'] = $_GET['field_uwwcodperf_value'];
    } 
    
    if (isset($_GET['field_uwwntotperf_value']) && in_array($_GET['field_uwwntotperf_value'], array_keys($GLOBALS['uwwtd']['ui']['test_pass'])) 
        && $_GET['field_uwwntotperf_value'] != 'All') {
        $filter['filter']['field_uwwntotperf_value'] = $_GET['field_uwwntotperf_value'];
    } 
    
    if (isset($_GET['field_uwwptotperf_value']) && in_array($_GET['field_uwwptotperf_value'], array_keys($GLOBALS['uwwtd']['ui']['test_pass'])) 
        && $_GET['field_uwwptotperf_value'] != 'All') {
        $filter['filter']['field_uwwptotperf_value'] = $_GET['field_uwwptotperf_value'];
    } 
    
    if (isset($_GET['field_uwwtreatmenttype_value']) && in_array($_GET['field_uwwtreatmenttype_value'], array_keys($GLOBALS['uwwtd']['ui']['treatment_type_in_place']))  
        && $_GET['field_uwwtreatmenttype_value'] != 'All') {
        $filter['filter']['field_uwwtreatmenttype_value'] = $_GET['field_uwwtreatmenttype_value'];
    }  
    
    //uwwtps/treatment
    if (isset($_GET['field_uwwprimarytreatment_value']) && in_array($_GET['field_uwwprimarytreatment_value'], array_keys($GLOBALS['uwwtd']['ui']['yes_no'])) 
        && $_GET['field_uwwprimarytreatment_value'] != 'All') {
        $filter['filter']['field_uwwprimarytreatment_value'] = $_GET['field_uwwprimarytreatment_value'];
    } 
    
    if (isset($_GET['field_uwwsecondarytreatment_value']) && in_array($_GET['field_uwwsecondarytreatment_value'], array_keys($GLOBALS['uwwtd']['ui']['yes_no'])) 
        && $_GET['field_uwwsecondarytreatment_value'] != 'All') {
        $filter['filter']['field_uwwsecondarytreatment_value'] = $_GET['field_uwwsecondarytreatment_value'];
    } 
    
    if (isset($_GET['field_uwwnremoval_value']) && in_array($_GET['field_uwwnremoval_value'], array_keys($GLOBALS['uwwtd']['ui']['yes_no'])) 
        && $_GET['field_uwwnremoval_value'] != 'All') {
        $filter['filter']['field_uwwnremoval_value'] = $_GET['field_uwwnremoval_value'];
    } 
    
    if (isset($_GET['field_uwwpremoval_value']) && in_array($_GET['field_uwwpremoval_value'], array_keys($GLOBALS['uwwtd']['ui']['yes_no'])) 
        && $_GET['field_uwwpremoval_value'] != 'All') {
        $filter['filter']['field_uwwpremoval_value'] = $_GET['field_uwwpremoval_value'];
    }                 
                                                                              

    if (isset($_GET['order']) && in_array($_GET['order'], $option['order'])) {
        $filter['order'] = $_GET['order'];
        if (isset($_GET['sort']) && in_array($_GET['sort'], array('asc', 'desc'))) {
            $filter['sort'] = $_GET['sort'];
        } else {
            $filter['sort'] = 'asc';
        }                    
    } else {
        $filter['order'] = $option['default']['order'];
        $filter['sort'] = $option['default']['sort'];    
    }
  
    return $filter;        
}

function uwwtd_filter_data($filter, &$data)
{
//     dsm($filter);
    //no need to treat annee, already filter by request
    unset($filter['filter']['field_anneedata_value']);
    //get field with operator
    $list_operator_field = array();
    foreach($filter['filter'] as $field_op => $operator) {
        if (substr($field_op, -3) == '_op') {
            $field_name_value = substr($field_op, 0, strlen($field_op) -3);
            $list_operator_field[] = array(
                'field' => $field_name_value,
                'op' => $operator,
                'value' => $filter['filter'][$field_name_value]['value'],
            );
            unset($filter['filter'][$field_op], $filter['filter'][$field_name_value]);
        }
    }
//     dsm($list_operator_field);
//     if (isset($filter['filter']['field_agggenerated_value_op'])) {
//         $field_agggenerated_value_op = $filter['filter']['field_agggenerated_value_op'];
//         $field_agggenerated_value = $filter['filter']['field_agggenerated_value']['value'];
//         unset($filter['filter']['field_agggenerated_value_op'], $filter['filter']['field_agggenerated_value']);
//     }
//     dsm($filter);
    $datafilter = array();
    foreach($data as $row) {
//         dsm($row);
        $keepRow = true;
        foreach($filter['filter'] as $field => $value) {
            if ($row[$field] != $value) {
                $keepRow = false;
                break;
            }
        }
        if ($keepRow == true) {
            foreach($list_operator_field as $one_operator) {
    
    //             if ($keepRow == true) {
        //             dsm($field_agggenerated_value_op);
        //             dsm($field_agggenerated_value);
        //             dsm($row['field_agggenerated_value']);        
        //             dsm($row);
                $keepRow = $GLOBALS['uwwtd']['ui']['operatorfunction'][ $one_operator['op'] ]($row[ $one_operator['field'] ], $one_operator['value']);
        //             dsm($keepRow);     
    //             }
                if ($keepRow == false) {
                    break;
                }
            }
        }
        
        if ($keepRow == true) {
//             dsm('ici');
            $datafilter[] = $row;
        } 
    }
//     unset($data);
    $data = $datafilter;
//     dsm($data);
}
                                                
function uwwtd_sort_data($filter, $order, &$data)
{
//     dsm(__FUNCTION__);
    //get field to sort
    if (isset($filter['order'])) {
        $fieldname =  array_search($filter['order'], $order);
//         dsm($fieldname);
        if (false === $fieldname) {
            return;
        }
        $GLOBALS['uwwtd']['ui']['sortfield'] = $fieldname; 
        usort($data, $GLOBALS['uwwtd']['ui']['sort'][$filter['sort']]);        
    }
}


function uwwtd_page_agglomeration_connection()
{
    $title = 'Agglomeration connection map and list';
    drupal_set_title($title);

    $option = array();
    $option['order'] = $GLOBALS['uwwtd']['ui']['field']['agglomeration_treatment'];
    $option['default']['order'] = $GLOBALS['uwwtd']['ui']['field']['agglomeration_treatment']['field_agggenerated_value'];
    $option['default']['sort'] = 'desc';  
    $option['allyear'] = uwwtd_get_all_year();
    $filter = uwwtd_get_form_filter($option);
    
    $preset_name = 'agglomeration';   //layer agglomeration_treatment 'Agglomeration connection map and list'
    $preset = openlayers_preset_load($preset_name);
    $map    = openlayers_build_map($preset->data);
    
    $cache = '';
    $cache_name = uwwtd_get_cache_key_page_agglo_treatment($filter['filter']);    
//     dsm($filter);
    //use cache only for page with no filter , or only the year and default sort
    $put_in_cache = uwwtd_is_filter_default($filter, $option) && uwwtd_is_user_anonymous();             
    if (UWWTD_CACHE_ACTIVE === true && true === $put_in_cache) {                                    
        $cache = cache_get($cache_name, 'cache_page');
    }
    if (!empty($cache) && isset($cache->data) && !empty($cache->data)) {
//         dsm('in cache');
//         $render_graph_nb = theme('flot_graph', $cache->data['flot1']);
        $render_graph = theme('flot_graph', $cache->data['flot1']);        
        return $cache->data['page'];
    }
//     dsm('not in cache');    
    
//     $listyear = ();
    // dsm($listyear);
    //     return '';
    $list_field = array(
        'field_anneedata_value'         => array('title' => 'Year of data', 'type' => 'select', 'data' => $option['allyear']),        
        'field_agggenerated_value'      => array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration_treatment']['field_agggenerated_value'], 'type' => 'selectoperator', 'data' => $GLOBALS['uwwtd']['ui']['operator']),
        'field_aggc2_value'             => array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration_treatment']['field_aggc2_value'], 'type' => 'selectoperator', 'data' => $GLOBALS['uwwtd']['ui']['operator']),
        'field_aggc1_value'             => array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration_treatment']['field_aggc1_value'], 'type' => 'selectoperator', 'data' => $GLOBALS['uwwtd']['ui']['operator']),
        'field_aggpercwithouttreatment_value'      => array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration_treatment']['field_aggpercwithouttreatment_value'], 'type' => 'selectoperator', 'data' => $GLOBALS['uwwtd']['ui']['operator']),
    ); 

    $form = uwwtd_filter_form($list_field, $filter);
    
    $data = uwwtd_get_data_agglomeration($filter['filter']);
    
    uwwtd_filter_data($filter, $data);
//     dsm($data);
    $header  =array();
    foreach($GLOBALS['uwwtd']['ui']['field']['agglomeration_treatment'] as $field => $name) {
        $header[] = array(
            'data' => $name,
            'field' => $field,
        );
        
        //set default sort if none exists
//         if (false === isset($filter['sort']) && $field == 'field_agggenerated_value') {
        if ($filter['order'] == $name) {
            $header[count($header)-1]['sort'] = $filter['sort'];
        }        
    }
//     dsm($header);
    uwwtd_sort_data($filter, $GLOBALS['uwwtd']['ui']['field']['agglomeration_treatment'], $data);    

//     $preset_name = 'agglomeration';   //layer agglomeration_treatment 'Agglomeration connection map and list'
// //     $preset_name = 'agg_compliance_map';
//     $preset = openlayers_preset_load($preset_name);
    $optionstyle = array();
    //get the color for the point 
//     $optionstyle['color']['list'] = uwwtd_get_point_color_from_preset($preset); 
//     $optionstyle['color']['field'] = 'field_aggcompliance_value_format';
    //get the size of the point
    $optionstyle['weight']['list'] = uwwtd_get_point_size_from_preset($preset, 'openlayers_plus_behavior_piechart');
    $optionstyle['weight']['field'] = 'field_agggenerated_value';
    
        
    //todo get tis value from database!
//     $optionstyle = array();
//     $optionstyle['weight'] = $GLOBALS['uwwtd']['ui']['pe_weight'];
//     $optionstyle['weight']['list'] = $GLOBALS['uwwtd']['ui']['pe_weight'];
//     $optionstyle['weight']['field'] = 'field_agggenerated_value';       
//     array(
//       1 =>  2000,
//       2 =>  10000,
//       3 =>  150000,
//       4 =>  0,    
//     );
    //todo get tis value from database!
    //todo : get field name for database NC => not compliant ...
        //pie    
    $optionstyle['piechart'] = wwtd_get_piechart_from_preset($preset, 'openlayers_plus_behavior_piechart');


    
//     $optionstyle['piechart'] = array(
//         'field_aggc1_value' => array(
//             'label' => 'Collective system',
//             'color' => '#74FFE0',
//         ),
//         'field_aggc2_value' => array(
//             'label' => 'Individual and Appropriate Systems (IAS)',
//             'color' => '#BD8842',
//         ),
//         'field_aggpercwithouttreatment_value' => array(
//             'label' => 'Discharge without treatment',
//             'color' => '#C00000',
//         ),                
//     );        
            
//     $optionstyle['popup_title_type'] = 'treatment-plant';
//     $optionstyle['popup_title_type'] = 'discharge-pointt';
    $optionstyle['popup_title_type'] = 'agglomeration';            
    $optionstyle['popup'] = array(
        'field_agggenerated_value_format' => array('label' => 'Generated load (p.e.)'),
        'field_aggcompliance_value_format' => array('label' => 'Compliance'),
        'field_aggart3compliance_value_format' => array('label' => 'Article 3 compliance'),
        'field_aggart4compliance_value_format' => array('label' => 'Article 4 compliance'),
        'field_aggart5compliance_value_format' => array('label' => 'Article 5 compliance'),
//         'field_aggart6compliance_value' => array('label' => 'Article 6 compliance'),
        'field_aggc1_value_format' => array('label' => 'Collective system'),
        'field_aggc2_value_format' => array('label' => 'Individual and Appropriate Systems (IAS)'),
        'field_aggpercwithouttreatment_value_format' => array('label' => 'Discharge without treatment'),
    );                                    
//     dsm($optionstyle);            

                     
    //todo format data in table
    $graph = array();
    $piechart = '';
    $i=0;   
//     dsm($map);
    foreach($data as $row) {

        if (false === isset($graph['field_aggc2_value'])) {
            $field_agggenerated_value = 0;
//             $graph['field_aggc2_value']['nb'] = 0;
            $graph['field_aggc2_value']['value'] = 0;
//             $graph['field_aggc2_value']['label'] = 'TODO';  
//             $graph['field_aggc1_value']['nb'] = 0;
            $graph['field_aggc1_value']['value'] = 0;
//             $graph['field_aggc1_value']['label'] = 'TODO';   
//             $graph['field_aggpercwithouttreatment_value']['nb'] = 0;
            $graph['field_aggpercwithouttreatment_value']['value'] = 0;
//             $graph['field_aggpercwithouttreatment_value']['label'] = 'TODO';                                    
        }
//         $graph[$row['field_aggcompliance_value']]['nb']++;
//         $graph[$row['field_aggcompliance_value']]['field_agggenerated_value'] += $row['field_agggenerated_value'];
        $field_agggenerated_value   += $row['field_agggenerated_value'];
        $graph['field_aggc2_value']['value'] += $row['field_aggc2_value'] / 100  * $row['field_agggenerated_value'];
        $graph['field_aggc1_value']['value'] += $row['field_aggc1_value'] / 100  * $row['field_agggenerated_value'];
        $graph['field_aggpercwithouttreatment_value']['value'] += $row['field_aggpercwithouttreatment_value'] / 100  * $row['field_agggenerated_value'];
        
        //format data
//         $row['field_agggenerated_value'] = uwwtd_format_number($row['field_agggenerated_value']);
//         $row['field_aggc2_value'] = uwwtd_format_number($row['field_aggc2_value'], 2);
//         $row['field_aggc1_value'] = uwwtd_format_number($row['field_aggc1_value'], 2);              
//         $row['field_aggpercwithouttreatment_value'] = uwwtd_format_number($row['field_aggpercwithouttreatment_value'], 2);
        $rows[] = array('data' => array(
                                        //$row['title'],
                                        l($row['title'], uwwtd_get_url_path($optionstyle['popup_title_type'], array(strtolower($row['field_inspireidlocalid_value']), $row['field_anneedata_value']))),
                                        $row['field_inspireidlocalid_value'],
                                        $row['field_agggenerated_value_format'],
                                        $row['field_regionnuts_value'],
                                        $row['field_aggc2_value_format'],
                                        $row['field_aggc1_value_format'],
                                        $row['field_aggpercwithouttreatment_value_format'],
                                    ));
        $i++;                            
        //build html for piechart 
         
//         $size = 2 * $map['behaviors']['openlayers_plus_behavior_piechart']['styles']['1']['pointRadius'];
// //         dsm($map['behaviors']); 
//         $piechart .=     '<svg id="pie_'.$i.'" cx="651.0175999995845" cy="389.9091049244453" r="1" viewBox="0 0 '.$size.' '.$size.'" width="'.$size.'" height="'.$size.'" x="644.2675999995845" y="383.1591049244453" fill="#888888" fill-opacity="0.8" stroke="#222222" stroke-opacity="0.7" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" pointer-events="visiblePainted">
//             <g transform="translate(6.75,6.75)">
//                 <g class="arc">
//                 <path d="M4.133182947122317e-16,-6.75A6.75,6.75 0 1,1 -6.630438942418649,1.2648238734536408L0,0Z" style="fill: rgb(116, 255, 224); stroke: rgb(34, 34, 34); opacity: 0.8; stroke-width: 1;"/>
//                 </g>
//                 <g class="arc">
//                 <path d="M-6.630438942418649,1.2648238734536408A6.75,6.75 0 0,1 -3.8986157481003065,-5.510289942340991L0,0Z" style="fill: rgb(189, 136, 66); stroke: rgb(34, 34, 34); opacity: 0.8; stroke-width: 1;"/>
//                 </g>
//                 <g class="arc">
//                 <path d="M-3.8986157481003065,-5.510289942340991A6.75,6.75 0 0,1 -1.239954884136695e-15,-6.75L0,0Z" style="fill: rgb(192, 0, 0); stroke: rgb(34, 34, 34); opacity: 0.8; stroke-width: 1;"/>
//                 </g>
//             </g>                
//             </svg>';     
                                                      
    }
//     dsm($rows);
    //calculate % of each field
//     if (isset($field_agggenerated_value)) {
    $graph['field_aggc2_value']['percent'] = $graph['field_aggc2_value']['value'] * 100 / $field_agggenerated_value;
    $graph['field_aggc1_value']['percent'] = $graph['field_aggc1_value']['value'] * 100 / $field_agggenerated_value;
    $graph['field_aggpercwithouttreatment_value']['percent'] = $graph['field_aggpercwithouttreatment_value']['value'] * 100 / $field_agggenerated_value;
//     }
            
    $features['agglomeration_treatment'] = uwwtd_build_feature($data, $optionstyle);
//     dsm($features['agglomeration_treatment']);
//     unset($data); 
   
    $rendermap = uwwtd_build_map($map, $features);
    unset($features);

//  f_annee.field_anneedata_value,              
//  f_aggcode.field_inspireidlocalid_value,                        
//  f_agggenerated.field_agggenerated_value,
//  f_art3.field_aggart3compliance_value,       
//  f_art4.field_aggart4compliance_value,       
//  f_art5.field_aggart5compliance_value,       
//  f_art6.field_aggart6compliance_value,       
//  f_comp.field_aggcompliance_value,           
//  f_nuts.field_regionnuts_value,     
    unset($data);
    $data_pie = array();
    $xaxis = array();   
    $i = 0; 
    foreach($graph as $field => $detail) {
        $d1 = new flotData($detail['value']);
        $d1->label = $GLOBALS['uwwtd']['ui']['field']['agglomeration_treatment'][$field];//$detail['label'];        
        $d1->color = $optionstyle['piechart'][$field]['color'];//$detail['label'];
        $data_pie[] = $d1;
//         $xaxis[] = array($i++, $GLOBALS['uwwtd']['ui']['field']['agglomeration_treatment'][$field]);
    }
   
    $options = new flotStylePie();
//     $options->axis_range('yaxis', array(null,100), 4);
//     $options->axis_ticks('xaxis', $xaxis);
    $options->legend  =new StdClass();
    $options->legend->show = true;
    $options->legend->position = "ne";
    $options->resize = true;
    $options->legend->labelFormatter = 'uwwtd_labelformaterpie_legend'; 
    $options->series->pie->label->formatter = 'uwwtd_labelformaterpie';
    //!!//custom for replace string by callback in module flot...//!!//
    $options->replace = new StdClass(); 
    $options->replace->transform_on_callback = array($options->legend->labelFormatter, $options->series->pie->label->formatter);
    //!!//custom for replace string by callback in module flot...//!!//       
    
    $variables = array(
        'data' => $data_pie,
        'element' => array(
            'id' => 'flot-auto-identifier-1',
            'style' => 'width: 500px; height: 200px; padding: 0px; position: relative;',
        ),       
//         'legend' => TRUE,
//         'zoom' => false,     
        'options' => clone $options, 
    );

//     $render_graph = theme('flot_graph', $variables);
 
//     'field_aggc2_value'       =>  t('IAS (% of p.e.)'),
//     'field_aggc1_value'   =>  t('Collective system (% of p.e.) '),
//     'field_aggpercwithouttreatment_value'   =>  t('Not addressed through IAS (% of p.e.)'),
     
 
    $render_table_graph = '

    <table id="views-aggregator-datatable" class="views-table cols-2" style="width: 500px; ">
    <thead>
    <tr>
        <th class="views-field views-field-field_aggc1_value" style="padding: 5px;">
        Collective system (% of p.e.)            
        </th>    
        <th class="views-field views-field-field_aggc2_value" style="padding: 5px;">
        IAS (% of p.e.)
        </th>
        <th class="views-field views-field-field_aggpercwithouttreatment_value" style="padding: 5px;">
        Not addressed through IAS (% of p.e.)            
        </th>        
    </tr>
    </thead>
    <tbody>
        <tr>
            <td class="views-field" style="border-right: 1px solid #dddddd; padding: 5px;">
            ' . uwwtd_format_number($graph['field_aggc2_value']['percent'], 2) . ' %          
            </td>
            <td class="views-field" style="border-right: 1px solid #dddddd; padding: 5px;">
            ' . uwwtd_format_number($graph['field_aggc1_value']['percent'], 2) . ' % 
            </td>
            <td class="views-field" style="border-right: 1px solid #dddddd; padding: 5px;">
            ' . uwwtd_format_number($graph['field_aggpercwithouttreatment_value']['percent'], 2) . ' % 
            </td>            
        </tr>    
    </tbody>
    </table>
 
      ';
//       $i = 0;
//       $total = 0;
//     $render_table_graph .= '<tr class="odd views-row-first">';
//       foreach($graph as $field => $detail) {
//         
//             $render_table_graph .= '<td class="views-field views-field-'.$field.'">
//             ' . $detail['percent']. '          
//             </td>';
// //             <td class="views-field views-field-field-aggcompliance">
// //             '. $GLOBALS['uwwtd']['ui']['field']['compliance_label'][$compliance] . '          
// //             </td>
// //             <td class="views-field views-field-field-aggcompliance">
// //             '. $GLOBALS['uwwtd']['ui']['field']['compliance_label'][$compliance] . '          
// //             </td> ';
// //         $i++;
// //         $total += $detail['field_agggenerated_value'];
//       }
//          
//       $render_table_graph .= '</tr></tbody>
//         <tfoot>
//         <tr>
//             <th class="views-field views-field-title">
//             ' . $total . '          
//             </th>
//             <th class="views-field views-field-field-aggcompliance">
//             </th>
//         </tr>
//         </tfoot>
//         </table>
//         </div>';    
      
    $build['tablesort_table'] = array(
            '#theme' => 'table',
            '#header' => $header,
            '#rows' => $rows,
        );    
    //build export data on ODT,XML,CSV,DOC...
    
    //todo save view and map and .install update map/style/overlay
    $render_graph = theme('flot_graph', $variables);    
    $page =  '<h1>'.$title.'</h1>'
            . $form 
            . $piechart
            . $rendermap   
            . '<div class="view-content flot-title">Generated load (p.e.) distribution</div>'
            . '<div class="view-content">'.$render_graph.'</div>'
            . '<div class="view-content">'.$render_table_graph.'</div>'
            . '<div class="view-content">'. drupal_render($build) . '</div>'     
     ;
  
     if (true === $put_in_cache) {
        cache_set($cache_name, array('page' => $page,  
                                    'flot1' => $variables), 'cache_page', CACHE_PERMANENT);
     }
     
     return $page;          
}

function uwwtd_page_uwwtps_compliance()
{
    $title = 'UWWTD Treatment Plants- Compliance map';
    drupal_set_title($title);  //todo
    
    $option = array();
    $option['order'] = $GLOBALS['uwwtd']['ui']['field']['uwwtp'];
    $option['default']['order'] = $GLOBALS['uwwtd']['ui']['field']['uwwtp']['field_uwwloadenteringuwwtp_value'];
    $option['default']['sort'] = 'desc';  
    $option['allyear'] = uwwtd_get_all_year();
    $filter = uwwtd_get_form_filter($option);
    
    $preset_name = 'uwwtp_compliance_map';
    $preset = openlayers_preset_load($preset_name);
    $map    = openlayers_build_map($preset->data);
    
    $cache = '';
    $cache_name = uwwtd_get_cache_key_page_uwwtp_compliance($filter['filter']);    
//     dsm($filter);
    //use cache only for page with no filter , or only the year and default sort
    $put_in_cache = uwwtd_is_filter_default($filter, $option) && uwwtd_is_user_anonymous();             
    if (UWWTD_CACHE_ACTIVE === true && true === $put_in_cache) {                                    
        $cache = cache_get($cache_name, 'cache_page');
    }
    if (!empty($cache) && isset($cache->data) && !empty($cache->data)) {
//         dsm('in cache');
        $render_graph_nb = theme('flot_graph', $cache->data['flot1']);
        $render_graph = theme('flot_graph', $cache->data['flot2']);        
        return $cache->data['page'];
    }
//     dsm('not in cache');    

        
    $list_field = array(
        'field_anneedata_value'         => array('title' => 'Year of data', 'type' => 'select', 'data' => $option['allyear']),        
        'field_uwwloadenteringuwwtp_value' => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp']['field_uwwloadenteringuwwtp_value'], 'type' => 'selectoperator', 'data' => $GLOBALS['uwwtd']['ui']['operator']),
        'field_uwwcompliance_value'     => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp']['field_uwwcompliance_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['compliance']),
        'field_uwwbod5perf_value'       => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp']['field_uwwbod5perf_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['test_pass']),
        'field_uwwcodperf_value'        => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp']['field_uwwcodperf_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['test_pass']),
        'field_uwwntotperf_value'       => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp']['field_uwwntotperf_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['test_pass']),
        'field_uwwptotperf_value'       => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp']['field_uwwptotperf_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['test_pass']),
        'field_uwwtreatmenttype_value'  => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp']['field_uwwtreatmenttype_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['treatment_type_in_place']),
    );                                           

    $form = uwwtd_filter_form($list_field, $filter);
    
    $data = uwwtd_get_data_uwwtp($filter['filter']);
//     dsm($data);
    uwwtd_filter_data($filter, $data);
//     dsm($data);
    $header  =array();
    foreach($GLOBALS['uwwtd']['ui']['field']['uwwtp'] as $field => $name) {
        $header[] = array(
            'data' => $name,
            'field' => $field,
        );
        
        //set default sort if none exists
//         if (false === isset($filter['sort']) && $field == 'field_agggenerated_value') {
        if ($filter['order'] == $name) {
            $header[count($header)-1]['sort'] = $filter['sort'];
        }        
    }
//     dsm($header);
    uwwtd_sort_data($filter, $GLOBALS['uwwtd']['ui']['field']['uwwtp'], $data);
//     dsm($data);

    $optionstyle = array();
    //get the color for the point 
    $optionstyle['color']['list'] = uwwtd_get_point_color_from_preset($preset); 
    $optionstyle['color']['field'] = 'field_uwwcompliance_value_format';
    //get the size of the point
    $optionstyle['weight']['list'] = uwwtd_get_point_size_from_preset($preset, 'openlayers_plus_behavior_scalepoints');
    $optionstyle['weight']['field'] = 'field_physicalcapacityactivity_value';
        
//     //todo get tis value from database!
//     $optionstyle = array();
//     $optionstyle['weight'] = $GLOBALS['uwwtd']['ui']['pe_weight'];
//     $optionstyle['weight']['list'] = $GLOBALS['uwwtd']['ui']['pe_weight'];
//     $optionstyle['weight']['field'] = 'field_physicalcapacityactivity_value';       
//     array(
//       1 =>  2000,
//       2 =>  10000,
//       3 =>  150000,
//       4 =>  0,    
//     );
//     //todo get tis value from database!
//     //todo : get field name for database NC => not compliant ...    
//     $optionstyle['color']  = $GLOBALS['uwwtd']['ui']['compliance_color'];
//     $optionstyle['color']['list']  = $GLOBALS['uwwtd']['ui']['compliance_color'];
//     $optionstyle['color']['field'] = 'field_uwwcompliance_value';     
//     array(  
//         'C' => "#4f91e1",
//         'NR' => "#a2a2a2",
//         'NC' => "#d93c3c",
//         'NI' => "#6b6b6b",                          
//     );
    
    $optionstyle['popup_title_type'] = 'treatment-plant';
//     $optionstyle['popup_title_type'] = 'discharge-pointt';
//     $optionstyle['popup_title_type'] = 'agglomeration';
    $optionstyle['popup'] = array(
        'field_uwwcompliance_value_format' => array('label' => 'Compliance'),
        'field_uwwloadenteringuwwtp_value_format' => array('label' => 'Load entering (p.e.)'),
//         'field_uwwprimarytreatment_value' => array('label' => 'Primary treatment'),
//         'field_uwwsecondarytreatment_value' => array('label' => 'Secondary treatment'),
//         'field_uwwnremoval_value' => array('label' => 'N-removal'),
//         'field_uwwpremoval_value' => array('label' => 'P-removal'),
        'field_physicalcapacityactivity_value_format' => array('label' => 'Capacity'),
        'field_uwwbod5perf_value_format' => array('label' => 'Performance: BOD5'),
        'field_uwwcodperf_value_format' => array('label' => 'Performance: COD'),
        'field_uwwntotperf_value_format' => array('label' => 'Performance: Total nitrogen'),
        'field_uwwptotperf_value_format' => array('label' => 'Performance: Total phosphorus'),
    );  
            

                     
    //todo format data in table
    $graph = array();
    foreach($data as $row) {
        if (false === isset($graph[$row['field_uwwcompliance_value_format']])) {
            $graph[$row['field_uwwcompliance_value_format']]['nb'] = 0;
            $graph[$row['field_uwwcompliance_value_format']]['field_uwwloadenteringuwwtp_value'] = 0;
//             $graph[$row['field_uwwcompliance_value_format']]['label'] = 'TODO';           
        }
        $graph[$row['field_uwwcompliance_value_format']]['nb']++;
        $graph[$row['field_uwwcompliance_value_format']]['field_uwwloadenteringuwwtp_value'] += $row['field_uwwloadenteringuwwtp_value'];
          
//     'title'                           =>  t('Name'),
//     'field_inspireidlocalid_value'    =>  t('Identifier Code'),
//     'field_uwwloadenteringuwwtp_value'        =>  t('Load entering (p.e.)'),
//     'field_regionnuts_value'          =>  t('Region (NUTS)'),
//     'field_uwwcompliance_value'       =>  t('Compliance'),
//     'field_uwwbod5perf_value'   =>  t('Performance: BOD5'),
//     'field_uwwcodperf_value'   =>  t('Performance: COD '),
//     'field_uwwntotperf_value'   =>  t('Performance: Total nitrogen'),
//     'field_uwwptotperf_value'   =>  t('Performance: Total phosphorus'),
//     'field_uwwtreatmenttype_value'   =>  t('Treatment type in place'),
              
        //format data         
//         $row['field_uwwloadenteringuwwtp_value'] = uwwtd_format_number($row['field_uwwloadenteringuwwtp_value']);     
        $rows[] = array('data' => array(
                                        //$row['title'],
                                        l($row['title'], uwwtd_get_url_path($optionstyle['popup_title_type'], array(strtolower($row['field_inspireidlocalid_value']), $row['field_anneedata_value']))),
                                        $row['field_inspireidlocalid_value'],
                                        $row['field_uwwloadenteringuwwtp_value_format'],
                                        $row['field_regionnuts_value'],
                                        $row['field_uwwcompliance_value_format'],
                                        $row['field_uwwbod5perf_value_format'],
                                        $row['field_uwwcodperf_value_format'],
                                        $row['field_uwwntotperf_value_format'],
                                        $row['field_uwwptotperf_value_format'],
                                        $row['field_uwwtreatmenttype_value_format'],
                                    ));
    }

    $features['uwwtp_compliance_map'] = uwwtd_build_feature($data, $optionstyle);
//     dsm($features);

   
    $rendermap = uwwtd_build_map($map, $features);
    unset($features);
    
//  f_annee.field_anneedata_value,              
//  f_aggcode.field_inspireidlocalid_value,                        
//  f_agggenerated.field_agggenerated_value,
//  f_art3.field_aggart3compliance_value,       
//  f_art4.field_aggart4compliance_value,       
//  f_art5.field_aggart5compliance_value,       
//  f_art6.field_aggart6compliance_value,       
//  f_comp.field_aggcompliance_value,           
//  f_nuts.field_regionnuts_value,     
    unset($data);
    
    //first graph number agglo
    $data_pie = array();
    $xaxis = array();   
    $i = 0; 
    foreach($graph as $compliance_format => $detail) {
        $d1 = new flotData($detail['nb']);
        $d1->label = $compliance_format;//$detail['label'];
        $d1->color = $optionstyle['color']['list'][$compliance_format];//$detail['label'];
        $data_pie[] = $d1;
//         $xaxis[] = array($i++, $compliance_format);
    }
   
    $options = new flotStylePie();
//     $options->axis_range('yaxis', array(null,100), 4);
//     $options->axis_ticks('xaxis', $xaxis);
    $options->legend  =new StdClass();
    $options->legend->show = true;
    $options->legend->position = "ne";
    $options->resize = true;  
    $options->legend->labelFormatter = 'uwwtd_labelformaterpie_legend'; 
    $options->series->pie->label->formatter = 'uwwtd_labelformaterpie';
    //!!//custom for replace string by callback in module flot...//!!//
    $options->replace = new StdClass(); 
    $options->replace->transform_on_callback = array($options->legend->labelFormatter, $options->series->pie->label->formatter);
    //!!//custom for replace string by callback in module flot...//!!//     
    
//     todo legend color
//     $optionstyle['color']  = array(  
//         'C' => "#4f91e1",
//         'NR' => "#a2a2a2",
//         'NC' => "#d93c3c",
//         'NI' => "#6b6b6b",                          
//     );
        
    $variables_nb = array(
        'data' => $data_pie,
        'element' => array(
            'id' => 'flot-auto-identifier-1',
            'style' => 'width: 500px; height: 200px; padding: 0px; position: relative;',
        ),       
//         'legend' => TRUE,
//         'zoom' => false,     
        'options' => clone $options, 
    );

//     $render_graph_nb = theme('flot_graph', $variables_nb);

    $render_table_graph_nb = '

    <table id="views-aggregator-datatable-nb" class="views-table cols-2">
    <thead>
    <tr>
        <th class="views-field views-field-title">
        Number of plants         
        </th>
        <th class="views-field views-field-field-aggcompliance">
        Compliance            
        </th>
    </tr>
    </thead>
    <tbody>
      ';
      $i = 0;
      $total = 0;
      foreach($graph as $compliance_format => $detail) {
        $render_table_graph_nb .= '<tr class="'.($i % 2 == 0 ? 'odd' : 'even').' views-row-first">
            <td class="views-field views-field-title">
            ' . uwwtd_format_number($detail['nb']). '          
            </td>
            <td class="views-field views-field-field-aggcompliance">
            '. $compliance_format . '          
            </td>
        </tr>';
        $i++;
        $total += $detail['nb'];
      }
         
      $render_table_graph_nb .= '</tbody>
        <tfoot>
        <tr>
            <th class="views-field views-field-title">
            ' . uwwtd_format_number($total) . '          
            </th>
            <th class="views-field views-field-field-aggcompliance">
            </th>
        </tr>
        </tfoot>
        </table>
        ';  
        
    //second graph load generated
    $data_pie = array();
    $xaxis = array();   
    $i = 0; 
    foreach($graph as $compliance_format => $detail) {
        $d1 = new flotData($detail['field_uwwloadenteringuwwtp_value']);
        $d1->label = $compliance_format;//$detail['label'];
        $d1->color = $optionstyle['color']['list'][$compliance_format];//$detail['label'];
        $data_pie[] = $d1;
//         $xaxis[] = array($i++, $compliance_format);
    }
   
    $options = new flotStylePie();
//     $options->axis_range('yaxis', array(null,100), 4);
//     $options->axis_ticks('xaxis', $xaxis);
    $options->legend  =new StdClass();
    $options->legend->show = true;
    $options->legend->position = "ne";
    $options->resize = true;  
    $options->legend->labelFormatter = 'uwwtd_labelformaterpie_legend'; 
    $options->series->pie->label->formatter = 'uwwtd_labelformaterpie';
    //!!//custom for replace string by callback in module flot...//!!//
    $options->replace = new StdClass(); 
    $options->replace->transform_on_callback = array($options->legend->labelFormatter, $options->series->pie->label->formatter);
    //!!//custom for replace string by callback in module flot...//!!//     
    
    $variables = array(
        'data' => $data_pie,
        'element' => array(
            'id' => 'flot-auto-identifier-2',
            'style' => 'width: 500px; height: 200px; padding: 0px; position: relative;',
        ),       
//         'legend' => TRUE,
//         'zoom' => false,     
        'options' => clone $options, 
    );

//     $render_graph = theme('flot_graph', $variables);

    $render_table_graph = '

    <table id="views-aggregator-datatable" class="views-table cols-2">
    <thead>
    <tr>
        <th class="views-field views-field-title">
        Load entering (p.e.)      
        </th>
        <th class="views-field views-field-field-aggcompliance">
        Compliance            
        </th>
    </tr>
    </thead>
    <tbody>
      ';
      $i = 0;
      $total = 0;
      foreach($graph as $compliance_format => $detail) {
        $render_table_graph .= '<tr class="'.($i % 2 == 0 ? 'odd' : 'even').' views-row-first">
            <td class="views-field views-field-title">
            ' . uwwtd_format_number($detail['field_uwwloadenteringuwwtp_value']). '          
            </td>
            <td class="views-field views-field-field-aggcompliance">
            '. $compliance_format . '          
            </td>
        </tr>';
        $i++;
        $total += $detail['field_uwwloadenteringuwwtp_value'];
      }
         
      $render_table_graph .= '</tbody>
        <tfoot>
        <tr>
            <th class="views-field views-field-title">
            ' . uwwtd_format_number($total) . '          
            </th>
            <th class="views-field views-field-field-aggcompliance">
            </th>
        </tr>
        </tfoot>
        </table>
        ';  
                  
      
    $build['tablesort_table'] = array(
            '#theme' => 'table',
            '#header' => $header,
            '#rows' => $rows,
        );    
    //build export data on ODT,XML,CSV,DOC...
    $render_graph_nb = theme('flot_graph', $variables_nb);
    $render_graph = theme('flot_graph', $variables);
    $page = '<h1>'.$title.'</h1>'
            . $form 
            . $rendermap   
            . '<div class="view-content flot-title">Compliance by Plants</div>'
            . '<div class="view-content">'.$render_graph_nb.'</div>'
            . '<div class="view-content">'.$render_table_graph_nb.'</div>'  
            . '<div class="view-content flot-title">Compliance by Generated load (p.e.)</div>'          
            . '<div class="view-content">'.$render_graph.'</div>'
            . '<div class="view-content">'.$render_table_graph.'</div>'
            . '<div class="view-content">'. drupal_render($build) . '</div>'      
     ;
     if (true === $put_in_cache) {
        cache_set($cache_name, array('page' => $page, 
                                    'flot1' => $variables_nb, 
                                    'flot2' => $variables), 'cache_page', CACHE_PERMANENT);
     }
     
     return $page;        
}

function uwwtd_page_uwwtps_treatment()
{
    $title = 'UWWTD Treatment Plants- Treatment map';
    drupal_set_title($title);  //todo

    $option = array(); 
    $option['order'] = $GLOBALS['uwwtd']['ui']['field']['uwwtp_treatment'];
    $option['default']['order'] = $GLOBALS['uwwtd']['ui']['field']['uwwtp_treatment']['field_uwwloadenteringuwwtp_value'];
    $option['default']['sort'] = 'desc';  
    $option['allyear'] = uwwtd_get_all_year();
    $filter = uwwtd_get_form_filter($option);
    
    $preset_name = 'uwwtp_treatment_map';   //layer agglomeration_treatment 'Agglomeration connection map and list'
    $preset = openlayers_preset_load($preset_name);
    $map    = openlayers_build_map($preset->data);
    
    $cache = '';
    $cache_name = uwwtd_get_cache_key_page_uwwtp_treatment($filter['filter']);    
//     dsm($filter);
    //use cache only for page with no filter , or only the year and default sort
    $put_in_cache = uwwtd_is_filter_default($filter, $option) && uwwtd_is_user_anonymous();             
    if (UWWTD_CACHE_ACTIVE === true && true === $put_in_cache) {                                    
        $cache = cache_get($cache_name, 'cache_page');
    }
    if (!empty($cache) && isset($cache->data) && !empty($cache->data)) {
//         dsm('in cache');
        $render_graph_nb = theme('flot_graph', $cache->data['flot1']);
        $render_graph = theme('flot_graph', $cache->data['flot2']);        
        return $cache->data['page'];
    }
//     dsm('not in cache');
    
        
//     dsm($filter);
//     $listyear = ();
    // dsm($listyear);
    //     return '';
    $list_field = array(
        'field_anneedata_value'             => array('title' => 'Year of data', 'type' => 'select', 'data' => $option['allyear']),        
        'field_uwwloadenteringuwwtp_value'  => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp_treatment']['field_uwwloadenteringuwwtp_value'], 'type' => 'selectoperator', 'data' => $GLOBALS['uwwtd']['ui']['operator']),
        'field_uwwprimarytreatment_value'   => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp_treatment']['field_uwwprimarytreatment_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['yes_no']),
        'field_uwwsecondarytreatment_value' => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp_treatment']['field_uwwsecondarytreatment_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['yes_no']),
        'field_uwwnremoval_value'           => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp_treatment']['field_uwwnremoval_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['yes_no']),
        'field_uwwpremoval_value'           => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp_treatment']['field_uwwpremoval_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['yes_no']),
    );         

    $form = uwwtd_filter_form($list_field, $filter);
    
    $data = uwwtd_get_data_uwwtp($filter['filter']);
    
    uwwtd_filter_data($filter, $data);
//     dsm($data);
    $header  = array();
    foreach($GLOBALS['uwwtd']['ui']['field']['uwwtp_treatment'] as $field => $name) {
        if ($field == 'field_uwwspecification_value') {
            $header[] = array(
                'data' => $name,
            );
        } else {
            $header[] = array(
                'data' => $name,
                'field' => $field,
            );        
        }
        
        //set default sort if none exists
//         if (false === isset($filter['sort']) && $field == 'field_agggenerated_value') {
        if ($filter['order'] == $name) {
            $header[count($header)-1]['sort'] = $filter['sort'];
        }        
    }
//     dsm($header);
    uwwtd_sort_data($filter, $GLOBALS['uwwtd']['ui']['field']['uwwtp_treatment'], $data);    


    $optionstyle = array();
    //get the color for the point                          
    $optionstyle['color']['list'] = uwwtd_get_point_color_from_preset($preset); 
    $optionstyle['color']['field'] = 'field_uwwtreatmenttype_value_format';
    //get the size of the point
    $optionstyle['weight']['list'] = uwwtd_get_point_size_from_preset($preset, 'openlayers_plus_behavior_scalepoints');
    $optionstyle['weight']['field'] = 'field_physicalcapacityactivity_value';
    
//     dsm($optionstyle);    
    //todo get tis value from database!
//     $optionstyle = array();
//     $optionstyle['weight'] = $GLOBALS['uwwtd']['ui']['pe_weight'];
//     $optionstyle['weight']['list'] = $GLOBALS['uwwtd']['ui']['pe_weight'];
//     $optionstyle['weight']['field'] = 'field_physicalcapacityactivity_value';
    
           
//     array(
//       1 =>  2000,
//       2 =>  10000,
//       3 =>  150000,
//       4 =>  0,    
//     );
    //todo get tis value from database!
    //todo : get field name for database NC => not compliant ...    
//     $optionstyle['color']['list']  = $GLOBALS['uwwtd']['ui']['more_stringent_color'];
//     $optionstyle['color']['field'] = 'field_uwwtreatmenttype_value';    
            
//     $optionstyle['popup_title_type'] = 'treatment-plant';
//     $optionstyle['popup_title_type'] = 'discharge-pointt';
    $optionstyle['popup_title_type'] = 'treatment-plant';            
    $optionstyle['popup'] = array(
        'field_uwwtreatmenttype_value_format' => array('label' => 'Treatment type in place'),
        'field_physicalcapacityactivity_value_format' => array('label' => 'Capacity'),
        'field_uwwcompliance_value_format' => array('label' => 'Compliance'),
        'field_uwwprimarytreatment_value_format' => array('label' => 'Primary treatment'),
        'field_uwwsecondarytreatment_value_format' => array('label' => 'Secondary treatment'),
        'field_uwwnremoval_value_format' => array('label' => 'N-removal'),
        'field_uwwpremoval_value_format' => array('label' => 'P-removal'),        
    );                                   
     
//     dsm($optionstyle);
//     dsm($data);
                

                     

    //todo format data in table
    $graph = array();
    foreach($data as $row) {
        if (false === isset($graph[$row['field_uwwtreatmenttype_value_format']])) {
            $graph[$row['field_uwwtreatmenttype_value_format']]['nb'] = 0;
            $graph[$row['field_uwwtreatmenttype_value_format']]['field_uwwloadenteringuwwtp_value'] = 0;
//             $graph[$row['field_uwwtreatmenttype_value_format']]['label'] = 'TODO';           
        }
        $graph[$row['field_uwwtreatmenttype_value_format']]['nb']++;
        $graph[$row['field_uwwtreatmenttype_value_format']]['field_uwwloadenteringuwwtp_value'] += $row['field_uwwloadenteringuwwtp_value'];
          
//     'title'                           =>  t('Name'),
//     'field_inspireidlocalid_value'    =>  t('Identifier Code'),
//     'field_uwwloadenteringuwwtp_value'        =>  t('Load entering (p.e.)'),
//     'field_regionnuts_value'          =>  t('Region (NUTS)'),
//     'field_uwwcompliance_value'       =>  t('Compliance'),
//     'field_uwwbod5perf_value'   =>  t('Performance: BOD5'),
//     'field_uwwcodperf_value'   =>  t('Performance: COD '),
//     'field_uwwntotperf_value'   =>  t('Performance: Total nitrogen'),
//     'field_uwwptotperf_value'   =>  t('Performance: Total phosphorus'),
//     'field_uwwtreatmenttype_value'   =>  t('Treatment type in place'),
        //format data 
//         $row['field_uwwloadenteringuwwtp_value'] = uwwtd_format_number($row['field_uwwloadenteringuwwtp_value']);
        $rows[] = array('data' => array(
                                        //$row['title'],
                                        l($row['title'], uwwtd_get_url_path($optionstyle['popup_title_type'], array(strtolower($row['field_inspireidlocalid_value']), $row['field_anneedata_value']))),
                                        $row['field_inspireidlocalid_value'],
                                        $row['field_uwwloadenteringuwwtp_value_format'],
                                        $row['field_regionnuts_value'],
                                        $row['field_uwwprimarytreatment_value_format'],
                                        $row['field_uwwsecondarytreatment_value_format'],
                                        $row['field_uwwnremoval_value_format'],
                                        $row['field_uwwpremoval_value_format'],
                                        $row['field_uwwspecification_value'],
                                    ));
    }
    
    $features['uwwtp_treatment'] = uwwtd_build_feature($data, $optionstyle);
//     dsm($features);
//     unset($data); 
   
    $rendermap = uwwtd_build_map($map, $features);
    unset($features);    

//  f_annee.field_anneedata_value,              
//  f_aggcode.field_inspireidlocalid_value,                        
//  f_agggenerated.field_agggenerated_value,
//  f_art3.field_aggart3compliance_value,       
//  f_art4.field_aggart4compliance_value,       
//  f_art5.field_aggart5compliance_value,       
//  f_art6.field_aggart6compliance_value,       
//  f_comp.field_aggcompliance_value,           
//  f_nuts.field_regionnuts_value,     
    unset($data);
    
    //first graph number agglo
    $data_pie = array();
    $xaxis = array();   
    $i = 0; 
    foreach($graph as $treatmenttype_format => $detail) {
        $d1 = new flotData($detail['nb']);
        $d1->label = $treatmenttype_format;//$detail['label'];
        $d1->color = $optionstyle['color']['list'][$treatmenttype_format];//$detail['label'];
        $data_pie[] = $d1;
//         $xaxis[] = array($i++, $treatmenttype_format);
    }
   
    $options = new flotStylePie();
//     $options->axis_range('yaxis', array(null,100), 4);
//     $options->axis_ticks('xaxis', $xaxis);
    $options->legend  =new StdClass();
    $options->legend->show = true;
    $options->legend->position = "ne";
    $options->resize = true;  
    $options->legend->labelFormatter = 'uwwtd_labelformaterpie_legend'; 
    $options->series->pie->label->formatter = 'uwwtd_labelformaterpie';
    //!!//custom for replace string by callback in module flot...//!!//
    $options->replace = new StdClass(); 
    $options->replace->transform_on_callback = array($options->legend->labelFormatter, $options->series->pie->label->formatter);
    //!!//custom for replace string by callback in module flot...//!!//     
    
//     todo legend color
//     $optionstyle['color']  = array(  
//         'C' => "#4f91e1",
//         'NR' => "#a2a2a2",
//         'NC' => "#d93c3c",
//         'NI' => "#6b6b6b",                          
//     );
        
    $variables_nb = array(
        'data' => $data_pie,
        'element' => array(
            'id' => 'flot-auto-identifier-1',
            'style' => 'width: 500px; height: 200px; padding: 0px; position: relative;',
        ),       
//         'legend' => TRUE,
//         'zoom' => false,     
        'options' => clone $options, 
    );

//     $render_graph_nb = theme('flot_graph', $variables);

    $render_table_graph_nb = '

    <table id="views-aggregator-datatable-nb" class="views-table cols-2">
    <thead>
    <tr>
        <th class="views-field views-field-title">
        Number of plants         
        </th>
        <th class="views-field views-field-field-aggcompliance">
        Treatment type in place         
        </th>
    </tr>
    </thead>
    <tbody>
      ';
      $i = 0;
      $total = 0;
      foreach($graph as $treatmenttype_format => $detail) {
        $render_table_graph_nb .= '<tr class="'.($i % 2 == 0 ? 'odd' : 'even').' views-row-first">
            <td class="views-field views-field-title">
            ' . uwwtd_format_number($detail['nb']). '          
            </td>
            <td class="views-field views-field-field-aggcompliance">
            '. $treatmenttype_format . '          
            </td>
        </tr>';
        $i++;
        $total += $detail['nb'];
      }
         
      $render_table_graph_nb .= '</tbody>
        <tfoot>
        <tr>
            <th class="views-field views-field-title">
            ' . uwwtd_format_number($total) . '          
            </th>
            <th class="views-field views-field-field-aggcompliance">
            </th>
        </tr>
        </tfoot>
        </table>
        ';  
        
    //second graph load generated
    $data_pie = array();
    $xaxis = array();   
    $i = 0; 
    foreach($graph as $treatmenttype_format => $detail) {
        $d1 = new flotData($detail['field_uwwloadenteringuwwtp_value']);
        $d1->label = $treatmenttype_format;//$detail['label'];
        $d1->color = $optionstyle['color']['list'][$treatmenttype_format];//$detail['label'];
        $data_pie[] = $d1;
//         $xaxis[] = array($i++, $treatmenttype_format);
    }
   
    $options = new flotStylePie();
//     $options->axis_range('yaxis', array(null,100), 4);
//     $options->axis_ticks('xaxis', $xaxis);
    $options->legend  =new StdClass();
    $options->legend->show = true;
    $options->legend->position = "ne";
    $options->resize = true;  
    $options->legend->labelFormatter = 'uwwtd_labelformaterpie_legend'; 
    $options->series->pie->label->formatter = 'uwwtd_labelformaterpie';
    //!!//custom for replace string by callback in module flot...//!!//
    $options->replace = new StdClass(); 
    $options->replace->transform_on_callback = array($options->legend->labelFormatter, $options->series->pie->label->formatter);
    //!!//custom for replace string by callback in module flot...//!!//     
    
    $variables = array(
        'data' => $data_pie,
        'element' => array(
            'id' => 'flot-auto-identifier-2',
            'style' => 'width: 500px; height: 200px; padding: 0px; position: relative;',
        ),       
//         'legend' => TRUE,
//         'zoom' => false,     
        'options' => clone $options, 
    );

//     $render_graph = theme('flot_graph', $variables);

    $render_table_graph = '

    <table id="views-aggregator-datatable" class="views-table cols-2">
    <thead>
    <tr>
        <th class="views-field views-field-title">
        Load entering (p.e.)      
        </th>
        <th class="views-field views-field-field-aggcompliance">
        Treatment type in place            
        </th>
    </tr>
    </thead>
    <tbody>
      ';
      $i = 0;
      $total = 0;
      foreach($graph as $treatmenttype_format => $detail) {
        $render_table_graph .= '<tr class="'.($i % 2 == 0 ? 'odd' : 'even').' views-row-first">
            <td class="views-field views-field-title">
            ' . uwwtd_format_number($detail['field_uwwloadenteringuwwtp_value']). '          
            </td>
            <td class="views-field views-field-field-aggcompliance">
            '.  $treatmenttype_format . '          
            </td>
        </tr>';
        $i++;
        $total += $detail['field_uwwloadenteringuwwtp_value'];
      }
         
      $render_table_graph .= '</tbody>
        <tfoot>
        <tr>
            <th class="views-field views-field-title">
            ' . uwwtd_format_number($total) . '          
            </th>
            <th class="views-field views-field-field-aggcompliance">
            </th>
        </tr>
        </tfoot>
        </table>
        ';  
          

    $build['tablesort_table'] = array(
            '#theme' => 'table',
            '#header' => $header,
            '#rows' => $rows,
        );    
    //build export data on ODT,XML,CSV,DOC...
    
    //todo save view and map and .install update map/style/overlay
    $render_graph_nb = theme('flot_graph', $variables_nb);
    $render_graph = theme('flot_graph', $variables);    
    $page = '<h1>'.$title.'</h1>'
            . $form 
            . $rendermap      
            . '<div class="view-content flot-title">Treatment type in place by Plants</div>' 
            . '<div class="view-content">'.$render_graph_nb.'</div>'
            . '<div class="view-content">'.$render_table_graph_nb.'</div>'     
            . '<div class="view-content flot-title">Treatment type in place by Load entering (p.e.)</div>'       
            . '<div class="view-content">'.$render_graph.'</div>'
            . '<div class="view-content">'.$render_table_graph.'</div>'
            . '<div class="view-content">'. drupal_render($build) . '</div>'   
     ;    
     
     if (true === $put_in_cache) {
        cache_set($cache_name, array('page' => $page, 
                                    'flot1' => $variables_nb, 
                                    'flot2' => $variables), 'cache_page', CACHE_PERMANENT);
     }
     
     return $page;     
}

function uwwtd_is_filter_default($filter, $option)
{
    $result = false;
    if (count($filter['filter']) == 1 && isset($filter['filter']['field_anneedata_value'])
        && $filter['order'] == $option['default']['order']
        && $filter['sort'] == $option['default']['sort']) {
        $result = true;
    }
    return $result;
}

function uwwtd_page_agglomeration_compliance()
{
    $title = 'UWWTD Agglomerations- Compliance map';
    drupal_set_title($title); 
         
    $option = array();
    $option['order'] = $GLOBALS['uwwtd']['ui']['field']['agglomeration'];
    $option['default']['order'] = $GLOBALS['uwwtd']['ui']['field']['agglomeration']['field_agggenerated_value'];
    $option['default']['sort'] = 'desc';
    $option['allyear'] = uwwtd_get_all_year();  
    $filter = uwwtd_get_form_filter($option);
    
    $preset_name = 'agg_compliance_map';
    $preset = openlayers_preset_load($preset_name);
    $map    = openlayers_build_map($preset->data);
    
    $cache = '';
    $cache_name = uwwtd_get_cache_key_page_agglo_compliance($filter['filter']);    
//     dsm($filter);
    
    //use cache only for page with no filter , or only the year and default sort
    $put_in_cache = uwwtd_is_filter_default($filter, $option) && uwwtd_is_user_anonymous();             
    if (UWWTD_CACHE_ACTIVE === true && true === $put_in_cache) {                                    
        $cache = cache_get($cache_name, 'cache_page');
    }
    if (!empty($cache) && isset($cache->data) && !empty($cache->data)) {
//         dsm('in cache');
        $render_graph_nb = theme('flot_graph', $cache->data['flot1']);
        $render_graph = theme('flot_graph', $cache->data['flot2']);        
        return $cache->data['page'];
    }
       
//     dsm('not in cache'); 
        
//     global $conf;
//     dsm($conf);  
//     dsm(variable_get('siif_eru_version'));
    

    
//     dsm($filter);
    
    // dsm($listyear);
    //     return '';
    $list_field = array(
        'field_anneedata_value'         => array('title' => 'Year of data', 'type' => 'select', 'data' => $option['allyear']),        
        'field_agggenerated_value'      => array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration']['field_agggenerated_value'], 'type' => 'selectoperator', 'data' => $GLOBALS['uwwtd']['ui']['operator']),
        'field_aggcompliance_value'     => array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration']['field_aggcompliance_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['compliance']),
        'field_aggart3compliance_value' => array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration']['field_aggart3compliance_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['compliance']),
        'field_aggart4compliance_value' => array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration']['field_aggart4compliance_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['compliance']),
        'field_aggart5compliance_value' => array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration']['field_aggart5compliance_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['compliance']),
        'field_aggart6compliance_value' => array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration']['field_aggart6compliance_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['compliance']),
    ); 

    $form = uwwtd_filter_form($list_field, $filter);
    
    $data = uwwtd_get_data_agglomeration($filter['filter']);
//     dsm($data);
    uwwtd_filter_data($filter, $data);
//     dsm($data);
    $header = array();
    foreach($GLOBALS['uwwtd']['ui']['field']['agglomeration'] as $field => $name) {
        $header[] = array(
            'data' => $name,
            'field' => $field,
        );
        
        //set default sort if none exists
//         if (false === isset($filter['sort']) && $field == 'field_agggenerated_value') {
        if ($filter['order'] == $name) {
            $header[count($header)-1]['sort'] = $filter['sort'];
        }        
    }
//     dsm($header);
    uwwtd_sort_data($filter, $GLOBALS['uwwtd']['ui']['field']['agglomeration'], $data);
//     dsm($data);

    $optionstyle = array();
    //get the color for the point 
    $optionstyle['color']['list'] = uwwtd_get_point_color_from_preset($preset); 
    $optionstyle['color']['field'] = 'field_aggcompliance_value_format';
    //get the size of the point
    $optionstyle['weight']['list'] = uwwtd_get_point_size_from_preset($preset, 'openlayers_plus_behavior_scalepoints');
    $optionstyle['weight']['field'] = 'field_agggenerated_value';

      
    
    
//     $optionstyle['weight'] = $GLOBALS['uwwtd']['ui']['pe_weight'];
//     $optionstyle['weight']['list'] = $GLOBALS['uwwtd']['ui']['pe_weight'];
//     $optionstyle['weight']['field'] = 'field_agggenerated_value';       
//     array(
//       1 =>  2000,
//       2 =>  10000,
//       3 =>  150000,
//       4 =>  0,    
//     );
    //todo get tis value from database!
    //todo : get field name for database NC => not compliant ...    
//     $optionstyle['color']  = $GLOBALS['uwwtd']['ui']['compliance_color'];
//     $optionstyle['color']['list']  = $GLOBALS['uwwtd']['ui']['compliance_color'];
//     $optionstyle['color']['field'] = 'field_aggcompliance_value';     
//     array(  
//         'C' => "#4f91e1",
//         'NR' => "#a2a2a2",
//         'NC' => "#d93c3c",
//         'NI' => "#6b6b6b",                          
//     );
    //popup
//     $optionstyle['popup_title_type'] = 'treatment-plant';
//     $optionstyle['popup_title_type'] = 'discharge-pointt';
    $optionstyle['popup_title_type'] = 'agglomeration';    
    $optionstyle['popup'] = array(
        'field_agggenerated_value_format' => array('label' => 'Generated load (p.e.)'),
        'field_aggcompliance_value_format' => array('label' => 'Compliance'),
        'field_aggart3compliance_value_format' => array('label' => 'Article 3 compliance'),
        'field_aggart4compliance_value_format' => array('label' => 'Article 4 compliance'),
        'field_aggart5compliance_value_format' => array('label' => 'Article 5 compliance'),
//         'field_aggart6compliance_value' => array('label' => 'Article 6 compliance'),
//         'field_aggc1_value' => array('label' => 'Collective system'),
//         'field_aggc2_value' => array('label' => 'Individual and Appropriate Systems (IAS)'),
//         'field_aggpercwithouttreatment_value' => array('label' => 'Discharge without treatment'),
    );    

                     
    //todo format data in table
    $graph = array();
    foreach($data as $row) {
        if (false === isset($graph[$row['field_aggcompliance_value_format']])) {
            $graph[$row['field_aggcompliance_value_format']]['nb'] = 0;
            $graph[$row['field_aggcompliance_value_format']]['field_agggenerated_value'] = 0;
//             $graph[$row['field_aggcompliance_value_format']]['label'] = 'TODO';           
        }
        $graph[$row['field_aggcompliance_value_format']]['nb']++;
        $graph[$row['field_aggcompliance_value_format']]['field_agggenerated_value'] += $row['field_agggenerated_value'];
        //format data 
//         $row['field_agggenerated_value_format'] = uwwtd_format_number($row['field_agggenerated_value']);
//         $row['field_aggcompliance_value_format'] = $GLOBALS['uwwtd']['ui']['field']['compliance_label'][$row['field_aggcompliance_value']];
//         $row['field_aggart3compliance_value_format'] = $GLOBALS['uwwtd']['ui']['field']['compliance_label'][$row['field_aggart3compliance_value']];
//         $row['field_aggart4compliance_value_format'] = $GLOBALS['uwwtd']['ui']['field']['compliance_label'][$row['field_aggart4compliance_value']];
//         $row['field_aggart5compliance_value_format'] = $GLOBALS['uwwtd']['ui']['field']['compliance_label'][$row['field_aggart5compliance_value']];
//         $row['field_aggart6compliance_value_format'] = $GLOBALS['uwwtd']['ui']['field']['compliance_label'][$row['field_aggart6compliance_value']];          
        $rows[] = array('data' => array(
                                        //$row['title'],
                                        l($row['title'], uwwtd_get_url_path($optionstyle['popup_title_type'], array(strtolower($row['field_inspireidlocalid_value']), $row['field_anneedata_value']))),
                                        $row['field_inspireidlocalid_value'],
                                        $row['field_agggenerated_value_format'],
                                        $row['field_regionnuts_value'],
                                        $row['field_aggcompliance_value_format'],
                                        $row['field_aggart3compliance_value_format'],
                                        $row['field_aggart4compliance_value_format'],
                                        $row['field_aggart5compliance_value_format'],
                                        $row['field_aggart6compliance_value_format'],
                                    ));
    }
    
    $features['compliance_map'] = uwwtd_build_feature($data, $optionstyle);
//     dsm($features);
    $rendermap = uwwtd_build_map($map, $features);
    unset($features);    

//  f_annee.field_anneedata_value,              
//  f_aggcode.field_inspireidlocalid_value,                        
//  f_agggenerated.field_agggenerated_value,
//  f_art3.field_aggart3compliance_value,       
//  f_art4.field_aggart4compliance_value,       
//  f_art5.field_aggart5compliance_value,       
//  f_art6.field_aggart6compliance_value,       
//  f_comp.field_aggcompliance_value,           
//  f_nuts.field_regionnuts_value,     
    unset($data);
    
    //first graph number agglo
    $data_pie = array();
    $xaxis = array();   
    $i = 0; 
//     dsm($optionstyle);
    foreach($graph as $compliance_format => $detail) {
        $d1 = new flotData($detail['nb']);
        $d1->label = $compliance_format;//$GLOBALS['uwwtd']['ui']['field']['compliance_label'][$compliance];//$detail['label'];
        $d1->color = $optionstyle['color']['list'][$compliance_format];//$detail['label'];
        $data_pie[] = $d1;
//         $xaxis[] = array($i++, $GLOBALS['uwwtd']['ui']['field']['compliance_label'][$compliance]);
//         $xaxis[] = array($i++, $compliance_format.'__pppp');
    }
   
    $options = new flotStylePie();
//     $options->axis_range('yaxis', array(null,100), 4);
//     $options->axis_ticks('xaxis', $xaxis);    
    $options->legend  = new StdClass();
    $options->legend->show = true;
    $options->legend->position = "ne";
    $options->resize = true;
    $options->legend->labelFormatter = 'uwwtd_labelformaterpie_legend'; 
    $options->series->pie->label->formatter = 'uwwtd_labelformaterpie';
    //!!//custom for replace string by callback in module flot...//!!//
    $options->replace = new StdClass(); 
    $options->replace->transform_on_callback = array($options->legend->labelFormatter, $options->series->pie->label->formatter);
    //!!//custom for replace string by callback in module flot...//!!//
      
//     $options->series->pie->label->formatter = 'function testlabelformater(label, series) {
// 		return \'po\';
// 	}'; 
//     dsm($options);
//     dsm(drupal_json_encode($options));
//     dsm(json_encode($options));  
//     $this->series->pie->show = TRUE;
//     $this->series->pie->radius = 1;
//     $this->series->pie->label->show = TRUE;
//     $this->series->pie->label->radius = 2/3;
//     $this->series->pie->label->threshold = 0.1;
//     $this->series->pie->label->background->opacity = 1;
    
//     todo legend color
//     $optionstyle['color']  = array(  
//         'C' => "#4f91e1",
//         'NR' => "#a2a2a2",
//         'NC' => "#d93c3c",
//         'NI' => "#6b6b6b",                          
//     );
        
    $variables_nb = array(
        'data' => $data_pie,
        'element' => array(
            'id' => 'flot-auto-identifier-1',
            'style' => 'width: 500px; height: 200px; padding: 0px; position: relative;',
        ),       
//         'legend' => TRUE,
//         'zoom' => false,     
        'options' => clone $options, 
    );

//     $render_graph_nb = theme('flot_graph', $variables);

    $render_table_graph_nb = '
   
    <table id="views-aggregator-datatable-nb" class="views-table cols-2">
    <thead>
    <tr>
        <th class="views-field views-field-title">
        Number of plants         
        </th>
        <th class="views-field views-field-field-aggcompliance">
        Compliance            
        </th>
    </tr>
    </thead>
    <tbody>
      ';
      $i = 0;
      $total = 0;
      foreach($graph as $compliance_format => $detail) {
        $render_table_graph_nb .= '<tr class="'.($i % 2 == 0 ? 'odd' : 'even').' views-row-first">
            <td class="views-field views-field-title">
            ' . uwwtd_format_number($detail['nb']) . '          
            </td>
            <td class="views-field views-field-field-aggcompliance">
            '. $compliance_format . '          
            </td>
        </tr>';
        $i++;
        $total += $detail['nb'];
      }
         
      $render_table_graph_nb .= '</tbody>
        <tfoot>
        <tr>
            <th class="views-field views-field-title">
            ' . uwwtd_format_number($total) . '          
            </th>
            <th class="views-field views-field-field-aggcompliance">
            </th>
        </tr>
        </tfoot>
        </table>
        ';  
        
    //second graph load generated
    $data_pie = array();
    $xaxis = array();   
    $i = 0; 
    foreach($graph as $compliance_format => $detail) {
        $d1 = new flotData($detail['field_agggenerated_value']);
        $d1->label =$compliance_format;//$detail['label'];
        $d1->color = $optionstyle['color']['list'][$compliance_format];//$detail['label'];
        $data_pie[] = $d1;
//         $xaxis[] = array($i++, $compliance_format);
    }
   
    $options = new flotStylePie();
//     $options->axis_range('yaxis', array(null,100), 4);
//     $options->axis_ticks('xaxis', $xaxis);
    $options->legend  =new StdClass();
    $options->legend->show = true;
    $options->legend->position = "ne";
    $options->resize = true;
    $options->legend->labelFormatter = 'uwwtd_labelformaterpie_legend'; 
    $options->series->pie->label->formatter = 'uwwtd_labelformaterpie';
    //!!//custom for replace string by callback in module flot...//!!//
    $options->replace = new StdClass(); 
    $options->replace->transform_on_callback = array($options->legend->labelFormatter, $options->series->pie->label->formatter);
    //!!//custom for replace string by callback in module flot...//!!//       
    
    $variables = array(
        'data' => $data_pie,
        'element' => array(
            'id' => 'flot-auto-identifier-2',
            'style' => 'width: 500px; height: 200px; padding: 0px; position: relative;',
        ),       
//         'legend' => TRUE,
//         'zoom' => false,     
        'options' => clone $options, 
    );

    $render_graph = theme('flot_graph', $variables);

    $render_table_graph = '
    
    <table id="views-aggregator-datatable" class="views-table cols-2">
    <thead>
    <tr>
        <th class="views-field views-field-title">
        Generated load (p.e.)        
        </th>
        <th class="views-field views-field-field-aggcompliance">
        Compliance            
        </th>
    </tr>
    </thead>
    <tbody>
      ';
      $i = 0;
      $total = 0;
      foreach($graph as $compliance_format => $detail) {
        $render_table_graph .= '<tr class="'.($i % 2 == 0 ? 'odd' : 'even').' views-row-first">
            <td class="views-field views-field-title">
            ' . uwwtd_format_number($detail['field_agggenerated_value']). '          
            </td>
            <td class="views-field views-field-field-aggcompliance">
            '. $compliance_format . '          
            </td>
        </tr>';
        $i++;
        $total += $detail['field_agggenerated_value'];
      }
         
      $render_table_graph .= '</tbody>
        <tfoot>
        <tr>
            <th class="views-field views-field-title">
            ' . uwwtd_format_number($total) . '          
            </th>
            <th class="views-field views-field-field-aggcompliance">
            </th>
        </tr>
        </tfoot>
        </table>
        ';  
                  
      
    $build['tablesort_table'] = array(
            '#theme' => 'table',
            '#header' => $header,
            '#rows' => $rows,
        );    
    //build export data on ODT,XML,CSV,DOC...
    $render_graph_nb = theme('flot_graph', $variables_nb);
    $render_graph = theme('flot_graph', $variables);    
    $page =  '<h1>'.$title.'</h1>'
            . $form 
            . $rendermap
            . '<div class="view-content flot-title">Compliance by Plants</div>'
//             . '<script> 
// function uwwtd_labelformaterpie(label, series) {
//     console.log("uwwtd_labelformaterpie : " + label);
//     return "<div class=\"pie_legend\">" + Math.round(series.percent) + "%</div>";
// }     
// function uwwtd_labelformaterpie_legend(label, series) {
//     console.log("uwwtd_labelformaterpie_legend " + label);
//     return "<div class=\"pie_slice\">label + " (" + Math.round(series.percent) + "%)</div>";  
// }    
//     </script>'     
            . '<div class="view-content">'.$render_graph_nb.'</div>'
            . '<div class="view-content">'.$render_table_graph_nb.'</div>'
            . '<div class="view-content flot-title">Compliance by Generated load (p.e.)</div>'            
            . '<div class="view-content">'.$render_graph.'</div>'
            . '<div class="view-content">'.$render_table_graph.'</div>'
            . '<div class="view-content">'. drupal_render($build) . '</div>'
     ;
     if (true === $put_in_cache) {
        cache_set($cache_name, array('page' => $page, 
                                    'flot1' => $variables_nb, 
                                    'flot2' => $variables), 'cache_page', CACHE_PERMANENT);
     }
     
     return $page;
}

function uwwtd_get_url_path($type, $param = array())
{
    $path = '';
    switch($type) {
        case 'agglomeration':
        case 'treatment-plant':
        case 'discharge-point':
            $path .= $type;
            foreach ($param as $value) {
                $path.= '/' . $value;
            }
            break;                        
    }
    return $path;
}

function uwwtd_update_cache_data($list_year = array())
{
    if (empty($list_year)) {
        $list_year = uwwtd_get_all_year();
    }
    foreach($list_year as $year) {
        $option['field_anneedata_value'] = $year;
        //clear last cache with empty string
        cache_set(uwwtd_get_cache_key_agglomeration($option), '', 'cache', 10); 
        cache_set(uwwtd_get_cache_key_uwwtp($option), '', 'cache', 10); 
        cache_set(uwwtd_get_cache_key_dcp($option), '', 'cache', 10);
        
        //calculate new cache
        uwwtd_get_data_agglomeration($option['field_anneedata_value']);   
        uwwtd_get_data_uwwtp($option['field_anneedata_value']);  
        uwwtd_get_data_dcp($option['field_anneedata_value']); 
        
        //clear cachhe block and page
        cache_set(uwwtd_get_cache_key_block_home($option), '', 'cache_block', 10);
        
        cache_set(uwwtd_get_cache_key_page_agglo_compliance($option), '', 'cache_page', 10); 
        cache_set(uwwtd_get_cache_key_page_agglo_treatment($option), '', 'cache_page', 10); 
        cache_set(uwwtd_get_cache_key_page_uwwtp_treatment($option), '', 'cache_page', 10); 
        cache_set(uwwtd_get_cache_key_page_uwwtp_compliance($option), '', 'cache_page', 10);             
    }
}

function uwwtd_format_number($number, $precision = 0)
{
    return number_format($number, $precision, '.', ' ');
}

//     array(
//       1 =>  2000,
//       2 =>  10000,
//       3 =>  150000,
//       4 =>  0,    
//     );
function uwwtd_get_point_size_from_preset($preset, $behaviour)
{    
// dsm($preset);
    $weightClass = $preset->data['behaviors'][$behaviour]['arbitrary_classes'];
    $configuredWeight = explode("\n", $weightClass);
// dsm($configuredWeight);    
    $list = array();
    $numWeight = 1;
    foreach($configuredWeight as $oneweight) {
        $tmp = explode('|', $oneweight);
        $list[ $numWeight ] = (int)$tmp[1];
        $numWeight++; 
    }
// dsm($list);    
    return $list;  
}

// $GLOBALS['uwwtd']['ui']['compliance_color']  = array(  
//     'C' => "#4f91e1",
//     'NR' => "#a2a2a2",
//     'NC' => "#d93c3c",
//     'NI' => "#6b6b6b",                          
// );
function uwwtd_get_point_color_from_preset($preset)
{
    $configuredColor = $preset->data['behaviors']['openlayers_plus_behavior_scalepoints']['fields_colors_values'];
    $configuredColor = explode("\n", $configuredColor);
    $list = array();    
    foreach($configuredColor as $onecolor) {
        $tmp = explode('|', $onecolor);
        $list[ $tmp[1] ] = $tmp[2]; 
    }
    return $list;
}

//     $optionstyle['piechart'] = array(
//         'field_aggc1_value' => array(
//             'label' => 'Collective system',
//             'color' => '#74FFE0',
//         ),
//         'field_aggc2_value' => array(
//             'label' => 'Individual and Appropriate Systems (IAS)',
//             'color' => '#BD8842',
//         ),
//         'field_aggpercwithouttreatment_value' => array(
//             'label' => 'Discharge without treatment',
//             'color' => '#C00000',
//         ),                
//     ); 
function wwtd_get_piechart_from_preset($preset, $behaviour)
{    
// dsm($preset);
    $configuredPiechart = $preset->data['behaviors'][$behaviour]['fields_series'];
    $configuredPiechart = explode("\n", $configuredPiechart);
// dsm($configuredPiechart);    
    $list = array();
    foreach($configuredPiechart as $onefield) {
        $tmp = explode('|', $onefield);
        $list[ $tmp[0] . '_value' ] = array(
            'label' => $tmp[1],
            'color' => $tmp[2],
        );
    }
// dsm($list);    
    return $list;  
}

