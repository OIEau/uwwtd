<?php

require_once(drupal_get_path('module', 'uwwtd') . '/inc/uwwtd.config.inc');
require_once(drupal_get_path('module', 'uwwtd') . '/inc/utils.inc');

//refaire menu listerror
//dans bulk datadeletion, supprimer error
//get all label from database ?   $field = field_info_field('field_uwwtd_err_category');
//get all color from database ?   $field = field_info_field('field_uwwtd_err_category');

function uwwtd_menu(){
	$items = array();
	$items['data'] = array(
		'title' => t('Data management center'),
		'description' => t('A center to manage all the site data'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('uwwtd_data_form'),
		//'access callback' => TRUE,
		'access arguments' => array('Data-management access'),
		'file' => 'data_center.inc',
		'file path' => drupal_get_path('module', 'uwwtd') . '/inc/',
		);
	$items['data/import'] = array(
		'title' => t('Data import'),
		'description' => t('Form to upload new data'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('uwwtd_import_form'),
		//'access callback' => TRUE,
		'access arguments' => array('Data-management access'),
		'file' => 'data_center.inc',
		'file path' => drupal_get_path('module', 'uwwtd') . '/inc/',
		);
	$items['data/shapes'] = array(
		'title' => t('Receiving areas\' shapes upload'),
		'description' => t('Form to upload the receiving areas\' shapes'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('uwwtd_shapes_form'),
		//'access callback' => TRUE,
		'access arguments' => array('Data-management access'),
		'file' => 'data_center.inc',
		'file path' => drupal_get_path('module', 'uwwtd') . '/inc/',
		);
	$items['data/check'] = array(
		'title' => t('Data checking process'),
		'description' => t('Process to check all the entered data for a given year'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('uwwtd_check_form'),
		//'access callback' => TRUE,
		'access arguments' => array('Data-management access'),
		'file' => 'data_center.inc',
		'file path' => drupal_get_path('module', 'uwwtd') . '/inc/',
		);
	$items['data/conformity'] = array(
		'title' => t('Data conformity'),
		'description' => t('Data conformity page'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('uwwtd_conformity_form'),
		//'access callback' => TRUE,
		'access arguments' => array('Data-management access'),
		'file' => 'data_center.inc',
		'file path' => drupal_get_path('module', 'uwwtd') . '/inc/',
		);


	$items['register']=array(
		'title' => t('Register'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('uwwtd_register_form'),
		//'access callback' => TRUE,
		'access arguments' => array('Data-management access'),
		'file' => 'inc/register.inc',
		'file path' => drupal_get_path('module', 'uwwtd')
	);

	$items['id/%/%'] = array(
        'page callback' => 'uwwtd_node_redirect',
        'page arguments' => array(1,2),
        'access arguments' => true,
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
  $items['id/%/%/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['id/%/%/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'uwwtd_node_redirect',
    'page arguments' => array(1,2,3),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  //redirection treatment-plant
  $items['treatment-plant/%'] = array(
    'page callback' => 'uwwtd_node_redirection',
    'page arguments' => array(1),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );
  //redirection agglomeration
  $items['agglomeration/%'] = array(
    'page callback' => 'uwwtd_node_redirection',
    'page arguments' => array(1),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );
  //redirection receiving-area
  $items['receiving-area/%'] = array(
    'page callback' => 'uwwtd_node_redirection',
    'page arguments' => array(1),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );
  //redirection discharge-point
  $items['discharge-point/%'] = array(
    'page callback' => 'uwwtd_node_redirection',
    'page arguments' => array(1),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );
  ///////////////////////////////////////////////////////////////////
  $items['agglomerations/compliance'] = array(
    'page callback' => 'uwwtd_page_agglomeration_compliance',
    'page arguments' => array(),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );
  $items['agglomerations/compliance/csv'] = array(
    'page callback' => 'uwwtd_page_agglomeration_compliance',
    'page arguments' => array('csv'),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );
  $items['agglomerations/compliance/xls'] = array(
    'page callback' => 'uwwtd_page_agglomeration_compliance',
    'page arguments' => array('xls'),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );
  $items['agglomerations/connection'] = array(
    'page callback' => 'uwwtd_page_agglomeration_connection',
    'page arguments' => array(),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );
  $items['agglomerations/connection/csv'] = array(
    'page callback' => 'uwwtd_page_agglomeration_connection',
    'page arguments' => array('csv'),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );
  $items['agglomerations/connection/xls'] = array(
    'page callback' => 'uwwtd_page_agglomeration_connection',
    'page arguments' => array('xls'),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );    
  $items['uwwtps/compliance'] = array(
    'page callback' => 'uwwtd_page_uwwtps_compliance',
    'page arguments' => array(),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );
  $items['uwwtps/compliance/csv'] = array(
    'page callback' => 'uwwtd_page_uwwtps_compliance',
    'page arguments' => array('csv'),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );
  $items['uwwtps/compliance/xls'] = array(
    'page callback' => 'uwwtd_page_uwwtps_compliance',
    'page arguments' => array('xls'),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );
  $items['uwwtps/treatment'] = array(
    'page callback' => 'uwwtd_page_uwwtps_treatment',
    'page arguments' => array(),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );
  $items['uwwtps/treatment/csv'] = array(
    'page callback' => 'uwwtd_page_uwwtps_treatment',
    'page arguments' => array('csv'),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );
  $items['uwwtps/treatment/xls'] = array(
    'page callback' => 'uwwtd_page_uwwtps_treatment',
    'page arguments' => array('xls'),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );    
  $items['uwwtps/pressure'] = array(
    'page callback' => 'uwwtd_page_uwwtps_pressure',
    'page arguments' => array(),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );
  $items['uwwtps/pressure/csv'] = array(
    'page callback' => 'uwwtd_page_uwwtps_pressure',
    'page arguments' => array('csv'),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );
  $items['uwwtps/pressure/xls'] = array(
    'page callback' => 'uwwtd_page_uwwtps_pressure',
    'page arguments' => array('xls'),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );    
  $items['download'] = array(
    'page callback' => 'uwwtd_page_download',
    'page arguments' => array(),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );  
  ///////////////////////////////////////////////////////////////////
//     $items['report/pdf'] = array(
// 		'title' => t('PDF report'),
// 		'description' => t('Data conformity page'),
// 		'page callback' => 'uwwtd_make_pdf_report',
// 		//'page arguments' => array('uwwtd_conformity_form'),
// 		'access callback' => TRUE,
// 		//'access arguments' => array('Data-management access'),
// 		'file' => 'pdf.inc',
// 		'file path' => drupal_get_path('module', 'uwwtd')
// 	);
  $items['debug-export-xml/nid/%/aggcode/%'] = array(
    'page callback' => 'debug_export_xml',
    'page arguments' => array(2,3,4),
//     'access callback' => true,
    'access arguments' => array('Data-management access'),
    'type' => MENU_CALLBACK,
// 	'file' => 'utils.inc',
// 	'file path' => drupal_get_path('module', 'uwwtd') . '/inc/'
  );
    $items['uwwtd-debug']=array(
    	'title' => t('Debug'),
    	'page callback' => 'uwwtd_debug',
    	//'page arguments' => array('uwwtd_debug_form'),
    	//'access callback' => TRUE,
    	'access arguments' => array('Data-management access'),
     	'file' => 'utils.inc',
     	'file path' => drupal_get_path('module', 'uwwtd') . '/inc',
    );
  $items['stats/querys'] = array(
  		'page callback' => 'uwwtd_page_stats_querys',
  		'page arguments' => array(),
  		'access callback' => true,
  		'access arguments' => true,
  		'type' => MENU_CALLBACK,
  		'file' => 'uwwtd.stats.inc',
  		'file path' => drupal_get_path('module', 'uwwtd')
  );
  $items['stats/graphs'] = array(
  		'page callback' => 'uwwtd_stats_graphs_page',
  		'page arguments' => array(),
  		'access callback' => true,
  		'access arguments' => true,
  		'type' => MENU_CALLBACK,
  		'file' => 'uwwtd.graphs.inc',
  		'file path' => drupal_get_path('module', 'uwwtd')
  );
	//MENUS FOR CONFIGURATION

  	$items['admin/config/uwwtd'] = array(
      'title' => 'uwwtd configuration',
      'description' => 'Settings for the uwwtd application',
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('Data-management access'),
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
  	);

    $items['admin/configuration/uwwtd/extlinks'] = array(
    //'page callback' => 'uwwtd_page_config_ext_links',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('construct_extlinks_form'),
    'access callback' => true,
    'access arguments' => array('Data-management access'),
    'type' => MENU_CALLBACK,
    'file' => 'uwwtd.forms.inc'
    );
    
    $items['admin/configuration/uwwtd/general'] = array(
    //'page callback' => 'uwwtd_page_config_ext_links',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uwwtd_general_config'),
    'access callback' => true,
    'access arguments' => array('Data-management access'),
    'type' => MENU_CALLBACK,
    'file' => 'inc/uwwtd.admin.config.inc'
    );    

	 $items['admin/configuration/uwwtd/download'] = array(
    //'page callback' => 'uwwtd_page_config_ext_links',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uwwtd_download_config'),
    'access callback' => true,
    'access arguments' => array('Data-management access'),
    'type' => MENU_CALLBACK,
    'file' => 'inc/uwwtd.admin.config.inc'
    );  
	
  //rebuild slovenia deadline
    $items['correction_slovenia_date'] = array(
    'page callback' => 'uwwtd_correction_slovenia_date',
//     'access callback' => true,
    'access arguments' => array('Data-management access'),
    'type' => MENU_CALLBACK,
    'file' => 'correction.inc',
    'file path' => drupal_get_path('module', 'uwwtd') . '/inc',
    );

  return $items;
}

function uwwtd_node_redirect($annee, $id, $action = null){
	$query = db_select('field_data_field_siteid', 's');
	$query->fields('s', array('entity_id', 'field_siteid_value'));
	$query->condition('field_siteid_value', db_like($annee.'_'.$id), 'LIKE');

	$result = $query->execute();
	$node = false;
	while($record = $result->fetchAssoc()) {
		$node = node_load($record['entity_id']);
	}

	if($action == 'edit') {
		drupal_goto('node/' . $node->nid . '/edit');
	}

	if($node == false){
		drupal_set_message(t("The element you were searching for doesn't exist, sorry."), 'warning');
		drupal_goto('<front>');
	}
	else{
		drupal_set_title($node->title);
		return render(node_view($node, 'full'));
	}
}



//test
function uwwtd_node_redirection($id){
	$page_url = "http://".$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];
	//echo "<pre>";print_r($_SERVER['REQUEST_URI']);echo "</pre>";
	$type= explode("/",$page_url);
	$type= $type[4];
	//echo "<pre>";print_r($type);echo "</pre>";
	if($type=='treatment-plant'){
		$typeR='uww';
		$id= strtolower($id);
	}
	if($type=='agglomeration'){
		$typeR='agg';
		$id= strtolower($id);
	}
	if($type=='receiving-area'){
		$typeR='rca';
		$id= strtolower($id);
	}
	if($type=='discharge-point'){
		$typeR='dcp';
		$id= strtolower($id);
	}
	//selectionne la dernière année
// 	$query = "SELECT MAX(field_anneedata_value) FROM {field_data_field_anneedata}";
// 	$result = db_query($query);
// 	$annee = $result->fetchField();
    $annee = uwwtd_get_max_annee();

	$query = db_select('field_data_field_siteid', 's');
	$query->fields('s', array('entity_id', 'field_siteid_value'));
	$query->condition('field_siteid_value', db_like($annee.'_'.$typeR.'_'.$id), 'LIKE');
	$result = $query->execute();
	$record = $result->fetchAssoc();
	$node = false;

	if($record ==''){
		$query = db_select('field_data_field_siteid', 's');
		$query->fields('s', array('entity_id', 'field_siteid_value'));
		$query->condition('field_siteid_value',  db_like($annee.'_'.$id), '=');
		$result = $query->execute();
		$record = $result->fetchAssoc();
		$node=$record['entity_id'];
	}else{
		$node=$record['entity_id'];
	}
	if($node == false){
		drupal_set_message(t("The element you were searching for doesn't exist, sorry."), 'warning');
		drupal_goto('<front>');
	}
	else{
            drupal_goto($GLOBALS['base_url'] . '/'.$type.'/'.$id.'/'.$annee);
    		drupal_set_title($node->title);        
	}
}

// function uwwtd_debug_form($form, &$form_state){
// 	// definition du champ input de type file
// 	$form['uwwtd_file'] = array(
// 		'#type' => 'managed_file',
// 		'#title' => t('Data file'),
// 		'#upload_validators' => array('file_validate_extensions' => array('shp')),
// 		'#required' => TRUE,
// 	);
//
// 	// Bouton envoyer
// 	$form['submit_button'] = array(
// 		'#type' => 'submit',
// 		'#value' => t('Submit'),
// 	);
//
// 	// Fonction a appeller quand on clique sur envoyer
// 	$form['#submit'][] = 'uwwtd_debug_submit_handler';
//     return $form;
// }

function uwwtd_views_pre_build(&$view){
	//dsm($view);
	if(
		$view->name == 'waste_water_network' ||
		$view->name == 'uwwtp_map' ||
		$view->name == 'uwwtp_treatment' ||
		$view->name == 'agglomeration' ||
		$view->name == 'agglomeration_conformity' ||
		$view->name == 'data_deletion'
	){
// 		$year = db_query(
// 			"SELECT MAX(field_anneedata_value) FROM {field_data_field_anneedata}"
// 		)->fetchField();
        $year = uwwtd_get_max_annee();
		if(!empty($year)) $view->filter['field_anneedata_value']->value = $year;
	}
    
//     if ($view->name == 'error_list') {
//         dsm($view);
//     }
}

function uwwtd_views_pre_render(&$view){
// 	dsm($view);

//todo use config 
// $GLOBALS['uwwtd_errors_type']['category'] = array(
//     'input' => 0,
//     'linking' => 1,
//     'geometry' => 2,
//     'conformity' => 3,
//     'format' => 4,
// );
// // 0|Notification
// // 1|Warning
// // 2|Error
// //$GLOBALS['uwwtd_errors_type']['type']['error']
// $GLOBALS['uwwtd_errors_type']['type'] = array(
//     'notification' => 0,
//     'warning' => 1,
//     'error' => 2,
// );

    if ($view->name == 'error_list' && is_array($view->result)) {
        $type_error = array_flip($GLOBALS['uwwtd_errors_type']['type']);
        $category_error = array_flip($GLOBALS['uwwtd_errors_type']['category']);
// dsm($type_error);
// dsm($category_error);
//         
        foreach($view->result as $r => $result){
            if(isset($view->result[$r]->uwwtd_import_errors_type)){
//                 dsm($view->result[$r]);
// dsm($view->result[$r]->uwwtd_import_errors_type);
// dsm($type_error[$view->result[$r]->uwwtd_import_errors_type]);
                if (isset($type_error[$view->result[$r]->uwwtd_import_errors_type])) {
                    $view->result[$r]->uwwtd_import_errors_type = t($type_error[$view->result[$r]->uwwtd_import_errors_type]);
                }
                if (isset($category_error[$view->result[$r]->uwwtd_import_errors_category])) {
                    $view->result[$r]->uwwtd_import_errors_category = t($category_error[$view->result[$r]->uwwtd_import_errors_category]);
                }
//                 break;
            }    
        }
    }
    
	// if uwwtd treatment view
	if($view->name == 'uwwtp_treatment' && $view->result !== TRUE){
		foreach($view->result as $r => $result){
			//dsm($result);
		    //$view->result[$r]->field = 1;
		    if(isset($view->result[$r]->field_field_uwwprimarytreatment[0]['raw']['value'])){
		    	//dsm($view->result[$r]->field_field_uwwprimarytreatment[0]);
		    	if($view->result[$r]->field_field_uwwprimarytreatment[0]['raw']['value'] === '1') $view->result[$r]->field_field_uwwprimarytreatment[0]['rendered']['#markup'] = t('Yes');
		    	else $view->result[$r]->field_field_uwwprimarytreatment[0]['rendered']['#markup'] = t('No');
		    }
		    if(isset($view->result[$r]->field_field_uwwsecondarytreatment[0]['raw']['value'])){
		    	if($view->result[$r]->field_field_uwwsecondarytreatment[0]['raw']['value'] === '1') $view->result[$r]->field_field_uwwsecondarytreatment[0]['rendered']['#markup'] = t('Yes');
		    	else $view->result[$r]->field_field_uwwsecondarytreatment[0]['rendered']['#markup'] = t('No');
		    }
		    if(isset($view->result[$r]->field_field_uwwnremoval[0]['raw']['value'])){
		    	if($view->result[$r]->field_field_uwwnremoval[0]['raw']['value'] === '1') $view->result[$r]->field_field_uwwnremoval[0]['rendered']['#markup'] = t('Yes');
		    	else $view->result[$r]->field_field_uwwnremoval[0]['rendered']['#markup'] = t('No');
		    }
		    if(isset($view->result[$r]->field_field_uwwpremoval[0]['raw']['value'])){
		    	if($view->result[$r]->field_field_uwwpremoval[0]['raw']['value'] === '1') $view->result[$r]->field_field_uwwpremoval[0]['rendered']['#markup'] = t('Yes');
		    	else $view->result[$r]->field_field_uwwpremoval[0]['rendered']['#markup'] = t('No');
		    }
		}
	}
}

function uwwtd_form_views_exposed_form_alter(&$form, &$form_state){
	//dsm($form);
		// for treatment plant booleans
		if($form['#id'] == "views-exposed-form-uwwtp-treatment-page"){
			$options = array(
				'All' => t('- All -'),
				'1' => t('Yes'),
				'0' => t('No')
			);

			$form['field_uwwprimarytreatment_value'] = array(
				'#type' => 'select',
				'#options' => $options
			);
			$form['field_uwwsecondarytreatment_value'] = array(
				'#type' => 'select',
				'#options' => $options
			);
			$form['field_uwwnremoval_value'] = array(
				'#type' => 'select',
				'#options' => $options
			);
			$form['field_uwwpremoval_value'] = array(
				'#type' => 'select',
				'#options' => $options
			);
		}

		if(
			$form['#id'] == "views-exposed-form-waste-water-network-page" ||
			$form['#id'] == 'views-exposed-form-uwwtp-map-page' ||
			$form['#id'] == 'views-exposed-form-waste-water-network-openlayers-1' ||
			$form['#id'] == 'views-exposed-form-waste-water-network-openlayers-2' ||
			$form['#id'] == 'views-exposed-form-waste-water-network-openlayers-3' ||
			$form['#id'] == 'views-exposed-form-uwwtp-treatment-page' ||
			$form['#id'] == 'views-exposed-form-uwwtp-treatment-openlayers-2' ||
			$form['#id'] == 'views-exposed-form-uwwtp-treatment-attachment-1' ||
			$form['#id'] == 'views-exposed-form-agglomeration-page' ||
			$form['#id'] == 'views-exposed-form-agglomeration-openlayers-1' ||
			$form['#id'] == 'views-exposed-form-agglomeration-conformity-page' ||
			$form['#id'] == 'views-exposed-form-agglomeration-conformity-openlayers-1' ||
			$form['#id'] == 'views-exposed-form-data-deletion-page'
		){

			// Get all available years
			$query = db_select('field_data_field_anneedata', 'a');
			$query->fields('a', array('field_anneedata_value'));
			$query->orderBy('field_anneedata_value', 'DESC');
			$results = $query->execute();
			$years = array();
			while($record = $results->fetchAssoc()) {
				$years[$record['field_anneedata_value']] = $record['field_anneedata_value'];
			}
			//dsm($years);

			//$form_state['input']['field_anneedata_value'] = '2010';
			$form['field_anneedata_value'] = array(
				'#type' => 'select',
				'#options' => $years,
				//'#default_value' => array('2000' => '2000'),
			);
		}
    if(in_array($form['#id'], array("views-exposed-form-uwwtp-map-page"))){
		if(isset($form['field_physicalcapacityinput_value_op'])){
			$cap_op_options= $form['field_physicalcapacityinput_value_op']['#options'];
			unset($cap_op_options['between'], $cap_op_options['not between'], $cap_op_options['empty'], $cap_op_options['not empty']);
			$form['field_physicalcapacityinput_value_op']['#options'] = $cap_op_options;
		}
		if(isset($form['field_uwwnuts_value'])){
			$query = db_select('field_data_field_uwwnuts', 'nuts');
				$query->fields('nuts', array('field_uwwnuts_value'));
				$query->condition('deleted', 0,'=');
				$query->groupBy('nuts.field_uwwnuts_value');//GROUP BY user ID
			$result = $query->execute();
			$nuts_options=array();
			while($record = $result->fetchAssoc()) {
				//dsm($record);
				$nuts_options[$record['field_uwwnuts_value']]=$record['field_uwwnuts_value'];
			}

			$old = $form['field_uwwnuts_value'];
			//dsm($old);
			//dsm($form_state);
			$form['field_uwwnuts_value'] = array(
				'#type'=>'select',
				'#options'=>$nuts_options,
				'#default_value'=>$old['#default_value'],
				'#empty_value'=>'',
				'#empty_option'=>t('- All -')
			);
		}
	}
}

// function uwwtd_debug_submit_handler($form, &$form_state){
// 	//require_once ( dirname(__FILE__) . '/shpParser.php');
// 	require_once ( dirname(__FILE__) . '/ShapeFile.inc.php');
// 	$file = file_load($form_state['values']['uwwtd_file']);
// 	$uri = $file->uri;
//
// 	// On upload le file et la fonction renvoie le nouveau nom du fichier
// 	$ext = '.shp';
// 	$newFile = uwwtd_file_upload($file, $ext);
// 	$path = file_create_url($newFile->uri);
// 	$shp = new ShapeFile($path, array('noparts' => false));
// 	  $records = array();
// 		foreach($shp->records as $record){
// 		$dbf_data = $record->getDbfData();
// 		$shp_data = $record->getShpData();
//
// 		//Dump the information
// 		$obj = array(
// 		  'type' => $shp->getShpTypeName($record->getShpType())
// 		);
//
// 		$obj['shape'] = $shp_data;
// 		$obj['meta'] = $dbf_data;
//
// 		$records[] = $obj;
// 	}
// 	dsm($records);
// }




// permission to view data pages
function uwwtd_permission() {
  return array(
    'Data-management access' => array(
      'title' => t('Access to the data management pages'),
    )
  );
}

function uwwtd_cron(){
    $lastGen = variable_get('uwwtd_wfs_table', 0);
// 	if((time() - $lastGen) > (60*60*24)){
	// Requires postgres for DROP TABLE IF
	db_query('DROP TABLE IF EXISTS wfs."UWWTD_UrbanWasteWaterTreatmentPlant";
	CREATE TABLE wfs."UWWTD_UrbanWasteWaterTreatmentPlant"
        AS SELECT * from public."UWWTD_UrbanWasteWaterTreatmentPlant";
	ALTER TABLE wfs."UWWTD_UrbanWasteWaterTreatmentPlant"
	ADD PRIMARY KEY ("siteId");

	DROP TABLE IF EXISTS wfs."UWWTD_Agglomeration";
	CREATE TABLE wfs."UWWTD_Agglomeration"
        AS SELECT * from public."UWWTD_Agglomeration";
	ALTER TABLE wfs."UWWTD_Agglomeration"
	ADD PRIMARY KEY ("siteId");

	DROP TABLE IF EXISTS wfs."UWWTD_ReceivingArea";
	CREATE TABLE wfs."UWWTD_ReceivingArea"
        AS SELECT * from public."UWWTD_ReceivingArea";
	ALTER TABLE wfs."UWWTD_ReceivingArea"
	ADD PRIMARY KEY ("siteId");

	DROP TABLE IF EXISTS wfs."UWWTD_DischargePoint";
	CREATE TABLE wfs."UWWTD_DischargePoint"
        AS SELECT * from public."UWWTD_DischargePoint";
	ALTER TABLE wfs."UWWTD_DischargePoint"
	ADD PRIMARY KEY ("siteId");
    ');

    	variable_set('uwwtd_wfs_table', time());
// 	}
}



//=============================Fonction de gestion des erreurs de l'import======================
function uwwtd_errors_get_category($cat=null){
    $categories = array(
        0=>'Input',
        1=>'Linking',
        2=>'Geometry',
        3=>'Conformity',
        4=>'Format',
    );
    if($cat){
        if(isset($categories[$cat])) return $categories[$cat];
        else return false;
    }
    else return $categories;
}
function uwwtd_errors_get_types($type=null){
    $types = array(
        0=>'Notification',
        1=>'Warning',
        2=>'Error',
    );
    if($type){
        if(isset($types[$type])) return $types[$type];
        else return false;
    }
    else return $types;
}
//=========================TODO for gettings error with an entity_id & entity_type
function uwwtd_errors_get_errors($entity_id, $entity_type){
    $errors = array();

    //TODO db_select();

    return $errors;
}


function uwwtd_block_info() {

  $blocks['map_home'] = array(
                        'info' => t('Map home'),
                        'cache' => DRUPAL_NO_CACHE,
                        );
  return $blocks;
}

function uwwtd_get_cache_key_agglomeration($option)
{
    return 'data_agglomeration_' . $option['field_anneedata_value'];
}

function uwwtd_get_cache_key_uwwtp($option)
{
    return 'data_uwwtp_' . $option['field_anneedata_value'];
}

function uwwtd_get_cache_key_dcp($option)
{
    return 'data_dcp_' . $option['field_anneedata_value'];
}

function uwwtd_get_cache_key_block_home()
{
    return 'data_block_map_home';
}

function uwwtd_is_user_anonymous()
{
    global $user;
    return ($user->uid == 0);
}

function uwwtd_get_cache_key_page_agglo_compliance($option)
{
    return 'page_agglomeration_compliance_' . $option['field_anneedata_value'];
}

function uwwtd_get_cache_key_page_agglo_treatment($option)
{
    return 'page_agglomeration_treatment_' . $option['field_anneedata_value'];
}

function uwwtd_get_cache_key_page_uwwtp_treatment($option)
{
    return 'page_uwwtp_treatment_' . $option['field_anneedata_value'];
}

function uwwtd_get_cache_key_page_uwwtp_compliance($option)
{
    return 'page_uwwtp_compliance_' . $option['field_anneedata_value'];
}

function uwwtd_get_cache_key_page_uwwtp_pressure($option)
{
    return 'page_uwwtp_pressure_' . $option['field_anneedata_value'];
}

function uwwtd_block_view($delta = ''){
    switch ($delta) {
        case 'map_home':
            $cache = '';
            $cache_name = uwwtd_get_cache_key_block_home();
            //we always need to build the map because openlayer set some css and js
            $preset_name = 'waste_water_treatment_network_map';   //layer agglomeration_treatment 'Agglomeration connection map and list'
            $preset = openlayers_preset_load($preset_name);
            $map    = openlayers_build_map($preset->data);
            $put_in_cache = uwwtd_is_user_anonymous();
            if (UWWTD_CACHE_ACTIVE === true && true === $put_in_cache) {
                $cache = cache_get($cache_name, 'cache_block');
            }
            if (!empty($cache) && isset($cache->data) && !empty($cache->data)) {
                $block['content'] = $cache->data;
            } else {
                $option['field_anneedata_value'] = uwwtd_get_max_annee();

                $data = uwwtd_get_data_agglomeration($option);
                //     dsm($data);
                //e.vincent / bruno want to show only agglo > 2000
                $filter = array();
                $filter['filter'] = array();
                $filter_force = array();
                $filter_force['filter']['field_agggenerated_value_op'] = '>';
                $filter_force['filter']['field_agggenerated_value']['value'] = variable_get('min_aggenerated_display', '2000');
                if (variable_get('display_only_active', '1') == 1) {
                    $filter_force['filter']['field_status_value'] = '1';
                }
                uwwtd_filter_data($filter, $data, $filter_force);
                //     uwwtd_filter_data($filter, $data);
                //     dsm($data);
                $optionstyle = array();
                $optionstyle['weight']['list'] = uwwtd_get_point_size_from_preset($preset, 'openlayers_plus_behavior_scalepoints');
                $optionstyle['weight']['field'] = 'field_agggenerated_value';
                $optionstyle['popup_title_type'] = 'agglomeration';
                $optionstyle['popup'] = array(
                    'field_agggenerated_value_format' => array('label' => 'Generated load (p.e.)'),
                    'field_aggcompliance_value_format' => array('label' => 'Compliance'),
                    'field_aggart3compliance_value_format' => array('label' => 'Connection compliance'),
                    'field_aggart4compliance_value_format' => array('label' => '2nd treatment compliance'),
                    'field_aggart5compliance_value_format' => array('label' => '3rd treatment compliance'),
                );			
				
                $features['agglomerations'] = uwwtd_build_feature($data, $optionstyle, $returnvalue);
                unset($data);
                $data = uwwtd_get_data_uwwtp($option);
                $filter = array();
                $filter['filter'] = array();                
                $filter_force = array();
                if (variable_get('display_only_active', '1') == 1) {
                    $filter_force['filter']['field_status_value'] = '1';
                }
                uwwtd_filter_data($filter, $data, $filter_force);                
                $optionstyle = array();
                $optionstyle['popup_title_type'] = 'treatment-plant';
                $optionstyle['popup'] = array(
                    'field_uwwcompliance_value_format' => array('label' => 'Compliance'),
                    'field_uwwprimarytreatment_value_format' => array('label' => 'Primary treatment'),
                    'field_uwwsecondarytreatment_value_format' => array('label' => 'Secondary treatment'),
                    'field_uwwnremoval_value_format' => array('label' => 'N-removal'),
                    'field_uwwpremoval_value_format' => array('label' => 'P-removal'),
                );
                $features['uwwtp'] = uwwtd_build_feature($data, $optionstyle, $returnvalue);
                unset($data);
                $data = uwwtd_get_data_dcp($option);
                $optionstyle = array();
                $optionstyle['popup_title_type'] = 'discharge-point';
                $features['dcp'] = uwwtd_build_feature($data, $optionstyle, $returnvalue);
                unset($data);

                $block['content'] =  uwwtd_build_map($map, $features);
                if (true === $put_in_cache) {
                    cache_set($cache_name, $block['content'], 'cache_block', CACHE_PERMANENT);
                }
            }
            return $block;
            break;
        default:
            break;
    }
}

/**
 * Get all agglomeration data for a year
 */
function uwwtd_get_data_agglomeration($option){
    //        dsm(__FUNCTION__);
    $cache_name = uwwtd_get_cache_key_agglomeration($option);
//     dsm($cache_name);
    $cache = '';
	$putincache =true;
    /*
	if(isset($option['rbd']) && $option['rbd'] !="All"){
		$putincache =false;
	}*/
    if ($putincache && UWWTD_CACHE_ACTIVE === true) {
        $cache = cache_get($cache_name, 'cache');
    }
//     dsm($cache);
    if (!empty($cache) && isset($cache->data) && !empty($cache->data)) {
        return  $cache->data;
    }

    $data = array();

    $query = 'select distinct on (n.title) n.title,
			 f_annee.field_anneedata_value,
			 f_aggcode.field_inspireidlocalid_value,
			 f_agggenerated.field_agggenerated_value,
			 f_art3.field_aggart3compliance_value,
			 f_art4.field_aggart4compliance_value,
			 f_art5.field_aggart5compliance_value,
			 f_art6.field_aggart6compliance_value,
			 f_comp.field_aggcompliance_value,
			 f_nuts.field_regionnuts_value,
		     nut.n3nm,
			 f_aggc2.field_aggc2_value,
			 f_aggc1.field_aggc1_value,
			 f_aggpercwithouttreatment.field_aggpercwithouttreatment_value,
             f_status.field_status_value,
			 st_astext(st_transform(f_geo.the_geom, 4326)) wkt,
			 f_article17_agglo.field_article17_agglo_nid,
			 f_dcpre_agglo.field_dcpreceivingwater_value,
            rbd.eurbdcode as rbd,
            rbd.rbdname 
    from {node} n
        left join
            {field_data_field_anneedata} f_annee
                ON n.nid = f_annee.entity_id
        left join
            {field_data_field_inspireidlocalid} f_aggcode
                ON n.nid = f_aggcode.entity_id
        left join
            {field_data_field_agggenerated} f_agggenerated
                ON n.nid = f_agggenerated.entity_id
        left join
            {field_data_field_aggart3compliance} f_art3
                ON n.nid = f_art3.entity_id
        left join
            {field_data_field_aggart4compliance} f_art4
                ON n.nid = f_art4.entity_id
        left join
            {field_data_field_aggart5compliance} f_art5
                ON n.nid = f_art5.entity_id
        left join
            {field_data_field_aggart6compliance} f_art6
                ON n.nid = f_art6.entity_id
        left join
            {field_data_field_aggcompliance} f_comp
                ON n.nid = f_comp.entity_id
        left join
            {field_data_field_regionnuts} f_nuts
                ON n.nid = f_nuts.entity_id
		LEFT JOIN regions_nuts nut ON f_nuts.field_regionnuts_value = nut.n3cd
        left join
            {field_data_field_aggc2} f_aggc2
                ON n.nid = f_aggc2.entity_id
        left join
            {field_data_field_aggc1} f_aggc1
                ON n.nid = f_aggc1.entity_id
        left join
            {field_data_field_aggpercwithouttreatment} f_aggpercwithouttreatment
                ON n.nid = f_aggpercwithouttreatment.entity_id
        left join
            {field_data_field_status} f_status
                ON n.nid = f_status.entity_id
        left join
            {field_data_field_position_geo} f_geo
                ON n.nid = f_geo.entity_id
		left join
            {field_data_field_article17_agglo} f_article17_agglo
                ON n.nid = f_article17_agglo.entity_id
		left join
            {field_data_field_linked_discharge_points} f_dcp_agglo
                ON n.nid = f_dcp_agglo.entity_id
		left join
            {field_data_field_dcpreceivingwater} f_dcpre_agglo
                ON f_dcp_agglo.field_linked_discharge_points_nid = f_dcpre_agglo.entity_id
        left join 
            river_basin rbd
                ON ST_Intersects(ST_Transform(f_geo.the_geom,4326), rbd.the_geom4326)        
    where n.type = :typenode
        and f_annee.field_anneedata_value = :annee
	order by n.title 	
    ';
    $param = array(
        ':typenode' => 'agglomeration',
        ':annee' => $option['field_anneedata_value'],
    );
    
   // dsm($param);
    try {
        
        $result = db_query($query, $param);
        while($row = $result->fetchAssoc()) {
            //override PD and QC value, we don't want to display QC and PD (for now)
            if (isset($GLOBALS['uwwtd']['ui']['compliance_connection'][ $row['field_aggcompliance_value'] ])) {
                $row['field_aggcompliance_value'] = $GLOBALS['uwwtd']['ui']['compliance_connection'][ $row['field_aggcompliance_value'] ];
            }
            if (isset($GLOBALS['uwwtd']['ui']['compliance_connection'][ $row['field_aggart3compliance_value'] ])) {
                $row['field_aggart3compliance_value'] = $GLOBALS['uwwtd']['ui']['compliance_connection'][ $row['field_aggart3compliance_value'] ];
            }
            if (isset($GLOBALS['uwwtd']['ui']['compliance_connection'][ $row['field_aggart4compliance_value'] ])) {
                $row['field_aggart4compliance_value'] = $GLOBALS['uwwtd']['ui']['compliance_connection'][ $row['field_aggart4compliance_value'] ];
            }
            if (isset($GLOBALS['uwwtd']['ui']['compliance_connection'][ $row['field_aggart5compliance_value'] ])) {
                $row['field_aggart5compliance_value'] = $GLOBALS['uwwtd']['ui']['compliance_connection'][ $row['field_aggart5compliance_value'] ];
            }
            if (isset($GLOBALS['uwwtd']['ui']['compliance_connection'][ $row['field_aggart6compliance_value'] ])) {
                $row['field_aggart6compliance_value'] = $GLOBALS['uwwtd']['ui']['compliance_connection'][ $row['field_aggart6compliance_value'] ];
            }

            $row['field_agggenerated_value_format'] = is_null($row['field_agggenerated_value']) ? '' : uwwtd_format_number($row['field_agggenerated_value']);
            $row['field_aggcompliance_value_format'] = is_null($row['field_aggcompliance_value']) ? '' : $GLOBALS['uwwtd']['ui']['field']['compliance_label'][$row['field_aggcompliance_value']];
            $row['field_aggart3compliance_value_format'] = is_null($row['field_aggart3compliance_value']) ? '' : $GLOBALS['uwwtd']['ui']['field']['compliance_label'][$row['field_aggart3compliance_value']];
            $row['field_aggart4compliance_value_format'] = is_null($row['field_aggart4compliance_value']) ? '' : $GLOBALS['uwwtd']['ui']['field']['compliance_label'][$row['field_aggart4compliance_value']];
            $row['field_aggart5compliance_value_format'] = is_null($row['field_aggart5compliance_value']) ? '' : $GLOBALS['uwwtd']['ui']['field']['compliance_label'][$row['field_aggart5compliance_value']];
            $row['field_aggart6compliance_value_format'] = is_null($row['field_aggart6compliance_value']) ? '' : $GLOBALS['uwwtd']['ui']['field']['compliance_label'][$row['field_aggart6compliance_value']];
            $row['field_aggc1_value_format'] = is_null($row['field_aggc1_value']) ? '' : uwwtd_format_number($row['field_aggc1_value'], 1);
            $row['field_aggc2_value_format'] = is_null($row['field_aggc2_value']) ? '' : uwwtd_format_number($row['field_aggc2_value'], 1);
            $row['field_aggpercwithouttreatment_value_format'] = is_null($row['field_aggpercwithouttreatment_value']) ? '' : uwwtd_format_number($row['field_aggpercwithouttreatment_value'], 1);

			if($row['field_article17_agglo_nid'] == "" || is_null($row['field_article17_agglo_nid'])){
				$row['field_article17_agglo_value_format'] =  'No';
			}
			else{
				$row['field_article17_agglo_value_format'] = 'Yes';
			}
			
			if (isset($GLOBALS['uwwtd']['ui']['field']['agglomeration'][$row['field_regionnuts_value']])) {
                $row['field_regionnuts_value'] = $GLOBALS['uwwtd']['ui']['agglomeration'][ $row['field_regionnuts_value'] ];
            }
			if (isset($GLOBALS['uwwtd']['ui']['field']['agglomeration'][$row['field_dcpreceivingwater_value']])) {
                $row['field_dcpreceivingwater_value'] = $GLOBALS['uwwtd']['ui']['agglomeration'][ $row['field_dcpreceivingwater_value'] ];
            }
            $data[] = $row;
        }
		if($putincache){
			cache_set($cache_name, $data, 'cache', CACHE_PERMANENT);
		}
        
    }catch(Exception $e) {
        dsm($e->getMessage());
    }
// dsm($data);
    return $data;
}

function uwwtd_get_data_uwwtp($option)
{
    $cache_name = uwwtd_get_cache_key_uwwtp($option);
    $cache  = '';
    $putincache =true;
	
    /*if(isset($option['rbd']) && $option['rbd'] !="All"){
		$putincache =false;
	}*/
    if ($putincache && UWWTD_CACHE_ACTIVE === true) {
        $cache = cache_get($cache_name, 'cache');
    }
    if (!empty($cache) && isset($cache->data) && !empty($cache->data)) {
        return  $cache->data;
    }

    $data = array();
    $query = 'select distinct on (n.title) n.title,
		f_annee.field_anneedata_value,
		f_uwwcode.field_inspireidlocalid_value,
		f_comp.field_uwwcompliance_value,
		f_primarytreatment.field_uwwprimarytreatment_value,
		f_secondarytreatment.field_uwwsecondarytreatment_value,
		f_nremoval.field_uwwnremoval_value,
		f_premoval.field_uwwpremoval_value,
		f_uwwloadenteringuwwtp.field_uwwloadenteringuwwtp_value,
		f_regionnuts.field_regionnuts_value,
		nut.n3nm,
		f_uwwbod5perf.field_uwwbod5perf_value,
		f_uwwcodperf.field_uwwcodperf_value,
		f_uwwntotperf.field_uwwntotperf_value,
		f_uwwptotperf.field_uwwptotperf_value,
		f_uwwtreatmenttype.field_uwwtreatmenttype_value,
		f_physicalcapacityactivity.field_physicalcapacityactivity_value,
		f_uwwspecification.field_uwwspecification_value,
		f_uwwboddischarge.field_uwwboddischarge_value,
		f_uwwcoddischarge.field_uwwcoddischarge_value,
		f_uwwndischarge.field_uwwndischarge_value,
		f_uwwpdischarge.field_uwwpdischarge_value,
        f_status.field_status_value,
		st_astext(st_transform(f_geo.the_geom, 4326)) wkt,
		f_article17_uwwtp.field_article17_uwwtp_nid,
		f_dcpre_uwwtp.field_dcpreceivingwater_value,
        rbd.eurbdcode as rbd,
        rbd.rbdname
    from {node} n
        left join
            {field_data_field_anneedata} f_annee
                ON n.nid = f_annee.entity_id
        left join
            {field_data_field_inspireidlocalid} f_uwwcode
                ON n.nid = f_uwwcode.entity_id
        left join
            {field_data_field_uwwprimarytreatment} f_primarytreatment
                ON n.nid = f_primarytreatment.entity_id
        left join
            {field_data_field_uwwsecondarytreatment} f_secondarytreatment
                ON n.nid = f_secondarytreatment.entity_id
        left join
            {field_data_field_uwwnremoval} f_nremoval
                ON n.nid = f_nremoval.entity_id
        left join
            {field_data_field_uwwpremoval} f_premoval
                ON n.nid = f_premoval.entity_id
        left join
            {field_data_field_uwwcompliance} f_comp
                ON n.nid = f_comp.entity_id
        left join
            {field_data_field_uwwloadenteringuwwtp} f_uwwloadenteringuwwtp
                ON n.nid = f_uwwloadenteringuwwtp.entity_id
        left join
            {field_data_field_regionnuts} f_regionnuts
                ON n.nid = f_regionnuts.entity_id
		LEFT JOIN regions_nuts nut ON f_regionnuts.field_regionnuts_value = nut.n3cd
        left join
            {field_data_field_uwwbod5perf} f_uwwbod5perf
                ON n.nid = f_uwwbod5perf.entity_id
        left join
            {field_data_field_uwwcodperf} f_uwwcodperf
                ON n.nid = f_uwwcodperf.entity_id
        left join
            {field_data_field_uwwntotperf} f_uwwntotperf
                ON n.nid = f_uwwntotperf.entity_id
        left join
            {field_data_field_uwwptotperf} f_uwwptotperf
                ON n.nid = f_uwwptotperf.entity_id
        left join
            {field_data_field_uwwtreatmenttype} f_uwwtreatmenttype
                ON n.nid = f_uwwtreatmenttype.entity_id
        left join
            {field_data_field_physicalcapacityactivity} f_physicalcapacityactivity
                ON n.nid = f_physicalcapacityactivity.entity_id
        left join
            {field_data_field_uwwspecification} f_uwwspecification
                ON n.nid = f_uwwspecification.entity_id
        left join
            {field_data_field_uwwboddischarge} f_uwwboddischarge
                ON n.nid = f_uwwboddischarge.entity_id
        left join
            {field_data_field_uwwcoddischarge} f_uwwcoddischarge
                ON n.nid = f_uwwcoddischarge.entity_id
        left join
            {field_data_field_uwwndischarge} f_uwwndischarge
                ON n.nid = f_uwwndischarge.entity_id
        left join
            {field_data_field_uwwpdischarge} f_uwwpdischarge
                ON n.nid = f_uwwpdischarge.entity_id
        left join
            {field_data_field_status} f_status
                ON n.nid = f_status.entity_id
        left join
            {field_data_field_position_geo} f_geo
                ON n.nid = f_geo.entity_id
		left join
            {field_data_field_article17_uwwtp} f_article17_uwwtp
                ON n.nid = f_article17_uwwtp.entity_id
		left join
            {field_data_field_uwwdcpliste} f_dcp_uwwtp
                ON n.nid = f_dcp_uwwtp.entity_id
		left join
            {field_data_field_dcpreceivingwater} f_dcpre_uwwtp
                ON f_dcp_uwwtp.field_uwwdcpliste_nid = f_dcpre_uwwtp.entity_id
        left join 
            river_basin rbd
                ON ST_Intersects(ST_Transform(f_geo.the_geom,4326), rbd.the_geom4326)
    where n.type = :typenode
        and f_annee.field_anneedata_value = :annee
    order by n.title
    ';
 // dsm($query);

 $nb = strlen($option['field_anneedata_value']);
  if($nb == 1){
	   $param = array(
        ':typenode' => 'uwwtp',
        ':annee' => $option,
        );
  }else{
	  $param = array(
        ':typenode' => 'uwwtp',
        ':annee' => $option['field_anneedata_value'],
        );
  }
  
    
    try {
        $result = db_query($query, $param);

        while($row = $result->fetchAssoc()) {
            //override PD and QC value, we don't want to display QC and PD (for now)
            if (isset($GLOBALS['uwwtd']['ui']['compliance_connection'][ $row['field_uwwcompliance_value'] ])) {
                $row['field_uwwcompliance_value'] = $GLOBALS['uwwtd']['ui']['compliance_connection'][ $row['field_uwwcompliance_value'] ];
            }

            $row['field_uwwloadenteringuwwtp_value_format'] = is_null($row['field_uwwloadenteringuwwtp_value']) ? '' : uwwtd_format_number($row['field_uwwloadenteringuwwtp_value']);

            $row['field_uwwcompliance_value_format'] = is_null($row['field_uwwcompliance_value']) ? '' : $GLOBALS['uwwtd']['ui']['field']['compliance_label'][$row['field_uwwcompliance_value']];

            $row['field_uwwprimarytreatment_value_format'] = is_null($row['field_uwwprimarytreatment_value']) ? '' : $GLOBALS['uwwtd']['ui']['yes_no'][$row['field_uwwprimarytreatment_value']];
            $row['field_uwwsecondarytreatment_value_format'] = is_null($row['field_uwwsecondarytreatment_value']) ? '' : $GLOBALS['uwwtd']['ui']['yes_no'][$row['field_uwwsecondarytreatment_value']];
            $row['field_uwwnremoval_value_format'] = is_null($row['field_uwwnremoval_value']) ? '' : $GLOBALS['uwwtd']['ui']['yes_no'][$row['field_uwwnremoval_value']];
            $row['field_uwwpremoval_value_format'] = is_null($row['field_uwwpremoval_value']) ? '' : $GLOBALS['uwwtd']['ui']['yes_no'][$row['field_uwwpremoval_value']];

            $row['field_uwwbod5perf_value_format'] = is_null($row['field_uwwbod5perf_value']) ? '' : $GLOBALS['uwwtd']['ui']['test_pass'][$row['field_uwwbod5perf_value']];
            $row['field_uwwcodperf_value_format'] = is_null($row['field_uwwcodperf_value']) ? '' : $GLOBALS['uwwtd']['ui']['test_pass'][$row['field_uwwcodperf_value']];
            $row['field_uwwntotperf_value_format'] = is_null($row['field_uwwntotperf_value']) ? '' : $GLOBALS['uwwtd']['ui']['test_pass'][$row['field_uwwntotperf_value']];
            $row['field_uwwptotperf_value_format'] = is_null($row['field_uwwptotperf_value']) ? '' : $GLOBALS['uwwtd']['ui']['test_pass'][$row['field_uwwptotperf_value']];

            $row['field_uwwtreatmenttype_value_format'] = is_null($row['field_uwwtreatmenttype_value']) ? '' : $GLOBALS['uwwtd']['ui']['treatment_type_in_place'][$row['field_uwwtreatmenttype_value']];

            $row['field_physicalcapacityactivity_value_format'] = is_null($row['field_physicalcapacityactivity_value']) ? '' : uwwtd_format_number($row['field_physicalcapacityactivity_value']);

            $row['field_uwwboddischarge_value_format'] = is_null($row['field_uwwboddischarge_value']) ? '' : uwwtd_format_number($row['field_uwwboddischarge_value'], 2);
            $row['field_uwwcoddischarge_value_format'] = is_null($row['field_uwwcoddischarge_value']) ? '' : uwwtd_format_number($row['field_uwwcoddischarge_value'], 2);
            $row['field_uwwndischarge_value_format']   = is_null($row['field_uwwndischarge_value']) ? '' : uwwtd_format_number($row['field_uwwndischarge_value'], 2);
            $row['field_uwwpdischarge_value_format']   = is_null($row['field_uwwpdischarge_value']) ? '' : uwwtd_format_number($row['field_uwwpdischarge_value'], 2);

			if($row['field_article17_uwwtp_nid'] == "" || is_null($row['field_article17_uwwtp_nid'])){
				$row['field_article17_uwwtp_value_format'] =  'No';
			}
			else{$row['field_article17_uwwtp_value_format'] = 'Yes';}
			if (isset($GLOBALS['uwwtd']['ui']['field']['uwwtp'][$row['field_regionnuts_value']])) {
                $row['field_regionnuts_value'] = $GLOBALS['uwwtd']['ui']['uwwtp'][ $row['field_regionnuts_value'] ];
            }
			if (isset($GLOBALS['uwwtd']['ui']['field']['uwwtp'][$row['field_dcpreceivingwater_value']])) {
                $row['field_dcpreceivingwater_value'] = $GLOBALS['uwwtd']['ui']['uwwtp'][ $row['field_dcpreceivingwater_value'] ];
            }
			
			$data[] = $row;
        }
        cache_set($cache_name, $data, 'cache', CACHE_PERMANENT);
    }catch(Exception $e) {
        dsm($e->getMessage());
    }

     // dsm($data);
    return $data;
}

function uwwtd_get_data_dcp($option)
{
    $cache_name = uwwtd_get_cache_key_dcp($option);
    $cache  ='';
    if (UWWTD_CACHE_ACTIVE === true) {
        $cache = cache_get($cache_name, 'cache');
    }
    if (!empty($cache) && isset($cache->data) && !empty($cache->data)) {
        return  $cache->data;
    }
    $data = array();

    $query = 'select n.title,
                     f_annee.field_anneedata_value,
                     f_dcpcode.field_inspireidlocalid_value,
                     st_astext(st_transform(f_geo.the_geom, 4326)) wkt
    from {node} n
        left join
            {field_data_field_anneedata} f_annee
                ON n.nid = f_annee.entity_id
        left join
            {field_data_field_inspireidlocalid} f_dcpcode
                ON n.nid = f_dcpcode.entity_id
        left join
            {field_data_field_position_geo} f_geo
                ON n.nid = f_geo.entity_id
    where n.type = :typenode
    and f_annee.field_anneedata_value = :annee
    ';
//     dsm($query);

//     $param = array(
//         ':typenode' => 'discharge_point',
// //         ':annee' => '(select max(field_anneedata_value) from drupal_field_data_field_anneedata)',
//     );
    $param = array(
        ':typenode' => 'discharge_point',
        ':annee' => $option['field_anneedata_value'],
        );
    try {
        $result = db_query($query, $param);
        while($row = $result->fetchAssoc()) {
            $data[] = $row;
        }
        cache_set($cache_name, $data, 'cache', CACHE_PERMANENT);
    }catch(Exception $e) {
        dsm($e->getMessage());
    }

//     dsm($data);
    return $data;
}

function uwwtd_build_feature($data, $option, &$returnvalue)
{

    $feature = array();
//     dsm($option);
    $i = 0;
    $returnvalue = '';
    foreach($data as $row) {
        $i++;
        $description = '';
        if (isset($option['popup'])) {
            foreach($option['popup'] as $field => $detail) {
                $description .= "  \n  <span class=\"views-field views-field-".$field."\">    <span class=\"views-label views-label-".$field."\">".$detail['label'].": </span>    <span class=\"field-content\">"
                                . $row[$field] .
                                "</span>  </span>";
            }
        }

        $title = l($row['title'], uwwtd_get_url_path($option['popup_title_type'], array(strtolower($row['field_inspireidlocalid_value']), $row['field_anneedata_value'])), array('attributes'=>array('target'=>'_blank')));

        $color = '#000000';
        if (isset($option['color'])) {
            $color = $option['color']['list'][$row[ $option['color']['field'] ]];
        }

        $weight = 1;
        if (isset($option['weight'])) {
           foreach($option['weight']['list'] as $key => $value) {
             if ($row[ $option['weight']['field'] ] < $value) {
                $weight = $key;
                break;
             }
             if ($value == 0) {
                $weight = $key;
             }
           }
        }
        $chart = array();
        if (isset($option['piechart'])) {
            foreach($option['piechart'] as $field => $detail) {
                $chart[] = array(
                    'label' => $detail['label'],
                    'value' => $row[$field],
                    'color' => $detail['color'],


                );
            }
            $returnvalue .= uwwtd_get_svg_piechart($i, $row, $option, $option['piechart_weight_style'][$weight]);

        }

        $feature[] = array(
            'projection' => 'EPSG:4326',
            'attributes' => array(
                'name'=> $title,
                'description'=> $description,
                'weight' => $weight,
                'color' => $color,//'#000000',
                'data' => $chart,
                'piechartid' => 'pie_' .$i,
            ),
            'style' => null,
            'wkt' => $row['wkt'],
        );
    }

    return $feature;
}

function uwwtd_build_map($map, $features) {

  foreach($features as $overlay => $feature) {
      if (!isset($map['layers'][$overlay])) {
        drupal_set_message(t('Trying to render a overlay ' . $overlay . ' on a map without the placeholder layer'), 'error');
      }
    $map['layers'][$overlay]['features'] = $feature;
  }

  // Return themed map if no errors found
  if (empty($map['errors'])) {
    $js = array('openlayers' => array('maps' => array($map['id'] => $map)));
    //put js in html output in order to put all block in cache
    $output =
    '<script>jQuery.extend(Drupal.settings,'.json_encode($js).');</script>'.
    '<div class="view-content">
    <div class="openlayers-views-map">'.
    theme('openlayers_map', array(
      'map' => $map,
      'map_name' => $map['map_name'],
    ))
    .'</div></div>'
    ;
  }

  return $output;
}



function uwwtd_filter_form($list_field, $filter)
{
$render_field = '';
foreach($list_field as $field_name => $data) {
    $render_field .= '<div class="views-exposed-widget views-widget-filter-'.$field_name.'" id="edit-field-'.$field_name.'-wrapper">
    <label for="edit-'.$field_name.'">
    '.$data['title'].'
    </label>
    ';
        switch($data['type']) {
            case 'selectoperator':
                 $render_field .= '<div class="views-operator">
                    <div class="form-type-select form-item-'.$field_name.'-op form-item form-group">
                        <select name="'.$field_name.'_op" id="edit-'.$field_name.'-op" class="form-control form-select">';
                        foreach($data['data'] as $operator => $label) {
                            $selected = "";
                            if (isset($filter['filter'][$field_name.'_op']) && $filter['filter'][$field_name.'_op'] == $operator) {
                                $selected = 'selected="selected"';
                            }
                            $render_field .= '<option value="'.htmlspecialchars($operator).'" '. $selected . '>'.$label.'</option>';
                        }
                        $render_field .= '</select>
                    </div>
                </div>
                <div class="views-widget">
                    <div class="form-type-textfield form-item-'.$field_name.'-value form-item form-group" style="display: block;">
                        <input type="text" maxlength="128" size="30" value="';

                        if (isset($filter['filter'][$field_name]['value']) && $filter['filter'][$field_name]['value']) {
                            $render_field .= $filter['filter'][$field_name]['value'];
                        }

                        $render_field .= '" name="'.$field_name.'[value]" id="edit-'.$field_name.'-value" class="form-control form-text">
                    </div>
                    <!--
                    <div class="form-type-textfield form-item-'.$field_name.'-min form-item form-group" style="display: none;">
                        <input type="text" maxlength="128" size="30" value="" name="'.$field_name.'[min]" id="edit-'.$field_name.'-min" class="form-control form-text">
                    </div>
                    <div class="form-type-textfield form-item-'.$field_name.'-max form-item form-group" style="display: none;">
                        <label for="edit-'.$field_name.'-max">And </label>
                        <input type="text" maxlength="128" size="30" value="" name="'.$field_name.'[max]" id="edit-'.$field_name.'-max" class="form-control form-text">
                    </div>
                    -->
                </div>';
                break;
            case 'select':
//             case 'field_aggcompliance_value':
//             case 'field_aggart3compliance_value':
//             case 'field_aggart4compliance_value':
//             case 'field_aggart5compliance_value':
//             case 'field_aggart6compliance_value':
                $render_field .= '<div class="views-widget">
                    <div class="form-type-select form-item-'.$field_name.' form-item form-group">
                    <select name="'.$field_name.'" id="edit-'.$field_name.'" class="form-control form-select">
                    ';
                foreach($data['data'] as $key => $value) {
                    $selected = "";
                    // dsm($filter['filter'][$field_name]);
                    // dsm($key);
                    if (isset($filter['filter'][$field_name]) && $filter['filter'][$field_name] == $key) {
//                         dsm('find');
                        $selected = 'selected="selected"';
                    }
                    $render_field .= '<option  value="'.$key.'" '.$selected.'>'.$value.'</option>';
                }
                $render_field .= '</select></div>
                </div>';
                break;
			case 'selectarticle':
                 $render_field .= '<div class="views-article">
				 <div class="form-type-select form-item-'.$field_name.'-art form-item form-group">
                        <select name="'.$field_name.'_art" id="edit-'.$field_name.'-art" class="form-control form-select">';
						foreach($data['data'] as $operator => $label) {
							$selected = "";
                            if (isset($filter['filter'][$field_name.'_art']['value']) && $filter['filter'][$field_name.'_art']['value'] == $operator) {

                                $selected = 'selected="selected"';
                            }
                            $render_field .= '<option value="'.htmlspecialchars($operator).'" '. $selected . '>'.$label.'</option>';
                        }
                        $render_field .= '</select>
                    </div>
                </div>';
                break;
			case 'selectregion':
                $render_field .= '<div class="views-widget">
                    <div class="form-type-select form-item-'.$field_name.' form-item form-group">
                    <select name="'.$field_name.'" id="edit-'.$field_name.'" class="form-control form-select">
                    ';
                foreach($data['data'] as $key => $value) {
                    $selected = "";
                    // dsm($filter['filter'][$field_name]);
                    // dsm($key);
                    if (isset($filter['filter'][$field_name]) && $filter['filter'][$field_name] == $key) {
//                         dsm('find');
                        $selected = 'selected="selected"';
                    }
                    $render_field .= '<option  value="'.$key.'" '.$selected.'>'.$value.'</option>';
                }
                $render_field .= '</select></div>
                </div>';
                break;		

        }
    $render_field .= '
    </div>';
}

    return '<div class="view-filters">
<form accept-charset="UTF-8" id="views-exposed-form-agglomeration-conformity-page" method="get" action="">
<div>
<div class="views-exposed-form">
<div class="views-exposed-widgets clearfix">

'. $render_field . '

<div class="views-exposed-widget views-submit-button">
    <button class="btn btn-info form-submit" type="submit" value="Apply" name="" id="edit-submit-agglomeration-conformity">Apply</button>
</div>
<div class="views-exposed-widget views-reset-button">
    <button class="btn btn-default form-submit" type="submit" value="Reset" name="op" id="edit-reset">Reset</button>
</div>

</div>
</div>
</div>
</form>
</div>';
}

function uwwtd_get_form_filter($option)
{
    //check if we must reset
    if (isset($_GET['op']) && $_GET['op'] == 'Reset') {
        drupal_goto(request_path());
    }
    $filter = array();

    if (isset($_GET['field_anneedata_value']) && in_array($_GET['field_anneedata_value'], $option['allyear'])) {
        $filter['filter']['field_anneedata_value'] = $_GET['field_anneedata_value'];
    } else {
        $filter['filter']['field_anneedata_value'] = uwwtd_get_max_annee();
    }
    if (isset($_GET['field_agggenerated_value_op']) && in_array($_GET['field_agggenerated_value_op'], array_keys($GLOBALS['uwwtd']['ui']['operator']))
        && isset($_GET['field_agggenerated_value']['value'])
        && '' != ($_GET['field_agggenerated_value']['value'] = trim($_GET['field_agggenerated_value']['value']))
        && ctype_digit($_GET['field_agggenerated_value']['value'])
//         && !empty($_GET['field_agggenerated_value']['value'])
        ) {
        $filter['filter']['field_agggenerated_value_op'] = $_GET['field_agggenerated_value_op'];
        $filter['filter']['field_agggenerated_value']['value'] = (int)$_GET['field_agggenerated_value']['value'];
    }


    if (isset($_GET['field_aggcompliance_value']) && in_array($_GET['field_aggcompliance_value'],  array_keys($GLOBALS['uwwtd']['ui']['compliance']))
        && $_GET['field_aggcompliance_value'] != 'All') {
        $filter['filter']['field_aggcompliance_value'] = $_GET['field_aggcompliance_value'];
    }


    if (isset($_GET['field_aggart3compliance_value']) && in_array($_GET['field_aggart3compliance_value'],  array_keys($GLOBALS['uwwtd']['ui']['compliance']))
        && $_GET['field_aggart3compliance_value'] != 'All') {
        $filter['filter']['field_aggart3compliance_value'] = $_GET['field_aggart3compliance_value'];
    }

    if (isset($_GET['field_aggart4compliance_value']) && in_array($_GET['field_aggart4compliance_value'],  array_keys($GLOBALS['uwwtd']['ui']['compliance']))
        && $_GET['field_aggart4compliance_value'] != 'All') {
        $filter['filter']['field_aggart4compliance_value'] = $_GET['field_aggart4compliance_value'];
    }

    if (isset($_GET['field_aggart5compliance_value'])  && in_array($_GET['field_aggart5compliance_value'],  array_keys($GLOBALS['uwwtd']['ui']['compliance']))
        && $_GET['field_aggart5compliance_value'] != 'All') {
        $filter['filter']['field_aggart5compliance_value'] = $_GET['field_aggart5compliance_value'];
    }

    if (isset($_GET['field_aggart6compliance_value']) && in_array($_GET['field_aggart6compliance_value'],  array_keys($GLOBALS['uwwtd']['ui']['compliance']))
        && $_GET['field_aggart6compliance_value'] != 'All') {
        $filter['filter']['field_aggart6compliance_value'] = $_GET['field_aggart6compliance_value'];
    }

    //agglo/treatment
    if (isset($_GET['field_aggc2_value_op']) && in_array($_GET['field_aggc2_value_op'], array_keys($GLOBALS['uwwtd']['ui']['operator']))
        && isset($_GET['field_aggc2_value']['value'])
        && '' != ($_GET['field_aggc2_value']['value'] = trim($_GET['field_aggc2_value']['value']))
        && ctype_digit($_GET['field_aggc2_value']['value'])
//         && !empty($_GET['field_aggc2_value']['value'])
        ) {
        $filter['filter']['field_aggc2_value_op'] = $_GET['field_aggc2_value_op'];
        $filter['filter']['field_aggc2_value']['value'] = (int)$_GET['field_aggc2_value']['value'];
    }

    if (isset($_GET['field_aggc1_value_op']) && in_array($_GET['field_aggc1_value_op'], array_keys($GLOBALS['uwwtd']['ui']['operator']))
        && isset($_GET['field_aggc1_value']['value'])
        && '' != ($_GET['field_aggc1_value']['value'] = trim($_GET['field_aggc1_value']['value']))
        && ctype_digit($_GET['field_aggc1_value']['value'])
//         && !empty($_GET['field_aggc1_value']['value'])
        ) {
        $filter['filter']['field_aggc1_value_op'] = $_GET['field_aggc1_value_op'];
        $filter['filter']['field_aggc1_value']['value'] = (int)$_GET['field_aggc1_value']['value'];
    }

    if (isset($_GET['field_aggpercwithouttreatment_value_op']) && in_array($_GET['field_aggpercwithouttreatment_value_op'], array_keys($GLOBALS['uwwtd']['ui']['operator']))
        && isset($_GET['field_aggpercwithouttreatment_value']['value'])
        && '' != ($_GET['field_aggpercwithouttreatment_value']['value'] = trim($_GET['field_aggpercwithouttreatment_value']['value']))
        && ctype_digit($_GET['field_aggpercwithouttreatment_value']['value'])
//         && !empty($_GET['field_aggpercwithouttreatment_value']['value'])
        ) {
        $filter['filter']['field_aggpercwithouttreatment_value_op'] = $_GET['field_aggpercwithouttreatment_value_op'];
        $filter['filter']['field_aggpercwithouttreatment_value']['value'] = (int)$_GET['field_aggpercwithouttreatment_value']['value'];
    }


    if (isset($_GET['field_uwwloadenteringuwwtp_value_op']) && in_array($_GET['field_uwwloadenteringuwwtp_value_op'], array_keys($GLOBALS['uwwtd']['ui']['operator']))
        && isset($_GET['field_uwwloadenteringuwwtp_value']['value'])
        && '' != ($_GET['field_uwwloadenteringuwwtp_value']['value'] = trim($_GET['field_uwwloadenteringuwwtp_value']['value']))
        && ctype_digit($_GET['field_uwwloadenteringuwwtp_value']['value'])
//         && !empty($_GET['field_uwwloadenteringuwwtp_value']['value'])
        ) {
        $filter['filter']['field_uwwloadenteringuwwtp_value_op'] = $_GET['field_uwwloadenteringuwwtp_value_op'];
        $filter['filter']['field_uwwloadenteringuwwtp_value']['value'] = (int)$_GET['field_uwwloadenteringuwwtp_value']['value'];
    }

    if (isset($_GET['field_uwwcompliance_value']) && in_array($_GET['field_uwwcompliance_value'],  array_keys($GLOBALS['uwwtd']['ui']['compliance']))
        && $_GET['field_uwwcompliance_value'] != 'All') {
        $filter['filter']['field_uwwcompliance_value'] = $_GET['field_uwwcompliance_value'];
    }

    if (isset($_GET['field_uwwbod5perf_value']) && in_array($_GET['field_uwwbod5perf_value'], array_keys($GLOBALS['uwwtd']['ui']['test_pass']))
        && $_GET['field_uwwbod5perf_value'] != 'All') {
        $filter['filter']['field_uwwbod5perf_value'] = $_GET['field_uwwbod5perf_value'];
    }

    if (isset($_GET['field_uwwcodperf_value']) && in_array($_GET['field_uwwcodperf_value'], array_keys($GLOBALS['uwwtd']['ui']['test_pass']))
        && $_GET['field_uwwcodperf_value'] != 'All') {
        $filter['filter']['field_uwwcodperf_value'] = $_GET['field_uwwcodperf_value'];
    }

    if (isset($_GET['field_uwwntotperf_value']) && in_array($_GET['field_uwwntotperf_value'], array_keys($GLOBALS['uwwtd']['ui']['test_pass']))
        && $_GET['field_uwwntotperf_value'] != 'All') {
        $filter['filter']['field_uwwntotperf_value'] = $_GET['field_uwwntotperf_value'];
    }

    if (isset($_GET['field_uwwptotperf_value']) && in_array($_GET['field_uwwptotperf_value'], array_keys($GLOBALS['uwwtd']['ui']['test_pass']))
        && $_GET['field_uwwptotperf_value'] != 'All') {
        $filter['filter']['field_uwwptotperf_value'] = $_GET['field_uwwptotperf_value'];
    }

    if (isset($_GET['field_uwwtreatmenttype_value']) && in_array($_GET['field_uwwtreatmenttype_value'], array_keys($GLOBALS['uwwtd']['ui']['treatment_type_in_place']))
        && $_GET['field_uwwtreatmenttype_value'] != 'All') {
        $filter['filter']['field_uwwtreatmenttype_value'] = $_GET['field_uwwtreatmenttype_value'];
    }

    //uwwtps/treatment
    if (isset($_GET['field_uwwprimarytreatment_value']) && in_array($_GET['field_uwwprimarytreatment_value'], array_keys($GLOBALS['uwwtd']['ui']['yes_no']))
        && $_GET['field_uwwprimarytreatment_value'] != 'All') {
        $filter['filter']['field_uwwprimarytreatment_value'] = $_GET['field_uwwprimarytreatment_value'];
    }

    if (isset($_GET['field_uwwsecondarytreatment_value']) && in_array($_GET['field_uwwsecondarytreatment_value'], array_keys($GLOBALS['uwwtd']['ui']['yes_no']))
        && $_GET['field_uwwsecondarytreatment_value'] != 'All') {
        $filter['filter']['field_uwwsecondarytreatment_value'] = $_GET['field_uwwsecondarytreatment_value'];
    }

    if (isset($_GET['field_uwwnremoval_value']) && in_array($_GET['field_uwwnremoval_value'], array_keys($GLOBALS['uwwtd']['ui']['yes_no']))
        && $_GET['field_uwwnremoval_value'] != 'All') {
        $filter['filter']['field_uwwnremoval_value'] = $_GET['field_uwwnremoval_value'];
    }

    if (isset($_GET['field_uwwpremoval_value']) && in_array($_GET['field_uwwpremoval_value'], array_keys($GLOBALS['uwwtd']['ui']['yes_no']))
        && $_GET['field_uwwpremoval_value'] != 'All') {
        $filter['filter']['field_uwwpremoval_value'] = $_GET['field_uwwpremoval_value'];
    }

    if (isset($_GET['field_uwwboddischarge_value_op']) && in_array($_GET['field_uwwboddischarge_value_op'], array_keys($GLOBALS['uwwtd']['ui']['operator']))
        && isset($_GET['field_uwwboddischarge_value']['value'])
        && '' != ($_GET['field_uwwboddischarge_value']['value'] = trim($_GET['field_uwwboddischarge_value']['value']))
        && ctype_digit($_GET['field_uwwboddischarge_value']['value'])
//         && !empty($_GET['field_uwwboddischarge_value']['value'])
        ) {
        $filter['filter']['field_uwwboddischarge_value_op'] = $_GET['field_uwwboddischarge_value_op'];
        $filter['filter']['field_uwwboddischarge_value']['value'] = (int)$_GET['field_uwwboddischarge_value']['value'];
    }

    if (isset($_GET['field_uwwcoddischarge_value_op']) && in_array($_GET['field_uwwcoddischarge_value_op'], array_keys($GLOBALS['uwwtd']['ui']['operator']))
        && isset($_GET['field_uwwcoddischarge_value']['value'])
        && '' != ($_GET['field_uwwcoddischarge_value']['value'] = trim($_GET['field_uwwcoddischarge_value']['value']))
        && ctype_digit($_GET['field_uwwcoddischarge_value']['value'])
//         && !empty($_GET['field_uwwcoddischarge_value']['value'])
        ) {
        $filter['filter']['field_uwwcoddischarge_value_op'] = $_GET['field_uwwcoddischarge_value_op'];
        $filter['filter']['field_uwwcoddischarge_value']['value'] = (int)$_GET['field_uwwcoddischarge_value']['value'];
    }

    if (isset($_GET['field_uwwndischarge_value_op']) && in_array($_GET['field_uwwndischarge_value_op'], array_keys($GLOBALS['uwwtd']['ui']['operator']))
        && isset($_GET['field_uwwndischarge_value']['value'])
        && '' != ($_GET['field_uwwndischarge_value']['value'] = trim($_GET['field_uwwndischarge_value']['value']))
        && ctype_digit($_GET['field_uwwndischarge_value']['value'])
//         && !empty($_GET['field_uwwndischarge_value']['value'])
        ) {
        $filter['filter']['field_uwwndischarge_value_op'] = $_GET['field_uwwndischarge_value_op'];
        $filter['filter']['field_uwwndischarge_value']['value'] = (int)$_GET['field_uwwndischarge_value']['value'];
    }

    if (isset($_GET['field_uwwpdischarge_value_op']) && in_array($_GET['field_uwwpdischarge_value_op'], array_keys($GLOBALS['uwwtd']['ui']['operator']))
        && isset($_GET['field_uwwpdischarge_value']['value'])
        && '' != ($_GET['field_uwwpdischarge_value']['value'] = trim($_GET['field_uwwpdischarge_value']['value']))
        && ctype_digit($_GET['field_uwwpdischarge_value']['value'])
//         && !empty($_GET['field_uwwpdischarge_value']['value'])
        ) {
        $filter['filter']['field_uwwpdischarge_value_op'] = $_GET['field_uwwpdischarge_value_op'];
        $filter['filter']['field_uwwpdischarge_value']['value'] = (int)$_GET['field_uwwpdischarge_value']['value'];
    }

	if (isset($_GET['field_article17_uwwtp_value_art']) && in_array($_GET['field_article17_uwwtp_value_art'], array_keys($GLOBALS['uwwtd']['ui']['yes_no']))
        && $_GET['field_article17_uwwtp_value_art'] != 'All') {
        $filter['filter']['field_article17_uwwtp_value_art']['value'] = $_GET['field_article17_uwwtp_value_art'];
    }

	if (isset($_GET['field_article17_agglo_value_art']) && in_array($_GET['field_article17_agglo_value_art'], array_keys($GLOBALS['uwwtd']['ui']['yes_no']))
        && $_GET['field_article17_agglo_value_art'] != 'All') {
        $filter['filter']['field_article17_agglo_value_art']['value'] = $_GET['field_article17_agglo_value_art'];
    }

	if (isset($_GET['field_regionnuts_value']) && array_key_exists($_GET['field_regionnuts_value'], $option['allnuts'])  && $_GET['field_regionnuts_value'] != 'All') {
	  $filter['filter']['field_regionnuts_value'] = $_GET['field_regionnuts_value'];
    } 

	if (isset($_GET['rbd']) && array_key_exists($_GET['rbd'], $option['allrbd'])  && $_GET['rbd'] != 'All') {
	  $filter['filter']['rbd'] = $_GET['rbd'];
    }
	
    if (isset($_GET['order']) && in_array($_GET['order'], $option['order'])) {
        $filter['order'] = $_GET['order'];
        if (isset($_GET['sort']) && in_array($_GET['sort'], array('asc', 'desc'))) {
            $filter['sort'] = $_GET['sort'];
        } else {
            $filter['sort'] = 'asc';
        }
    } else {
        $filter['order'] = $option['default']['order'];
        $filter['sort'] = $option['default']['sort'];
    }
    return $filter;
}

function uwwtd_filter_data($filter, &$data, $forcefilter = array())
{
     //For RBD data are already filtered
     //unset($filter['filter']['rbd']);
//     dsm($forcefilter);
    //no need to treat annee, already filter by request
    if (isset($filter['filter']['field_anneedata_value'])) {
        unset($filter['filter']['field_anneedata_value']);
    }
    //get field with operator
    $list_operator_field = array();
    foreach($filter['filter'] as $field_op => $operator) {
        if (substr($field_op, -3) == '_op') {
            $field_name_value = substr($field_op, 0, strlen($field_op) -3);
            $list_operator_field[] = array(
                'field' => $field_name_value,
                'op' => $operator,
                'value' => $filter['filter'][$field_name_value]['value'],
            );
            unset($filter['filter'][$field_op], $filter['filter'][$field_name_value]);
        }
    }

	$list_operator_field_art = array();
	 foreach($filter['filter'] as $field_art => $article) {
		if (substr($field_art, -4) == '_art') {
			$field_name_value_art = substr($field_art, 0, strlen($field_art) -4);
			$list_operator_field_art[] = array(
				'field' => $field_name_value_art,
				'art' => $article,
				'value' => $filter['filter'][$field_name_value_art]['value'],
			);
			unset($filter['filter'][$field_art], $filter['filter'][$field_name_value_art]);
		}
	}
    //for now treat only forcefilter with _op
    if (!empty($forcefilter)) {
        foreach($forcefilter['filter'] as $field_op => $operator) {
            if (substr($field_op, -3) == '_op') {
                $field_name_value = substr($field_op, 0, strlen($field_op) -3);
                $list_operator_field[] = array(
                    'field' => $field_name_value,
                    'op' => $operator,
                    'value' => $forcefilter['filter'][$field_name_value]['value'],
                );
                unset($forcefilter['filter'][$field_op], $forcefilter['filter'][$field_name_value]);
            }
        }
    }
    $datafilter = array();
    foreach($data as $row) {
        $keepRow = true;
        foreach($filter['filter'] as $field => $value) {
            if ($row[$field] != $value) {
                $keepRow = false;
//                 dsm(__LINE__);
                break;
            }
        }
        if ($keepRow == true) {
            foreach($list_operator_field as $one_operator) {
                $keepRow = $GLOBALS['uwwtd']['ui']['operatorfunction'][ $one_operator['op'] ]($row[ $one_operator['field'] ], $one_operator['value']);
                if ($keepRow == false) {
//                     dsm(__LINE__);
                    break;
                }
            }
        }
		if ($keepRow == true) {
		 foreach($list_operator_field_art as $one_operator_art) {
			if($one_operator_art['art']['value'] == 0){
				if((isset($row['field_article17_agglo_value_format']) && $row['field_article17_agglo_value_format'] =="Yes" ) ||(isset($row['field_article17_uwwtp_value_format']) && $row['field_article17_uwwtp_value_format'] =="Yes")){
					$keepRow = false;
//                     dsm(__LINE__);
						break;
				}
			}
			if($one_operator_art['art']['value'] == 1){
				if((isset($row['field_article17_agglo_value_format']) && $row['field_article17_agglo_value_format'] =="No" ) ||(isset($row['field_article17_uwwtp_value_format']) && $row['field_article17_uwwtp_value_format'] =="No")){
					$keepRow = false;
//                     dsm(__LINE__);
						break;
				}
			}
		 }
		}
        //treat force filter
        if ($keepRow == true) {
            if (!empty($forcefilter)) {
                foreach($forcefilter['filter'] as $field => $value) {
                    if ($row[$field] != $value) {
                        $keepRow = false; 
//                         dsm(__LINE__);
//                         dsm($row);                        
                        break;
                    }
                } 
            }
        } 

        if ($keepRow == true) {
            $datafilter[] = $row;
        }
    }
    $data = $datafilter;
}

function uwwtd_sort_data($filter, $order, &$data)
{
    //get field to sort
    if (isset($filter['order'])) {
        $fieldname =  array_search($filter['order'], $order);
        if (false === $fieldname) {
            return;
        }
        $GLOBALS['uwwtd']['ui']['sortfield'] = $fieldname;
        usort($data, $GLOBALS['uwwtd']['ui']['sort'][$filter['sort']]);
    }
}


function uwwtd_page_agglomeration_connection($type_export = '')
{
    $title = 'Agglomeration connection map and list';
    drupal_set_title($title);
    drupal_add_js(drupal_get_path('module', 'uwwtd') . '/js/uwwtd.js');
    drupal_add_js(drupal_get_path('module', 'uwwtd') . '/lib/flip/jquery.flip.min.js');
    $type = "agglomeration";
	$option = array();
    $option['order'] = $GLOBALS['uwwtd']['ui']['field']['agglomeration_treatment'];
    $option['default']['order'] = $GLOBALS['uwwtd']['ui']['field']['agglomeration_treatment']['field_agggenerated_value'];
    $option['default']['sort'] = 'desc';
    $option['allyear'] = uwwtd_get_all_year();
	$option['allnuts'] = uwwtd_get_all_nuts($type);
	$option['allrbd'] = uwwtd_get_all_rbd($type);
    $filter = uwwtd_get_form_filter($option);

    $preset_name = 'agglomeration';   //layer agglomeration_treatment 'Agglomeration connection map and list'
    $preset = openlayers_preset_load($preset_name);
    $map    = openlayers_build_map($preset->data);

    $cache = '';
    $cache_name = uwwtd_get_cache_key_page_agglo_treatment($filter['filter']);
    //use cache only for page with no filter , or only the year and default sort
    $put_in_cache = uwwtd_is_filter_default($filter, $option) && uwwtd_is_user_anonymous() && $type_export == '';
    if (UWWTD_CACHE_ACTIVE === true && true === $put_in_cache) {
        $cache = cache_get($cache_name, 'cache_page');
    }
    if (!empty($cache) && isset($cache->data) && !empty($cache->data)) {
        $render_graph = theme('flot_graph', $cache->data['flot1']);
        return $cache->data['page'];
    }

	$data = uwwtd_get_data_agglomeration($filter['filter']);
	foreach($data as $art){
		if(isset($art['field_article17_agglo_nid']) || ($art['field_article17_agglo_nid']!= '')){// dsm($art);
		   $list_field = array(
				'field_anneedata_value'         => array('title' => 'Year of data', 'type' => 'select', 'data' => $option['allyear']),
				'field_agggenerated_value'      => array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration_treatment']['field_agggenerated_value'], 'type' => 'selectoperator', 'data' => $GLOBALS['uwwtd']['ui']['operator']),
				'field_aggc2_value'             => array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration_treatment']['field_aggc2_value'], 'type' => 'selectoperator', 'data' => $GLOBALS['uwwtd']['ui']['operator']),
				'field_aggc1_value'             => array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration_treatment']['field_aggc1_value'], 'type' => 'selectoperator', 'data' => $GLOBALS['uwwtd']['ui']['operator']),
				'field_aggpercwithouttreatment_value'      => array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration_treatment']['field_aggpercwithouttreatment_value'], 'type' => 'selectoperator', 'data' => $GLOBALS['uwwtd']['ui']['operator']),
				'field_article17_agglo_value'  		=> array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration_treatment']['field_article17_agglo_value'], 'type' => 'selectarticle', 'data' => $GLOBALS['uwwtd']['ui']['yes_no']),
				'field_regionnuts_value'  		=> array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration']['field_regionnuts_value'], 'type' => 'selectregion', 'data' => $option['allnuts']),
				'rbd' => array('title' => t('River Basin District'), 'type' => 'select', 'data' => $option['allrbd']),
			);
	   }else{
		   $list_field = array(
				'field_anneedata_value'         => array('title' => 'Year of data', 'type' => 'select', 'data' => $option['allyear']),
				'field_agggenerated_value'      => array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration_treatment']['field_agggenerated_value'], 'type' => 'selectoperator', 'data' => $GLOBALS['uwwtd']['ui']['operator']),
				'field_aggc2_value'             => array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration_treatment']['field_aggc2_value'], 'type' => 'selectoperator', 'data' => $GLOBALS['uwwtd']['ui']['operator']),
				'field_aggc1_value'             => array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration_treatment']['field_aggc1_value'], 'type' => 'selectoperator', 'data' => $GLOBALS['uwwtd']['ui']['operator']),
				'field_aggpercwithouttreatment_value'      => array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration_treatment']['field_aggpercwithouttreatment_value'], 'type' => 'selectoperator', 'data' => $GLOBALS['uwwtd']['ui']['operator']),
				'field_regionnuts_value'  		=> array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration']['field_regionnuts_value'], 'type' => 'selectregion', 'data' => $option['allnuts']),
				'rbd' => array('title' => t('River Basin District'), 'type' => 'select', 'data' => $option['allrbd']),
				);
		}
	}

    $form = uwwtd_filter_form($list_field, $filter);



//     uwwtd_filter_data($filter, $data);
    // dsm($data);
    //e.vincent / bruno want to show only agglo > 2000
    $filter_force = array();
    $filter_force['filter']['field_agggenerated_value_op'] = '>';
    $filter_force['filter']['field_agggenerated_value']['value'] = variable_get('min_aggenerated_display', '2000');
    if (variable_get('display_only_active', '1') == 1) {
        $filter_force['filter']['field_status_value'] = '1';
    }    
    uwwtd_filter_data($filter, $data, $filter_force);
//     uwwtd_filter_data($filter, $data);

    $header  = array();
    $header_export = array();
    foreach($GLOBALS['uwwtd']['ui']['field']['agglomeration_treatment'] as $field => $name) {
        $header[] = array(
            'data' => $name,
            'field' => $field,
        );

        //set default sort if none exists
        if ($filter['order'] == $name) {
            $header[count($header)-1]['sort'] = $filter['sort'];
        }
        
        $header_export[] = $name;
    }
	foreach($data as $art17){
		if(isset($art17['field_article17_agglo_value_format']) && ($art17['field_article17_agglo_value_format']== 'Yes')){
			$exists[] = array('Yes' => $art17['field_article17_agglo_nid']);
			break;
		}else{
			$exists[] = array('No' => "");
		}
	}
	foreach($exists as $exist){
		 if(array_key_exists('Yes', $exist)){
			$art17 = "Yes";
			break;
		}elseif(!isset($filter['filter']['field_article17_agglo_value_art'])){
			$art17 = "No";
		}
	 }
	  if($art17 == "No"){
		  unset($header[7]);
	  }
    uwwtd_sort_data($filter, $GLOBALS['uwwtd']['ui']['field']['agglomeration_treatment'], $data);

    $optionstyle = array();
    $optionstyle['weight']['list'] = uwwtd_get_point_size_from_preset($preset, 'openlayers_plus_behavior_piechart');
    $optionstyle['weight']['field'] = 'field_agggenerated_value';
    $optionstyle['piechart'] = uwwtd_get_piechart_from_preset($preset, 'openlayers_plus_behavior_piechart');
    $optionstyle['piechart_weight_style'] = $map['behaviors']['openlayers_plus_behavior_piechart']['styles'];

    $optionstyle['popup_title_type'] = 'agglomeration';
    $optionstyle['popup'] = array(
        'field_agggenerated_value_format' => array('label' => 'Generated load (p.e.)'),
        'field_aggcompliance_value_format' => array('label' => 'Compliance'),
        'field_aggart3compliance_value_format' => array('label' => 'Connection compliance'),
        'field_aggart4compliance_value_format' => array('label' => '2nd treatment compliance'),
        'field_aggart5compliance_value_format' => array('label' => '3rd treatment compliance'),
		
		
		
		
//         'field_aggart6compliance_value' => array('label' => 'Article 6 compliance'),
        'field_aggc1_value_format' => array('label' => 'Collecting system'),
        'field_aggc2_value_format' => array('label' => 'Individual and Appropriate Systems (IAS)'),
        'field_aggpercwithouttreatment_value_format' => array('label' => 'Discharge without treatment'),
    );
    $graph = array();
    foreach($data as $row) {

        if (false === isset($graph['field_aggc2_value'])) {
            $field_agggenerated_value = 0;
            $graph['field_aggc2_value']['value'] = 0;
            $graph['field_aggc1_value']['value'] = 0;
            $graph['field_aggpercwithouttreatment_value']['value'] = 0;
        }
        $field_agggenerated_value   += $row['field_agggenerated_value'];
        $graph['field_aggc2_value']['value'] += $row['field_aggc2_value'] / 100  * $row['field_agggenerated_value'];
        $graph['field_aggc1_value']['value'] += $row['field_aggc1_value'] / 100  * $row['field_agggenerated_value'];
        $graph['field_aggpercwithouttreatment_value']['value'] += $row['field_aggpercwithouttreatment_value'] / 100  * $row['field_agggenerated_value'];

		if(isset($header[7]) && ($header[7]['field'] == 'field_article17_agglo_value')){
			$rows[] = array('data' => array(
				//$row['title'],
				($type_export != '' ? $row['title'] : l($row['title'], uwwtd_get_url_path($optionstyle['popup_title_type'], array(strtolower($row['field_inspireidlocalid_value']), $row['field_anneedata_value'])))),
				$row['field_inspireidlocalid_value'],
				$row['field_agggenerated_value_format'],
				($row['n3nm']!=''?$row['n3nm']:$row['field_regionnuts_value']),
				$row['rbd'].' '.$row['rbdname'],
				$row['field_aggc2_value_format'],
				$row['field_aggc1_value_format'],
				$row['field_aggpercwithouttreatment_value_format'],
				$row['field_article17_agglo_value_format'],
			));
		}else{
			$rows[] = array('data' => array(
				//$row['title'],
				($type_export != '' ? $row['title'] : l($row['title'], uwwtd_get_url_path($optionstyle['popup_title_type'], array(strtolower($row['field_inspireidlocalid_value']), $row['field_anneedata_value'])))),
				$row['field_inspireidlocalid_value'],
				$row['field_agggenerated_value_format'],
				($row['n3nm']!=''?$row['n3nm']:$row['field_regionnuts_value']),
                $row['rbd'].' '.$row['rbdname'],
				$row['field_aggc2_value_format'],
				$row['field_aggc1_value_format'],
				$row['field_aggpercwithouttreatment_value_format'],
			));
		}
    }
    // $graph['field_aggc2_value']['percent'] = $graph['field_aggc2_value']['value'] * 100 / $field_agggenerated_value;
    // $graph['field_aggc1_value']['percent'] = $graph['field_aggc1_value']['value'] * 100 / $field_agggenerated_value;
    // $graph['field_aggpercwithouttreatment_value']['percent'] = $graph['field_aggpercwithouttreatment_value']['value'] * 100 / $field_agggenerated_value;

    //here export data and exit
    if ($type_export != '') {
        uwwtd_export_data($type_export, 'agglomeration_connection_'.$filter['filter']['field_anneedata_value'], $header_export, $rows);
    }
    
    $features['agglomeration_treatment'] = uwwtd_build_feature($data, $optionstyle, $piechart);

    $rendermap = uwwtd_build_map($map, $features);
    unset($features);

    unset($data);
    $data_pie = array();
    $xaxis = array();
    $i = 0;
    foreach($graph as $field => $detail) {
        $d1 = new flotData($detail['value']);
        $d1->label = $GLOBALS['uwwtd']['ui']['field']['agglomeration_treatment'][$field];//$detail['label'];
        $d1->color = $optionstyle['piechart'][$field]['color'];//$detail['label'];
        $data_pie[] = $d1;
//         $xaxis[] = array($i++, $GLOBALS['uwwtd']['ui']['field']['agglomeration_treatment'][$field]);
    }

    $options = new flotStylePie();
//     $options->axis_range('yaxis', array(null,100), 4);
//     $options->axis_ticks('xaxis', $xaxis);
    $options->legend  =new StdClass();
    $options->legend->show = true;
    $options->legend->position = "ne";
    $options->resize = true;
    $options->legend->labelFormatter = 'uwwtd_labelformaterpie_legend';
    $options->series->pie->label->formatter = 'uwwtd_labelformaterpie';
    //!!//custom for replace string by callback in module flot...//!!//
    $options->replace = new StdClass();
    $options->replace->transform_on_callback = array($options->legend->labelFormatter, $options->series->pie->label->formatter);
    //!!//custom for replace string by callback in module flot...//!!//

    $variables = array(
        'data' => $data_pie,
        'element' => array(
            'id' => 'flot-auto-identifier-1',
            'style' => 'width: 500px; height: 200px; padding: 0px; position: relative;',
            'class' => 'agglo_connexion_pie',
        ),
//         'legend' => TRUE,
//         'zoom' => false,
        'options' => clone $options,
    );

//     $render_graph = theme('flot_graph', $variables);

//     'field_aggc2_value'       =>  t('IAS (% of p.e.)'),
//     'field_aggc1_value'   =>  t('Collective system (% of p.e.) '),
//     'field_aggpercwithouttreatment_value'   =>  t('Not addressed through IAS (% of p.e.)'),


    $render_table_graph = '

    <table id="views-aggregator-datatable" class="views-table cols-2" style="width: 650px; ">
    <thead>
    <tr>
        <th class="views-field views-field-field_aggc1_value" style="padding: 5px;">
        Collecting system (% of p.e.)
        </th>
        <th class="views-field views-field-field_aggc2_value" style="padding: 5px;">
        IAS (% of p.e.)
        </th>
        <th class="views-field views-field-field_aggpercwithouttreatment_value" style="padding: 5px;">
        Discharge without treatment (% of p.e.)
        </th>
    </tr>
    </thead>
    <tbody>
        <tr>
            <td class="views-field" style="border-right: 1px solid #dddddd; padding: 5px;">
            ' . uwwtd_format_number($graph['field_aggc1_value']['value'], 2) . ' p.e
            </td>
            <td class="views-field" style="border-right: 1px solid #dddddd; padding: 5px;">
            ' . uwwtd_format_number($graph['field_aggc2_value']['value'], 2) . ' p.e
            </td>
            <td class="views-field" style="border-right: 1px solid #dddddd; padding: 5px;">
            ' . uwwtd_format_number($graph['field_aggpercwithouttreatment_value']['value'], 2) . ' p.e
            </td>
        </tr>
    </tbody>
    </table>

      ';

    $build['tablesort_table'] = array(
            '#theme' => 'table',
            '#header' => $header,
            '#rows' => $rows,
        );
    //build export data on ODT,XML,CSV,DOC...

    //todo save view and map and .install update map/style/overlay
    $render_graph = theme('flot_graph', $variables);
//     $page =  '<h1>'.$title.'</h1>'
//             . $form
//             . $piechart
//             . $rendermap
//             . '<div class="view-content flot-title">Generated load (p.e.) distribution</div>'
//             . '<div class="view-content">'.$render_graph.'</div>'
//             . '<div class="view-content">'.$render_table_graph.'</div>'
//             . '<div class="view-content">'. drupal_render($build) . '</div>'

//      ;
    $page =  '<h1>'.$title.'</h1>'
            . $form
            . $piechart                  //style="page-break-after:always;"
            . '<div class="rows map-row" >'.$rendermap.'</div>'
            . '<div class="rows charts-row">'
                .'<div>'
                  .'<div class="cell-content">'
                    .'<div class="container flip">'

                      .'<div class="leftgraph front" style="-webkit-backface-visibility: hidden;">'
                        . '<div class="flot-title"><div class="flip-title">Generated load (p.e.) distribution</div>



                        <img src="'.file_create_url(drupal_get_path('theme', 'uwwtd').'/images/corner-table-off.png').'" class="button-flipper to-table" title="See the data table" alt="See the data table">
                        </div>'
                        . '<div class="view-content">'.$render_graph.'</div>'
                      .'</div>'

                      .'<div class="leftgraph back">'
                        . '<div class="flot-title flip-title-back"><div class="flip-title">Generated load (p.e.) distribution</div>


                        <img src="'.file_create_url(drupal_get_path('theme', 'uwwtd').'/images/corner-chart-off.png').'" class="button-flipper to-chart" title="See diagram" alt="See diagram">

                        </div>'
                        . '<div class="view-content">'.$render_table_graph.'</div>'
                      .'</div>'
                    .'</div>'
                  .'</div>'
                .'</div>'
//                 .'<div class="cell charts-rows-cell">'
//                   .'<div class="cell-content">'
//                     .'<div class="container flip">'
//                       .'<div class="front">'
//                         . '<div class="flot-title"><div class="flip-title">Compliance by Generated load (p.e.)</div>
//
//                         <img src="'.file_create_url(drupal_get_path('theme', 'uwwtd').'/images/corner-table-off.png').'" class="button-flipper to-table" title="See the data table" alt="See the data table">
//                         </div>'
//                         . '<div class="view-content">'.$render_graph.'</div>'
//                       .'</div>'
//                       .'<div class="back">'
//                         . '<div class="flot-title"><div class="flip-title">Compliance by Generated load (p.e.)</div>
//
//                         <img src="'.file_create_url(drupal_get_path('theme', 'uwwtd').'/images/corner-chart-off.png').'" class="button-flipper to-chart" title="See diagram" alt="See diagram">
//                         </div>'
//                         . '<div class="view-content">'.$render_table_graph.'</div>'
//                       .'</div>'
//                     .'</div>'
//                   .'</div>'
                .'</div>'
            .'</div>'
            . '<div class="rows data-table-row">'
                . '<div class="rows data-table-row">'
			 . '<div class="data-table-header">'
			  . '<b>'.count($rows) ." results</b>"		
				. '<div class="hideprint export-result"> | Download results: '
					.l('csv', 'agglomerations/connection/csv', array('attributes'=>array('class'=>array("export-result-btn")),'query'=>drupal_get_query_parameters())).' '
					.l('xls', 'agglomerations/connection/xls', array('attributes'=>array('class'=>array("export-result-btn")),'query'=>drupal_get_query_parameters()))
				.'</div>'
			 .'</div>'
                . '<div class="view-content">'. drupal_render($build) . '</div>'
                . '<!--markerprinttable-->' //use for print wjhtmltopdf
            .'</div>'
     ;

     if (true === $put_in_cache) {
        cache_set($cache_name, array('page' => $page,
                                    'flot1' => $variables), 'cache_page', CACHE_PERMANENT);
     }

     return $page;
}

function uwwtd_page_uwwtps_compliance($type_export = '')
{
    $title = 'UWWTD Treatment Plants- Compliance map';
    drupal_set_title($title);  //todo
    drupal_add_js(drupal_get_path('module', 'uwwtd') . '/js/uwwtd.js');
    drupal_add_js(drupal_get_path('module', 'uwwtd') . '/lib/flip/jquery.flip.min.js');
    $type = "uwwtp";
	$option = array();
    $option['order'] = $GLOBALS['uwwtd']['ui']['field']['uwwtp'];
    $option['default']['order'] = $GLOBALS['uwwtd']['ui']['field']['uwwtp']['field_uwwloadenteringuwwtp_value'];
    $option['default']['sort'] = 'desc';
    $option['allyear'] = uwwtd_get_all_year();
	$option['allnuts'] = uwwtd_get_all_nuts($type);
	$option['allrbd'] = uwwtd_get_all_rbd($type);
    $filter = uwwtd_get_form_filter($option);

    $preset_name = 'uwwtp_compliance_map';
    $preset = openlayers_preset_load($preset_name);
    $map    = openlayers_build_map($preset->data);

    $cache = '';
    $cache_name = uwwtd_get_cache_key_page_uwwtp_compliance($filter['filter']);
    //use cache only for page with no filter , or only the year and default sort
    $put_in_cache = uwwtd_is_filter_default($filter, $option) && uwwtd_is_user_anonymous() && $type_export == '';
    if (UWWTD_CACHE_ACTIVE === true && true === $put_in_cache) {
        $cache = cache_get($cache_name, 'cache_page');
    }
    if (!empty($cache) && isset($cache->data) && !empty($cache->data)) {
//         dsm('in cache');
        $render_graph_nb = theme('flot_graph', $cache->data['flot1']);
        $render_graph = theme('flot_graph', $cache->data['flot2']);
        return $cache->data['page'];
    }
//     dsm('not in cache');    
	$data = uwwtd_get_data_uwwtp($filter['filter']);

	foreach($data as $art){
		
		if(isset($art['field_article17_uwwtp_nid']) || ($art['field_article17_uwwtp_nid']!= '')){
		     $list_field = array(
				'field_anneedata_value'         => array('title' => 'Year of data', 'type' => 'select', 'data' => $option['allyear']),
				'field_uwwloadenteringuwwtp_value' => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp']['field_uwwloadenteringuwwtp_value'], 'type' => 'selectoperator', 'data' => $GLOBALS['uwwtd']['ui']['operator']),
				'field_uwwtreatmenttype_value'  => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp']['field_uwwtreatmenttype_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['treatment_type_in_place']),
				'field_uwwcompliance_value'     => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp']['field_uwwcompliance_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['compliance']),
				'field_regionnuts_value'  		=> array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration']['field_regionnuts_value'], 'type' => 'selectregion', 'data' => $option['allnuts']),
				'rbd' => array('title' => t('River Basin District'), 'type' => 'select', 'data' => $option['allrbd']),
				'field_uwwbod5perf_value'       => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp']['field_uwwbod5perf_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['test_pass']),
				'field_uwwcodperf_value'        => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp']['field_uwwcodperf_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['test_pass']),
				'field_uwwntotperf_value'       => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp']['field_uwwntotperf_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['test_pass']),
				'field_uwwptotperf_value'       => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp']['field_uwwptotperf_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['test_pass']),
				
				'field_article17_uwwtp_value'  	=> array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp']['field_article17_uwwtp_value'], 'type' => 'selectarticle', 'data' => $GLOBALS['uwwtd']['ui']['yes_no']),
				
			);break;
	   }else{
		    $list_field = array(
				'field_anneedata_value'         => array('title' => 'Year of data', 'type' => 'select', 'data' => $option['allyear']),
				'field_uwwloadenteringuwwtp_value' => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp']['field_uwwloadenteringuwwtp_value'], 'type' => 'selectoperator', 'data' => $GLOBALS['uwwtd']['ui']['operator']),
				'field_uwwtreatmenttype_value'  => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp']['field_uwwtreatmenttype_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['treatment_type_in_place']),
				'field_uwwcompliance_value'     => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp']['field_uwwcompliance_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['compliance']),
				'field_regionnuts_value'  		=> array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration']['field_regionnuts_value'], 'type' => 'selectregion', 'data' => $option['allnuts']),
				'rbd' => array('title' => t('River Basin District'), 'type' => 'select', 'data' => $option['allrbd']),
				'field_uwwbod5perf_value'       => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp']['field_uwwbod5perf_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['test_pass']),
				'field_uwwcodperf_value'        => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp']['field_uwwcodperf_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['test_pass']),
				'field_uwwntotperf_value'       => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp']['field_uwwntotperf_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['test_pass']),
				'field_uwwptotperf_value'       => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp']['field_uwwptotperf_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['test_pass']),
				
			);
	   }
   }

    $form = uwwtd_filter_form($list_field, $filter);
//     dsm($data);    
    $filter_force['filter'] = array();
    if (variable_get('display_only_active', '1') == 1) {
        $filter_force['filter']['field_status_value'] = '1';
    }
    uwwtd_filter_data($filter, $data, $filter_force); 
//     dsm($data);

    $header  =array();
    $header_export = array();
    foreach($GLOBALS['uwwtd']['ui']['field']['uwwtp'] as $field => $name) {
        $header[] = array(
            'data' => $name,
            'field' => $field,
//             'attributes' => array('class' => 'width_header_' . $field),
            'class' => array('width_header_' . $field),   
        );

        //set default sort if none exists
//         if (false === isset($filter['sort']) && $field == 'field_agggenerated_value') {
        if ($filter['order'] == $name) {
            $header[count($header)-1]['sort'] = $filter['sort'];
        }

        $header_export[] = $name;
    }

	// foreach($GLOBALS['uwwtd']['ui']['group']['uwwtp'] as $fieldGroup => $nameGroup) {
        // $topheader[] = array(
            // 'name' => $nameGroup,
            // 'field' => $fieldGroup,
        // );

	// }
	foreach($data as $art17){
		if(isset($art17['field_article17_uwwtp_value_format']) && ($art17['field_article17_uwwtp_value_format']== 'Yes')){
				$exists[] = array('Yes' => $art17['field_article17_uwwtp_nid']);
				break;
		}else{
			$exists[] = array('No' => "");
		}
	}
	 foreach($exists as $exist){
		 if(array_key_exists('Yes', $exist)){
			 $art17 = "Yes";
			 break;
		}elseif(!isset($filter['filter']['field_article17_uwwtp_value_art'])){
			 $art17 = "No";
		}
	 }
	  if($art17 == "No"){
		  unset($header[11]);
	  }

    uwwtd_sort_data($filter, $GLOBALS['uwwtd']['ui']['field']['uwwtp'], $data);
    // dsm($data);

    $optionstyle = array();
    //get the color for the point
    $optionstyle['color']['list'] = uwwtd_get_point_color_from_preset($preset);
    $optionstyle['color']['field'] = 'field_uwwcompliance_value_format';
    //get the size of the point
    $optionstyle['weight']['list'] = uwwtd_get_point_size_from_preset($preset, 'openlayers_plus_behavior_scalepoints');
    $optionstyle['weight']['field'] = 'field_physicalcapacityactivity_value';


    $optionstyle['popup_title_type'] = 'treatment-plant';

    $optionstyle['popup'] = array(
        'field_uwwcompliance_value_format' => array('label' => 'Compliance'),
        'field_uwwloadenteringuwwtp_value_format' => array('label' => 'Load entering (p.e.)'),
        'field_physicalcapacityactivity_value_format' => array('label' => 'Capacity'),
        'field_uwwbod5perf_value_format' => array('label' => 'Performance: BOD5'),
        'field_uwwcodperf_value_format' => array('label' => 'Performance: COD'),
        'field_uwwntotperf_value_format' => array('label' => 'Performance: Total nitrogen'),
        'field_uwwptotperf_value_format' => array('label' => 'Performance: Total phosphorus'),
    );

    //todo format data in table
    $graph = array();
    foreach($data as $row) {
        if (false === isset($graph[$row['field_uwwcompliance_value_format']])) {
            $graph[$row['field_uwwcompliance_value_format']]['nb'] = 0;
            $graph[$row['field_uwwcompliance_value_format']]['field_uwwloadenteringuwwtp_value'] = 0;
//             $graph[$row['field_uwwcompliance_value_format']]['label'] = 'TODO';
        }
        $graph[$row['field_uwwcompliance_value_format']]['nb']++;
        $graph[$row['field_uwwcompliance_value_format']]['field_uwwloadenteringuwwtp_value'] += $row['field_uwwloadenteringuwwtp_value'];

        //format data
//         $row['field_uwwloadenteringuwwtp_value'] = uwwtd_format_number($row['field_uwwloadenteringuwwtp_value']);
		if(isset($header[11]) && ($header[11]['field'] == 'field_article17_uwwtp_value')){
			$titleV = truncate_utf8($row['title'], 17, $wordsafe = TRUE, $add_ellipsis = TRUE, $min_wordsafe_length = 7);
			$rows[] = array('data' => array(
				//$row['title'],
				($type_export != '' ? $row['title'] : l($titleV, uwwtd_get_url_path($optionstyle['popup_title_type'], array(strtolower($row['field_inspireidlocalid_value']), $row['field_anneedata_value'])))),
				$row['field_inspireidlocalid_value'],
				$row['field_uwwloadenteringuwwtp_value_format'],
				$row['field_physicalcapacityactivity_value_format'],
				($row['n3nm']!=''?$row['n3nm']:$row['field_regionnuts_value']),
                $row['rbd'].' '.$row['rbdname'],
				$row['field_uwwtreatmenttype_value_format'],
				$row['field_uwwcompliance_value_format'],
				$row['field_uwwbod5perf_value_format'],
				$row['field_uwwcodperf_value_format'],
				$row['field_uwwntotperf_value_format'],
				$row['field_uwwptotperf_value_format'],
				$row['field_article17_uwwtp_value_format'],
			));
		}else{
			$rows[] = array('data' => array(
				($type_export != '' ? $row['title'] : l($row['title'], uwwtd_get_url_path($optionstyle['popup_title_type'], array(strtolower($row['field_inspireidlocalid_value']), $row['field_anneedata_value'])))),
				$row['field_inspireidlocalid_value'],
				$row['field_uwwloadenteringuwwtp_value_format'],
				$row['field_physicalcapacityactivity_value_format'],
				($row['n3nm']!=''?$row['n3nm']:$row['field_regionnuts_value']),
                $row['rbd'].' '.$row['rbdname'],
				$row['field_uwwtreatmenttype_value_format'],
				$row['field_uwwcompliance_value_format'],
				$row['field_uwwbod5perf_value_format'],
				$row['field_uwwcodperf_value_format'],
				$row['field_uwwntotperf_value_format'],
				$row['field_uwwptotperf_value_format'],
			));
		}
	}

    //here export data and exit
    if ($type_export != '') {
        uwwtd_export_data($type_export, 'uwwtp_compliance_'.$filter['filter']['field_anneedata_value'], $header_export, $rows);
    }

    $features['uwwtp_compliance_map'] = uwwtd_build_feature($data, $optionstyle, $returnvalue);
     // dsm($features);


    $rendermap = uwwtd_build_map($map, $features);
    unset($features);

//  f_annee.field_anneedata_value,
//  f_aggcode.field_inspireidlocalid_value,
//  f_agggenerated.field_agggenerated_value,
//  f_art3.field_aggart3compliance_value,
//  f_art4.field_aggart4compliance_value,
//  f_art5.field_aggart5compliance_value,
//  f_art6.field_aggart6compliance_value,
//  f_comp.field_aggcompliance_value,
//  f_nuts.field_regionnuts_value,
    unset($data);

    //first graph number agglo
    $data_pie = array();
    $xaxis = array();
    $i = 0;
    foreach($graph as $compliance_format => $detail) {
        $d1 = new flotData($detail['nb']);
        $d1->label = $compliance_format;//$detail['label'];
        $d1->color = $optionstyle['color']['list'][$compliance_format];//$detail['label'];
        $data_pie[] = $d1;
//         $xaxis[] = array($i++, $compliance_format);
    }

    $options = new flotStylePie();
//     $options->axis_range('yaxis', array(null,100), 4);
//     $options->axis_ticks('xaxis', $xaxis);
    $options->legend  =new StdClass();
    $options->legend->show = true;
    $options->legend->position = "ne";
    $options->resize = true;
    $options->legend->labelFormatter = 'uwwtd_labelformaterpie_legend';
    $options->series->pie->label->formatter = 'uwwtd_labelformaterpie';
    //!!//custom for replace string by callback in module flot...//!!//
    $options->replace = new StdClass();
    $options->replace->transform_on_callback = array($options->legend->labelFormatter, $options->series->pie->label->formatter);
    //!!//custom for replace string by callback in module flot...//!!//

//     todo legend color
//     $optionstyle['color']  = array(
//         'C' => "#4f91e1",
//         'NR' => "#a2a2a2",
//         'NC' => "#d93c3c",
//         'NI' => "#6b6b6b",
//     );

    $variables_nb = array(
        'data' => $data_pie,
        'element' => array(
            'id' => 'flot-auto-identifier-1',
            'style' => 'width: 500px; height: 200px; padding: 0px; position: relative;',
        ),
//         'legend' => TRUE,
//         'zoom' => false,
        'options' => clone $options,
    );

//     $render_graph_nb = theme('flot_graph', $variables_nb);

    $render_table_graph_nb = '

    <table id="views-aggregator-datatable-nb" class="views-table cols-2">
    <thead>
    <tr>
        <th class="views-field views-field-title">
        Number of plants
        </th>
        <th class="views-field views-field-field-aggcompliance">
        Compliance
        </th>
    </tr>
    </thead>
    <tbody>
      ';
      $i = 0;
      $total = 0;
      foreach($graph as $compliance_format => $detail) {
        $render_table_graph_nb .= '<tr class="'.($i % 2 == 0 ? 'odd' : 'even').' views-row-first">
            <td class="views-field views-field-title">
            ' . uwwtd_format_number($detail['nb']). '
            </td>
            <td class="views-field views-field-field-aggcompliance">
            '. $compliance_format . '
            </td>
        </tr>';
        $i++;
        $total += $detail['nb'];
      }

      $render_table_graph_nb .= '</tbody>
        <tfoot>
        <tr>
            <th class="views-field views-field-title">
            ' . uwwtd_format_number($total) . '
            </th>
            <th class="views-field views-field-field-aggcompliance">
            </th>
        </tr>
        </tfoot>
        </table>
        ';

    //second graph load generated
    $data_pie = array();
    $xaxis = array();
    $i = 0;
    foreach($graph as $compliance_format => $detail) {
        $d1 = new flotData($detail['field_uwwloadenteringuwwtp_value']);
        $d1->label = $compliance_format;//$detail['label'];
        $d1->color = $optionstyle['color']['list'][$compliance_format];//$detail['label'];
        $data_pie[] = $d1;
//         $xaxis[] = array($i++, $compliance_format);
    }

    $options = new flotStylePie();
//     $options->axis_range('yaxis', array(null,100), 4);
//     $options->axis_ticks('xaxis', $xaxis);
    $options->legend  =new StdClass();
    $options->legend->show = true;
    $options->legend->position = "ne";
    $options->resize = true;
    $options->legend->labelFormatter = 'uwwtd_labelformaterpie_legend';
    $options->series->pie->label->formatter = 'uwwtd_labelformaterpie';
    //!!//custom for replace string by callback in module flot...//!!//
    $options->replace = new StdClass();
    $options->replace->transform_on_callback = array($options->legend->labelFormatter, $options->series->pie->label->formatter);
    //!!//custom for replace string by callback in module flot...//!!//

    $variables = array(
        'data' => $data_pie,
        'element' => array(
            'id' => 'flot-auto-identifier-2',
            'style' => 'width: 500px; height: 200px; padding: 0px; position: relative;',
        ),
//         'legend' => TRUE,
//         'zoom' => false,
        'options' => clone $options,
    );

//     $render_graph = theme('flot_graph', $variables);

    $render_table_graph = '

    <table id="views-aggregator-datatable" class="views-table cols-2">
    <thead>
    <tr>
        <th class="views-field views-field-title">
        Load entering (p.e.)
        </th>
        <th class="views-field views-field-field-aggcompliance">
        Compliance
        </th>
    </tr>
    </thead>
    <tbody>
      ';
      $i = 0;
      $total = 0;
      foreach($graph as $compliance_format => $detail) {
        $render_table_graph .= '<tr class="'.($i % 2 == 0 ? 'odd' : 'even').' views-row-first">
            <td class="views-field views-field-title">
            ' . uwwtd_format_number($detail['field_uwwloadenteringuwwtp_value']). '
            </td>
            <td class="views-field views-field-field-aggcompliance">
            '. $compliance_format . '
            </td>
        </tr>';
        $i++;
        $total += $detail['field_uwwloadenteringuwwtp_value'];
      }

      $render_table_graph .= '</tbody>
        <tfoot>
        <tr>
            <th class="views-field views-field-title">
            ' . uwwtd_format_number($total) . '
            </th>
            <th class="views-field views-field-field-aggcompliance">
            </th>
        </tr>
        </tfoot>
        </table>
        ';

	$headers = array();
    
    
	$headers[] = array(
		array('data' => 'Description ', 'colspan' => 6, 'class' => 'customTableHeader'),
		'',
		array('data' => 'Performance', 'colspan' => 4, 'class' => 'customTableHeader'),   
// 		''   		
	);
    //if article 17, add a column
    if (count($header) > 11) {
        $headers[0][] = '';
    }
    
//     foreach ($header as $key => $one_header) {
//         $header[$key]['class'] = 'width_header_' . $header[$key]['field'];
//     }
//     dsm($header);
//     $header = array();
	$headers[] = $header;
	
    $table = theme('table', array(
            'header' => $headers,
            'rows' => $rows,
			'rows_multiple'=>true,
            'attributes' => array('class' => 'customTable'),     
        ));   
    //build export data on ODT,XML,CSV,DOC...
    $render_graph_nb = theme('flot_graph', $variables_nb);
    $render_graph = theme('flot_graph', $variables);



    $page = ''
            . '<h1>'.$title.'</h1>'
            . $form
            .'<div class="rows map-row" >'.$rendermap.'</div>'
            .'<div class="rows charts-row" >'
                .'<div class="cell charts-rows-cell">'
                  .'<div class="cell-content">'
                    .'<div class="container flip">'
                      .'<div class="leftgraph front">'
                        . '<div class="flot-title"><div class="flip-title">Global compliance by number of treament plants</div>


                        <img src="'.file_create_url(drupal_get_path('theme', 'uwwtd').'/images/corner-table-off.png').'" class="button-flipper to-table" title="See the data table" alt="See the data table">
                        </div>'
                        . '<div class="view-content">'.$render_graph_nb.'</div>'
                      .'</div>'

                      .'<div class="leftgraph back">'
                        . '<div class="flot-title flip-title-back"><div class="flip-title">Global compliance by number of treament plants</div>


                        <img src="'.file_create_url(drupal_get_path('theme', 'uwwtd').'/images/corner-chart-off.png').'" class="button-flipper to-chart" title="See diagram" alt="See diagram">
                        </div>'
                        . '<div class="view-content">'.$render_table_graph_nb.'</div>'
                      .'</div>'
                    .'</div>'
                  .'</div>'
                .'</div>'
                .'<div class="cell charts-rows-cell">'
                  .'<div class="cell-content">'
                    .'<div class="container flip">'

                      .'<div class="rightgraph front">'
                            . '<div class="flot-title"><div class="flip-title">Global compliance by load entering (p.e.)</div>


                            <img src="'.file_create_url(drupal_get_path('theme', 'uwwtd').'/images/corner-table-off.png').'" class="button-flipper to-table" title="See the data table" alt="See the data table">
                            </div>'
                            . '<div class="view-content">'.$render_graph.'</div>'
                      .'</div>'

                      .'<div class="rightgraph back">'
                        . '<div class="flot-title flip-title-back"><div class="flip-title">Global compliance by load entering (p.e.)</div>


                        <img src="'.file_create_url(drupal_get_path('theme', 'uwwtd').'/images/corner-chart-off.png').'" class="button-flipper to-chart" title="See diagram" alt="See diagram">
                        </div>'
                        . '<div class="view-content">'.$render_table_graph.'</div>'
                      .'</div>'
                    .'</div>'
                  .'</div>'
                .'</div>'
            .'</div>'
            .'<div class="rows data-table-row">'
			. '<div class="data-table-header">'
			  . '<b>'.count($rows) ." results</b>"		
				. '<div class="hideprint export-result"> | Download results: '
					.l('csv', 'uwwtps/compliance/csv', array('attributes'=>array('class'=>array("export-result-btn")),'query'=>drupal_get_query_parameters())).' '
					.l('xls', 'uwwtps/compliance/xls', array('attributes'=>array('class'=>array("export-result-btn")),'query'=>drupal_get_query_parameters()))
				.'</div>'
			 .'</div>'
                . '<div class="view-content">'. $table . '</div>'
                . '<!--markerprinttable-->'  //use for print wjhtmltopdf
            .'</div>'
     ;
     if (true === $put_in_cache) {
        cache_set($cache_name, array('page' => $page,
                                    'flot1' => $variables_nb,
                                    'flot2' => $variables), 'cache_page', CACHE_PERMANENT);
     }

     return $page;
}

function uwwtd_page_uwwtps_treatment($type_export = '')
{
    $title = 'UWWTD Treatment Plants- Treatment map';
    drupal_set_title($title); 
    drupal_add_js(drupal_get_path('module', 'uwwtd') . '/js/uwwtd.js');
    drupal_add_js(drupal_get_path('module', 'uwwtd') . '/lib/flip/jquery.flip.min.js');
    
    $keys_order = $GLOBALS['uwwtd']['ui']['treatment_type_in_place'];
    unset($keys_order['All']);
    $keys_order = array_reverse(array_values($keys_order));
    
    $type = "uwwtp";
	$option = array();
    $option['order'] = $GLOBALS['uwwtd']['ui']['field']['uwwtp_treatment'];
    $option['default']['order'] = $GLOBALS['uwwtd']['ui']['field']['uwwtp_treatment']['field_uwwloadenteringuwwtp_value'];
    $option['default']['sort'] = 'desc';
    $option['allyear'] = uwwtd_get_all_year();
	$option['allnuts'] = uwwtd_get_all_nuts($type);
	$option['allrbd'] = uwwtd_get_all_rbd($type);
    $filter = uwwtd_get_form_filter($option);

    $preset_name = 'uwwtp_treatment_map';   //layer agglomeration_treatment 'Agglomeration connection map and list'
    $preset = openlayers_preset_load($preset_name);
    $map    = openlayers_build_map($preset->data);

    $cache = '';
    $cache_name = uwwtd_get_cache_key_page_uwwtp_treatment($filter['filter']);
//     dsm($filter);
    //use cache only for page with no filter , or only the year and default sort
    $put_in_cache = uwwtd_is_filter_default($filter, $option) && uwwtd_is_user_anonymous() && $type_export == '';
    if (UWWTD_CACHE_ACTIVE === true && true === $put_in_cache) {
        $cache = cache_get($cache_name, 'cache_page');
    }
    if (!empty($cache) && isset($cache->data) && !empty($cache->data)) {
//         dsm('in cache');
        $render_graph_nb = theme('flot_graph', $cache->data['flot1']);
        $render_graph = theme('flot_graph', $cache->data['flot2']);
        return $cache->data['page'];
    }
//     dsm('not in cache');


//     dsm($filter);
//     $listyear = ();
    // dsm($listyear);
    //     return '';
	$data = uwwtd_get_data_uwwtp($filter['filter']);
	foreach($data as $art){
		if(isset($art['field_article17_uwwtp_nid']) || ($art['field_article17_uwwtp_nid']!= '')){
			$list_field = array(
				'field_anneedata_value'             => array('title' => 'Year of data', 'type' => 'select', 'data' => $option['allyear']),
				'field_uwwloadenteringuwwtp_value'  => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp_treatment']['field_uwwloadenteringuwwtp_value'], 'type' => 'selectoperator', 'data' => $GLOBALS['uwwtd']['ui']['operator']),
				'field_uwwprimarytreatment_value'   => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp_treatment']['field_uwwprimarytreatment_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['yes_no']),
				'field_uwwsecondarytreatment_value' => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp_treatment']['field_uwwsecondarytreatment_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['yes_no']),
				'field_uwwnremoval_value'           => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp_treatment']['field_uwwnremoval_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['yes_no']),
				'field_uwwpremoval_value'           => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp_treatment']['field_uwwpremoval_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['yes_no']),
				'field_article17_uwwtp_value'  			=> array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp']['field_article17_uwwtp_value'], 'type' => 'selectarticle', 'data' => $GLOBALS['uwwtd']['ui']['yes_no']),
				'field_regionnuts_value'  		=> array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration']['field_regionnuts_value'], 'type' => 'selectregion', 'data' => $option['allnuts']),
				'rbd' => array('title' => t('River Basin District'), 'type' => 'select', 'data' => $option['allrbd']),
			);break;
	   }else{
		   $list_field = array(
				'field_anneedata_value'             => array('title' => 'Year of data', 'type' => 'select', 'data' => $option['allyear']),
				'field_uwwloadenteringuwwtp_value'  => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp_treatment']['field_uwwloadenteringuwwtp_value'], 'type' => 'selectoperator', 'data' => $GLOBALS['uwwtd']['ui']['operator']),
				'field_uwwprimarytreatment_value'   => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp_treatment']['field_uwwprimarytreatment_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['yes_no']),
				'field_uwwsecondarytreatment_value' => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp_treatment']['field_uwwsecondarytreatment_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['yes_no']),
				'field_uwwnremoval_value'           => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp_treatment']['field_uwwnremoval_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['yes_no']),
				'field_uwwpremoval_value'           => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp_treatment']['field_uwwpremoval_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['yes_no']),
				'field_regionnuts_value'  		=> array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration']['field_regionnuts_value'], 'type' => 'selectregion', 'data' => $option['allnuts']),
				'rbd' => array('title' => t('River Basin District'), 'type' => 'select', 'data' => $option['allrbd']),
			);
	   }
	}
    $form = uwwtd_filter_form($list_field, $filter);
              
    $filter_force['filter'] = array();
    if (variable_get('display_only_active', '1') == 1) {
        $filter_force['filter']['field_status_value'] = '1';
    }
    uwwtd_filter_data($filter, $data, $filter_force); 
//     dsm($data);
    $header  = array();
    $header_export  = array();
    foreach($GLOBALS['uwwtd']['ui']['field']['uwwtp_treatment'] as $field => $name) {
        if ($field == 'field_uwwspecification_value') {
            $header[] = array(
                'data' => $name,
            );
        } else {
            $header[] = array(
                'data' => $name,
                'field' => $field,
            );
        }

        //set default sort if none exists
//         if (false === isset($filter['sort']) && $field == 'field_agggenerated_value') {
        if ($filter['order'] == $name) {
            $header[count($header)-1]['sort'] = $filter['sort'];
        }
        
        $header_export[] = $name;
    }
	foreach($data as $art17){
		if(isset($art17['field_article17_uwwtp_value_format']) && ($art17['field_article17_uwwtp_value_format']== 'Yes')){
				$exists[] = array('Yes' => $art17['field_article17_uwwtp_nid']);
				break;
		}else{
			$exists[] = array('No' => "");
		}
	}
//     dsm($header);
	foreach($exists as $exist){
		 if(array_key_exists('Yes', $exist)){
			 $art17 = "Yes";
			 break;
		}elseif(!isset($filter['filter']['field_article17_uwwtp_value_art'])){
			 $art17 = "No";
		}
	 }
	  if($art17 == "No"){
		  unset($header[10]);
	  }
    uwwtd_sort_data($filter, $GLOBALS['uwwtd']['ui']['field']['uwwtp_treatment'], $data);


    $optionstyle = array();
    //get the color for the point
    $optionstyle['color']['list'] = uwwtd_get_point_color_from_preset($preset);
    $optionstyle['color']['field'] = 'field_uwwtreatmenttype_value_format';
    //get the size of the point
    $optionstyle['weight']['list'] = uwwtd_get_point_size_from_preset($preset, 'openlayers_plus_behavior_scalepoints');
    $optionstyle['weight']['field'] = 'field_physicalcapacityactivity_value';

//     dsm($optionstyle);
    //todo get tis value from database!
//     $optionstyle = array();
//     $optionstyle['weight'] = $GLOBALS['uwwtd']['ui']['pe_weight'];
//     $optionstyle['weight']['list'] = $GLOBALS['uwwtd']['ui']['pe_weight'];
//     $optionstyle['weight']['field'] = 'field_physicalcapacityactivity_value';


//     array(
//       1 =>  2000,
//       2 =>  10000,
//       3 =>  150000,
//       4 =>  0,
//     );
    //todo get tis value from database!
    //todo : get field name for database NC => not compliant ...
//     $optionstyle['color']['list']  = $GLOBALS['uwwtd']['ui']['more_stringent_color'];
//     $optionstyle['color']['field'] = 'field_uwwtreatmenttype_value';

//     $optionstyle['popup_title_type'] = 'treatment-plant';
//     $optionstyle['popup_title_type'] = 'discharge-pointt';
    $optionstyle['popup_title_type'] = 'treatment-plant';
    $optionstyle['popup'] = array(
        'field_uwwtreatmenttype_value_format' => array('label' => 'Treatment type in place'),
        'field_physicalcapacityactivity_value_format' => array('label' => 'Capacity'),
        'field_uwwcompliance_value_format' => array('label' => 'Compliance'),
        'field_uwwprimarytreatment_value_format' => array('label' => 'Primary treatment'),
        'field_uwwsecondarytreatment_value_format' => array('label' => 'Secondary treatment'),
        'field_uwwnremoval_value_format' => array('label' => 'N-removal'),
        'field_uwwpremoval_value_format' => array('label' => 'P-removal'),
    );

//     dsm($optionstyle);
    //dsm($data);




    //todo format data in table
    $graph = array();
    foreach($data as $row) {
        if (false === isset($graph[$row['field_uwwtreatmenttype_value_format']])) {
            $graph[$row['field_uwwtreatmenttype_value_format']]['nb'] = 0;
            $graph[$row['field_uwwtreatmenttype_value_format']]['field_uwwloadenteringuwwtp_value'] = 0;
//             $graph[$row['field_uwwtreatmenttype_value_format']]['label'] = 'TODO';
        }
        $graph[$row['field_uwwtreatmenttype_value_format']]['nb']++;
        $graph[$row['field_uwwtreatmenttype_value_format']]['field_uwwloadenteringuwwtp_value'] += $row['field_uwwloadenteringuwwtp_value'];

//     'title'                           =>  t('Name'),
//     'field_inspireidlocalid_value'    =>  t('Identifier Code'),
//     'field_uwwloadenteringuwwtp_value'        =>  t('Load entering (p.e.)'),
//     'field_regionnuts_value'          =>  t('Region (NUTS)'),
//     'field_uwwcompliance_value'       =>  t('Compliance'),
//     'field_uwwbod5perf_value'   =>  t('Performance: BOD5'),
//     'field_uwwcodperf_value'   =>  t('Performance: COD '),
//     'field_uwwntotperf_value'   =>  t('Performance: Total nitrogen'),
//     'field_uwwptotperf_value'   =>  t('Performance: Total phosphorus'),
//     'field_uwwtreatmenttype_value'   =>  t('Treatment type in place'),
        //format data
//         $row['field_uwwloadenteringuwwtp_value'] = uwwtd_format_number($row['field_uwwloadenteringuwwtp_value']);
// dsm($header[9]);
		if(isset($header[10]) && ($header[10]['field'] == 'field_article17_uwwtp_value')){
			$titleV = truncate_utf8($row['title'], 20, $wordsafe = TRUE, $add_ellipsis = TRUE, $min_wordsafe_length = 10);
			$rows[] = array('data' => array(
				//$row['title'],
				($type_export != '' ? $row['title'] : l($titleV, uwwtd_get_url_path($optionstyle['popup_title_type'], array(strtolower($row['field_inspireidlocalid_value']), $row['field_anneedata_value'])))),
				$row['field_inspireidlocalid_value'],
				$row['field_uwwloadenteringuwwtp_value_format'],
				$row['field_physicalcapacityactivity_value_format'],
				($row['n3nm']!=''?$row['n3nm']:$row['field_regionnuts_value']),
				$row['rbd'].' '.$row['rbdname'],
                $row['field_uwwprimarytreatment_value_format'],
				$row['field_uwwsecondarytreatment_value_format'],
				$row['field_uwwnremoval_value_format'],
				$row['field_uwwpremoval_value_format'],
				$row['field_uwwspecification_value'],
				$row['field_article17_uwwtp_value_format'],
			));
		}else{
			$rows[] = array('data' => array(
				//$row['title'],
				($type_export != '' ? $row['title'] : l($row['title'], uwwtd_get_url_path($optionstyle['popup_title_type'], array(strtolower($row['field_inspireidlocalid_value']), $row['field_anneedata_value'])))),
				$row['field_inspireidlocalid_value'],
				$row['field_uwwloadenteringuwwtp_value_format'],
				$row['field_physicalcapacityactivity_value_format'],
				($row['n3nm']!=''?$row['n3nm']:$row['field_regionnuts_value']),
				$row['rbd'].' '.$row['rbdname'],
                $row['field_uwwprimarytreatment_value_format'],
				$row['field_uwwsecondarytreatment_value_format'],
				$row['field_uwwnremoval_value_format'],
				$row['field_uwwpremoval_value_format'],
				$row['field_uwwspecification_value'],
			));
		}
	}


    //here export data and exit
    if ($type_export != '') {
        uwwtd_export_data($type_export, 'uwwtp_treatment_'.$filter['filter']['field_anneedata_value'], $header_export, $rows);
    }
    
    $features['uwwtp_treatment'] = uwwtd_build_feature($data, $optionstyle, $returnvalue);
//     dsm($features);
//     unset($data);
    $rendermap = uwwtd_build_map($map, $features);
    unset($features);

//  f_annee.field_anneedata_value,
//  f_aggcode.field_inspireidlocalid_value,
//  f_agggenerated.field_agggenerated_value,
//  f_art3.field_aggart3compliance_value,
//  f_art4.field_aggart4compliance_value,
//  f_art5.field_aggart5compliance_value,
//  f_art6.field_aggart6compliance_value,
//  f_comp.field_aggcompliance_value,
//  f_nuts.field_regionnuts_value,
    unset($data);

    //first graph number agglo
    $data_pie = array();
    $xaxis = array();
    $i = 0;
    
    $graph = array_replace(array_flip($keys_order), $graph);
    foreach($graph as $treatmenttype_format => $detail) {
        $d1 = new flotData($detail['nb']);
        $d1->label = $treatmenttype_format;//$detail['label'];
        $d1->color = $optionstyle['color']['list'][$treatmenttype_format];//$detail['label'];
        $data_pie[] = $d1;
//         $xaxis[] = array($i++, $treatmenttype_format);
    }

    $options = new flotStylePie();
//     $options->axis_range('yaxis', array(null,100), 4);
//     $options->axis_ticks('xaxis', $xaxis);
    $options->legend  =new StdClass();
    $options->legend->show = true;
    $options->legend->position = "ne";
    $options->resize = true;
    $options->legend->labelFormatter = 'uwwtd_labelformaterpie_legend';
    $options->series->pie->label->formatter = 'uwwtd_labelformaterpie';
    //!!//custom for replace string by callback in module flot...//!!//
    $options->replace = new StdClass();
    $options->replace->transform_on_callback = array($options->legend->labelFormatter, $options->series->pie->label->formatter);
    //!!//custom for replace string by callback in module flot...//!!//

//     todo legend color
//     $optionstyle['color']  = array(
//         'C' => "#4f91e1",
//         'NR' => "#a2a2a2",
//         'NC' => "#d93c3c",
//         'NI' => "#6b6b6b",
//     );

    $variables_nb = array(
        'data' => $data_pie,
        'element' => array(
            'id' => 'flot-auto-identifier-1',
            'style' => 'width: 500px; height: 200px; padding: 0px; position: relative;',
        ),
//         'legend' => TRUE,
//         'zoom' => false,
        'options' => clone $options,
    );

//     $render_graph_nb = theme('flot_graph', $variables);

    $render_table_graph_nb = '

    <table id="views-aggregator-datatable-nb" class="views-table cols-2">
    <thead>
    <tr>
        <th class="views-field views-field-title">
        Number of plants
        </th>
        <th class="views-field views-field-field-aggcompliance">
        Treatment type in place
        </th>
    </tr>
    </thead>
    <tbody>
      ';
      $i = 0;
      $total = 0;
      foreach($graph as $treatmenttype_format => $detail) {
        $render_table_graph_nb .= '<tr class="'.($i % 2 == 0 ? 'odd' : 'even').' views-row-first">
            <td class="views-field views-field-title">
            ' . uwwtd_format_number($detail['nb']). '
            </td>
            <td class="views-field views-field-field-aggcompliance">
            '. $treatmenttype_format . '
            </td>
        </tr>';
        $i++;
        $total += $detail['nb'];
      }

      $render_table_graph_nb .= '</tbody>
        <tfoot>
        <tr>
            <th class="views-field views-field-title">
            ' . uwwtd_format_number($total) . '
            </th>
            <th class="views-field views-field-field-aggcompliance">
            </th>
        </tr>
        </tfoot>
        </table>
        ';

    //second graph load generated
    $data_pie = array();
    $xaxis = array();
    $i = 0;
    foreach($graph as $treatmenttype_format => $detail) {
        $d1 = new flotData($detail['field_uwwloadenteringuwwtp_value']);
        $d1->label = $treatmenttype_format;//$detail['label'];
        $d1->color = $optionstyle['color']['list'][$treatmenttype_format];//$detail['label'];
        $data_pie[] = $d1;
//         $xaxis[] = array($i++, $treatmenttype_format);
    }

    $options = new flotStylePie();
//     $options->axis_range('yaxis', array(null,100), 4);
//     $options->axis_ticks('xaxis', $xaxis);
    $options->legend  =new StdClass();
    $options->legend->show = true;
    $options->legend->position = "ne";
    $options->resize = true;
    $options->legend->labelFormatter = 'uwwtd_labelformaterpie_legend';
    $options->series->pie->label->formatter = 'uwwtd_labelformaterpie';
    //!!//custom for replace string by callback in module flot...//!!//
    $options->replace = new StdClass();
    $options->replace->transform_on_callback = array($options->legend->labelFormatter, $options->series->pie->label->formatter);
    //!!//custom for replace string by callback in module flot...//!!//

    $variables = array(
        'data' => $data_pie,
        'element' => array(
            'id' => 'flot-auto-identifier-2',
            'style' => 'width: 500px; height: 200px; padding: 0px; position: relative;',
        ),
//         'legend' => TRUE,
//         'zoom' => false,
        'options' => clone $options,
    );

//     $render_graph = theme('flot_graph', $variables);

    $render_table_graph = '

    <table id="views-aggregator-datatable" class="views-table cols-2">
    <thead>
    <tr>
        <th class="views-field views-field-title">
        Load entering (p.e.)
        </th>
        <th class="views-field views-field-field-aggcompliance">
        Treatment type in place
        </th>
    </tr>
    </thead>
    <tbody>
      ';
      $i = 0;
      $total = 0;
      foreach($graph as $treatmenttype_format => $detail) {
        $render_table_graph .= '<tr class="'.($i % 2 == 0 ? 'odd' : 'even').' views-row-first">
            <td class="views-field views-field-title">
            ' . uwwtd_format_number($detail['field_uwwloadenteringuwwtp_value']). '
            </td>
            <td class="views-field views-field-field-aggcompliance">
            '.  $treatmenttype_format . '
            </td>
        </tr>';
        $i++;
        $total += $detail['field_uwwloadenteringuwwtp_value'];
      }

      $render_table_graph .= '</tbody>
        <tfoot>
        <tr>
            <th class="views-field views-field-title">
            ' . uwwtd_format_number($total) . '
            </th>
            <th class="views-field views-field-field-aggcompliance">
            </th>
        </tr>
        </tfoot>
        </table>
        ';


    $build['tablesort_table'] = array(
            '#theme' => 'table',
            '#header' => $header,
            '#rows' => $rows,
        );
    //build export data on ODT,XML,CSV,DOC...

    //todo save view and map and .install update map/style/overlay
    $render_graph_nb = theme('flot_graph', $variables_nb);
    $render_graph = theme('flot_graph', $variables);
//     $page = '<h1>'.$title.'</h1>'
//             . $form
//             . $rendermap
//             . '<div class="flot-title">Treatment type in place by Plants</div>'
//             . '<div class="view-content">'.$render_graph_nb.'</div>'
//             . '<div class="view-content">'.$render_table_graph_nb.'</div>'
//
//             . '<div class="flot-title">Treatment type in place by Load entering (p.e.)</div>'
//             . '<div class="view-content">'.$render_graph.'</div>'
//             . '<div class="view-content">'.$render_table_graph.'</div>'
//
//             . '<div class="view-content">'. drupal_render($build) . '</div>'
//      ;

    
    $page =  '<h1>'.$title.'</h1>'

            . $form
            . '<div class="rows map-row" >'.$rendermap.'</div>'
            . '<div class="rows charts-row" >'
                .'<div class="cell charts-rows-cell">'
                  .'<div class="cell-content">'
                    .'<div class="container flip">'
                      .'<div class="leftgraph front">'
                        . '<div class="flot-title"><div class="flip-title">Treatment type in place by number of treatment plants</div>


                        <img src="'.file_create_url(drupal_get_path('theme', 'uwwtd').'/images/corner-table-off.png').'" class="button-flipper to-table" title="See the data table" alt="See the data table">
                        </div>'
                        . '<div class="view-content">'.$render_graph_nb.'</div>'
                      .'</div>'

                      .'<div class="leftgraph back">'
                        . '<div class="flot-title flip-title-back"><div class="flip-title">Treatment type in place by number of treatment plants</div>

                        <img src="'.file_create_url(drupal_get_path('theme', 'uwwtd').'/images/corner-chart-off.png').'" class="button-flipper to-chart" title="See diagram" alt="See diagram">

                        </div>'
                        . '<div class="view-content">'.$render_table_graph_nb.'</div>'
                      .'</div>'
                    .'</div>'
                  .'</div>'
                .'</div>'
                .'<div class="cell charts-rows-cell">'
                  .'<div class="cell-content">'
                    .'<div class="container flip">'

                      .'<div class="rightgraph front">'
                        . '<div class="flot-title"><div class="flip-title">Treatment type in place by Load entering (p.e.)</div>


                        <img src="'.file_create_url(drupal_get_path('theme', 'uwwtd').'/images/corner-table-off.png').'" class="button-flipper to-table" title="See the data table" alt="See the data table">
                        </div>'
                        . '<div class="view-content">'.$render_graph.'</div>'

                      .'</div>'
                      .'<div class="rightgraph back">'
                        . '<div class="flot-title flip-title-back"><div class="flip-title">Treatment type in place by Load entering (p.e.)</div>


                        <img src="'.file_create_url(drupal_get_path('theme', 'uwwtd').'/images/corner-chart-off.png').'" class="button-flipper to-chart" title="See diagram" alt="See diagram">
                        </div>'
                        . '<div class="view-content">'.$render_table_graph.'</div>'
                      .'</div>'
                    .'</div>'
                  .'</div>'
                .'</div>'
            .'</div>'
            . '<div class="rows data-table-row">'
			. '<div class="data-table-header">'
			  . '<b>'.count($rows) ." results</b>"		
				. '<div class="hideprint export-result"> | Download results: '
					.l('csv', 'uwwtps/treatment/csv', array('attributes'=>array('class'=>array("export-result-btn")),'query'=>drupal_get_query_parameters())).' '
					.l('xls', 'uwwtps/treatment/xls', array('attributes'=>array('class'=>array("export-result-btn")),'query'=>drupal_get_query_parameters()))
				.'</div>'
			 .'</div>'
                . '<div class="view-content">'. drupal_render($build) . '</div>'
                . '<!--markerprinttable-->'   //use for print wjhtmltopdf
            .'</div>';

     if (true === $put_in_cache) {
        cache_set($cache_name, array('page' => $page,
                                    'flot1' => $variables_nb,
                                    'flot2' => $variables), 'cache_page', CACHE_PERMANENT);
     }

     return $page;
}


function uwwtd_page_uwwtps_pressure($type_export = '')
{
    $title = 'UWWTD Treatment Plants- Pressure map';
    drupal_set_title($title);  //todo
    drupal_add_js(drupal_get_path('module', 'uwwtd') . '/js/uwwtd.js');
    $type = "uwwtp";
	$option = array();
    $option['order'] = $GLOBALS['uwwtd']['ui']['field']['uwwtp_pressure'];
    $option['default']['order'] = $GLOBALS['uwwtd']['ui']['field']['uwwtp_pressure']['field_uwwloadenteringuwwtp_value'];
    $option['default']['sort'] = 'desc';
    $option['allyear'] = uwwtd_get_all_year();
	$option['allnuts'] = uwwtd_get_all_nuts($type);
	$option['allrbd'] = uwwtd_get_all_rbd($type);
//     dsm($option);
    $filter = uwwtd_get_form_filter($option);
//     dsm($filter);
                                     //uwwtp_treatment_map   uwwtps_pressure_map
    //$preset_name = 'clone_of_uwwtp_treatment_map';   //layer agglomeration_treatment 'Agglomeration connection map and list'
    $preset_name = 'uwwtp_pressure_map';   //layer agglomeration_treatment 'Agglomeration connection map and list'
    $preset = openlayers_preset_load($preset_name);
    $map    = openlayers_build_map($preset->data);
//     dsm($map);
    $cache = '';
    $cache_name = uwwtd_get_cache_key_page_uwwtp_pressure($filter['filter']);
//     dsm($filter);
    //use cache only for page with no filter , or only the year and default sort
    $put_in_cache = uwwtd_is_filter_default($filter, $option) && uwwtd_is_user_anonymous() && $type_export == '';
    if (UWWTD_CACHE_ACTIVE === true && true === $put_in_cache) {
        $cache = cache_get($cache_name, 'cache_page');
    }
    if (!empty($cache) && isset($cache->data) && !empty($cache->data)) {
//         dsm('in cache');
//         $render_graph_nb = theme('flot_graph', $cache->data['flot1']);
//         $render_graph = theme('flot_graph', $cache->data['flot2']);
        return $cache->data['page'];
    }
//     dsm('not in cache');


	$data = uwwtd_get_data_uwwtp($filter['filter']);
	foreach($data as $art){
		if(isset($art['field_article17_uwwtp_nid']) || ($art['field_article17_uwwtp_nid']!= '')){
		     $list_field = array(
				'field_anneedata_value'             => array('title' => 'Year of data', 'type' => 'select', 'data' => $option['allyear']),
				'field_uwwloadenteringuwwtp_value'  => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp_pressure']['field_uwwloadenteringuwwtp_value'], 'type' => 'selectoperator', 'data' => $GLOBALS['uwwtd']['ui']['operator']),
				'field_uwwboddischarge_value'   => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp_pressure']['field_uwwboddischarge_value'], 'type' => 'selectoperator', 'data' => $GLOBALS['uwwtd']['ui']['operator']),
				'field_uwwcoddischarge_value' => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp_pressure']['field_uwwcoddischarge_value'], 'type' => 'selectoperator', 'data' => $GLOBALS['uwwtd']['ui']['operator']),
				'field_uwwndischarge_value'           => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp_pressure']['field_uwwndischarge_value'], 'type' => 'selectoperator', 'data' => $GLOBALS['uwwtd']['ui']['operator']),
				'field_uwwpdischarge_value'           => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp_pressure']['field_uwwpdischarge_value'], 'type' => 'selectoperator', 'data' => $GLOBALS['uwwtd']['ui']['operator']),
				'field_article17_uwwtp_value'  		=> array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp']['field_article17_uwwtp_value'], 'type' => 'selectarticle', 'data' => $GLOBALS['uwwtd']['ui']['yes_no']),
				'field_regionnuts_value'  		=> array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration']['field_regionnuts_value'], 'type' => 'selectregion', 'data' => $option['allnuts']),
				'rbd' => array('title' => t('River Basin District'), 'type' => 'select', 'data' => $option['allrbd']),
			);break;
	   }else{
		   $list_field = array(
			'field_anneedata_value'             => array('title' => 'Year of data', 'type' => 'select', 'data' => $option['allyear']),
			'field_uwwloadenteringuwwtp_value'  => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp_pressure']['field_uwwloadenteringuwwtp_value'], 'type' => 'selectoperator', 'data' => $GLOBALS['uwwtd']['ui']['operator']),
			'field_uwwboddischarge_value'   => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp_pressure']['field_uwwboddischarge_value'], 'type' => 'selectoperator', 'data' => $GLOBALS['uwwtd']['ui']['operator']),
			'field_uwwcoddischarge_value' => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp_pressure']['field_uwwcoddischarge_value'], 'type' => 'selectoperator', 'data' => $GLOBALS['uwwtd']['ui']['operator']),
			'field_uwwndischarge_value'           => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp_pressure']['field_uwwndischarge_value'], 'type' => 'selectoperator', 'data' => $GLOBALS['uwwtd']['ui']['operator']),
			'field_uwwpdischarge_value'           => array('title' => $GLOBALS['uwwtd']['ui']['field']['uwwtp_pressure']['field_uwwpdischarge_value'], 'type' => 'selectoperator', 'data' => $GLOBALS['uwwtd']['ui']['operator']),
			'field_regionnuts_value'  		=> array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration']['field_regionnuts_value'], 'type' => 'selectregion', 'data' => $option['allnuts']),
			'rbd' => array('title' => t('River Basin District'), 'type' => 'select', 'data' => $option['allrbd']),
			
		);
	   }
   }

    $form = uwwtd_filter_form($list_field, $filter);

//     dsm($data);        
    $filter_force['filter'] = array();
    if (variable_get('display_only_active', '1') == 1) {
        $filter_force['filter']['field_status_value'] = '1';
    }
    uwwtd_filter_data($filter, $data, $filter_force);
//     dsm($data);
//     dsm($data);
    $header  = array();
    $header_export  = array();
    foreach($GLOBALS['uwwtd']['ui']['field']['uwwtp_pressure'] as $field => $name) {
		$header[] = array(
			'data' => $name,
			'field' => $field,
		);

        //set default sort if none exists
//         if (false === isset($filter['sort']) && $field == 'field_agggenerated_value') {
        if ($filter['order'] == $name) {
            $header[count($header)-1]['sort'] = $filter['sort'];
        }
        
        $header_export[] = $name;
    }
    // dsm($header);
	foreach($data as $art17){
		if(isset($art17['field_article17_uwwtp_value_format']) && ($art17['field_article17_uwwtp_value_format']== 'Yes')){
			$exists[] = array('Yes' => $art17['field_article17_uwwtp_nid']);
			break;
		}else{
			$exists[] = array('No' => "");
		}
	}
	foreach($exists as $exist){
		 if(array_key_exists('Yes', $exist)){
			 $art17 = "Yes";
			 break;
		}elseif(!isset($filter['filter']['field_article17_uwwtp_value_art'])){
			 $art17 = "No";
		}
	}
	if($art17 == "No"){
		unset($header[8]);
	}
    uwwtd_sort_data($filter, $GLOBALS['uwwtd']['ui']['field']['uwwtp_pressure'], $data);


    $optionstyle = array();
    //get the size of the point


    $optionstyle['popup_title_type'] = 'treatment-plant';
    $optionstyle['popup'] = array(
        'field_uwwtreatmenttype_value_format' => array('label' => 'Treatment type in place'),
        'field_physicalcapacityactivity_value_format' => array('label' => 'Capacity'),
        'field_uwwcompliance_value_format' => array('label' => 'Compliance'),
        'field_uwwprimarytreatment_value_format' => array('label' => 'Primary treatment'),
        'field_uwwsecondarytreatment_value_format' => array('label' => 'Secondary treatment'),
        'field_uwwnremoval_value_format' => array('label' => 'N-removal'),
        'field_uwwpremoval_value_format' => array('label' => 'P-removal'),

        'field_uwwboddischarge_value_format' => array('label' => 'Discharged load BOD (t per year)'),
        'field_uwwcoddischarge_value_format' => array('label' => 'Discharged load COD (t per year)'),
        'field_uwwndischarge_value_format' => array('label' => 'Discharged load Ntot (t per year)'),
        'field_uwwpdischarge_value_format' => array('label' => 'Discharged load Ptot (t per year)'),
    );

//     dsm($optionstyle);
//     dsm($data);

    //todo format data in table
//     $graph = array();
    foreach($data as $row) {
		if(isset($header[8]) && ($header[8]['field'] == 'field_article17_uwwtp_value')){
		   $rows[] = array('data' => array(
				//$row['title'],
				($type_export != '' ? $row['title'] : l($row['title'], uwwtd_get_url_path($optionstyle['popup_title_type'], array(strtolower($row['field_inspireidlocalid_value']), $row['field_anneedata_value'])))),
				$row['field_inspireidlocalid_value'],
				$row['field_uwwloadenteringuwwtp_value_format'],
				$row['field_physicalcapacityactivity_value_format'],
				$row['field_uwwboddischarge_value_format'],
				$row['field_uwwcoddischarge_value_format'],
				$row['field_uwwndischarge_value_format'],
				$row['field_uwwpdischarge_value_format'],
				$row['field_article17_uwwtp_value_format'],
			));
		}else{
			$rows[] = array('data' => array(
				($type_export != '' ? $row['title'] : l($row['title'], uwwtd_get_url_path($optionstyle['popup_title_type'], array(strtolower($row['field_inspireidlocalid_value']), $row['field_anneedata_value'])))),
				$row['field_inspireidlocalid_value'],
				$row['field_uwwloadenteringuwwtp_value_format'],
				$row['field_physicalcapacityactivity_value_format'],
				$row['field_uwwboddischarge_value_format'],
				$row['field_uwwcoddischarge_value_format'],
				$row['field_uwwndischarge_value_format'],
				$row['field_uwwpdischarge_value_format'],
			));
		}
    }
    
    //here export data and exit
    if ($type_export != '') {
        uwwtd_export_data($type_export, 'uwwtp_pressure_'.$filter['filter']['field_anneedata_value'], $header_export, $rows);
    }
        
//     dsm($data);
    $optionstyle['weight']['list'] = uwwtd_get_point_size_from_preset($preset, 'openlayers_plus_behavior_scalepoints');
    $optionstyle['weight']['field'] = 'field_uwwboddischarge_value';
//     dsm($optionstyle['weight']);
    $features['uwwtp_bod_pressure_'] = uwwtd_build_feature($data, $optionstyle, $returnvalue);

    $optionstyle['weight']['field'] = 'field_uwwcoddischarge_value';
//     dsm($optionstyle['weight']);
    $features['uwwtp_cod_pressure_'] = uwwtd_build_feature($data, $optionstyle, $returnvalue);

    $optionstyle['weight']['field'] = 'field_uwwndischarge_value';
//     dsm($optionstyle['weight']);
    $features['uwwtp_n_pressure_'] = uwwtd_build_feature($data, $optionstyle, $returnvalue);

    $optionstyle['weight']['field'] = 'field_uwwpdischarge_value';
//     dsm($optionstyle['weight']);
    $features['uwwtp_p_pressure_'] = uwwtd_build_feature($data, $optionstyle, $returnvalue);
//     $features = array();
//     dsm($features);
//     unset($data);

    $rendermap = uwwtd_build_map($map, $features);
    unset($features);

//  f_annee.field_anneedata_value,
//  f_aggcode.field_inspireidlocalid_value,
//  f_agggenerated.field_agggenerated_value,
//  f_art3.field_aggart3compliance_value,
//  f_art4.field_aggart4compliance_value,
//  f_art5.field_aggart5compliance_value,
//  f_art6.field_aggart6compliance_value,
//  f_comp.field_aggcompliance_value,
//  f_nuts.field_regionnuts_value,
    unset($data);

    //first graph number agglo
//     $data_pie = array();
//     $xaxis = array();
//     $i = 0;
//     foreach($graph as $treatmenttype_format => $detail) {
//         $d1 = new flotData($detail['nb']);
//         $d1->label = $treatmenttype_format;//$detail['label'];
//         $d1->color = $optionstyle['color']['list'][$treatmenttype_format];//$detail['label'];
//         $data_pie[] = $d1;
// //         $xaxis[] = array($i++, $treatmenttype_format);
//     }
//
//     $options = new flotStylePie();
// //     $options->axis_range('yaxis', array(null,100), 4);
// //     $options->axis_ticks('xaxis', $xaxis);
//     $options->legend  =new StdClass();
//     $options->legend->show = true;
//     $options->legend->position = "ne";
//     $options->resize = true;
//     $options->legend->labelFormatter = 'uwwtd_labelformaterpie_legend';
//     $options->series->pie->label->formatter = 'uwwtd_labelformaterpie';
//     //!!//custom for replace string by callback in module flot...//!!//
//     $options->replace = new StdClass();
//     $options->replace->transform_on_callback = array($options->legend->labelFormatter, $options->series->pie->label->formatter);
//     //!!//custom for replace string by callback in module flot...//!!//
//
// //     todo legend color
// //     $optionstyle['color']  = array(
// //         'C' => "#4f91e1",
// //         'NR' => "#a2a2a2",
// //         'NC' => "#d93c3c",
// //         'NI' => "#6b6b6b",
// //     );
//
//     $variables_nb = array(
//         'data' => $data_pie,
//         'element' => array(
//             'id' => 'flot-auto-identifier-1',
//             'style' => 'width: 500px; height: 200px; padding: 0px; position: relative;',
//         ),
// //         'legend' => TRUE,
// //         'zoom' => false,
//         'options' => clone $options,
//     );
//
// //     $render_graph_nb = theme('flot_graph', $variables);
//
//     $render_table_graph_nb = '
//
//     <table id="views-aggregator-datatable-nb" class="views-table cols-2">
//     <thead>
//     <tr>
//         <th class="views-field views-field-title">
//         Number of plants
//         </th>
//         <th class="views-field views-field-field-aggcompliance">
//         Treatment type in place
//         </th>
//     </tr>
//     </thead>
//     <tbody>
//       ';
//       $i = 0;
//       $total = 0;
//       foreach($graph as $treatmenttype_format => $detail) {
//         $render_table_graph_nb .= '<tr class="'.($i % 2 == 0 ? 'odd' : 'even').' views-row-first">
//             <td class="views-field views-field-title">
//             ' . uwwtd_format_number($detail['nb']). '
//             </td>
//             <td class="views-field views-field-field-aggcompliance">
//             '. $treatmenttype_format . '
//             </td>
//         </tr>';
//         $i++;
//         $total += $detail['nb'];
//       }
//
//       $render_table_graph_nb .= '</tbody>
//         <tfoot>
//         <tr>
//             <th class="views-field views-field-title">
//             ' . uwwtd_format_number($total) . '
//             </th>
//             <th class="views-field views-field-field-aggcompliance">
//             </th>
//         </tr>
//         </tfoot>
//         </table>
//         ';
//
//     //second graph load generated
//     $data_pie = array();
//     $xaxis = array();
//     $i = 0;
//     foreach($graph as $treatmenttype_format => $detail) {
//         $d1 = new flotData($detail['field_uwwloadenteringuwwtp_value']);
//         $d1->label = $treatmenttype_format;//$detail['label'];
//         $d1->color = $optionstyle['color']['list'][$treatmenttype_format];//$detail['label'];
//         $data_pie[] = $d1;
// //         $xaxis[] = array($i++, $treatmenttype_format);
//     }
//
//     $options = new flotStylePie();
// //     $options->axis_range('yaxis', array(null,100), 4);
// //     $options->axis_ticks('xaxis', $xaxis);
//     $options->legend  =new StdClass();
//     $options->legend->show = true;
//     $options->legend->position = "ne";
//     $options->resize = true;
//     $options->legend->labelFormatter = 'uwwtd_labelformaterpie_legend';
//     $options->series->pie->label->formatter = 'uwwtd_labelformaterpie';
//     //!!//custom for replace string by callback in module flot...//!!//
//     $options->replace = new StdClass();
//     $options->replace->transform_on_callback = array($options->legend->labelFormatter, $options->series->pie->label->formatter);
//     //!!//custom for replace string by callback in module flot...//!!//
//
//     $variables = array(
//         'data' => $data_pie,
//         'element' => array(
//             'id' => 'flot-auto-identifier-2',
//             'style' => 'width: 500px; height: 200px; padding: 0px; position: relative;',
//         ),
// //         'legend' => TRUE,
// //         'zoom' => false,
//         'options' => clone $options,
//     );
//
// //     $render_graph = theme('flot_graph', $variables);
//
//     $render_table_graph = '
//
//     <table id="views-aggregator-datatable" class="views-table cols-2">
//     <thead>
//     <tr>
//         <th class="views-field views-field-title">
//         Load entering (p.e.)
//         </th>
//         <th class="views-field views-field-field-aggcompliance">
//         Treatment type in place
//         </th>
//     </tr>
//     </thead>
//     <tbody>
//       ';
//       $i = 0;
//       $total = 0;
//       foreach($graph as $treatmenttype_format => $detail) {
//         $render_table_graph .= '<tr class="'.($i % 2 == 0 ? 'odd' : 'even').' views-row-first">
//             <td class="views-field views-field-title">
//             ' . uwwtd_format_number($detail['field_uwwloadenteringuwwtp_value']). '
//             </td>
//             <td class="views-field views-field-field-aggcompliance">
//             '.  $treatmenttype_format . '
//             </td>
//         </tr>';
//         $i++;
//         $total += $detail['field_uwwloadenteringuwwtp_value'];
//       }
//
//       $render_table_graph .= '</tbody>
//         <tfoot>
//         <tr>
//             <th class="views-field views-field-title">
//             ' . uwwtd_format_number($total) . '
//             </th>
//             <th class="views-field views-field-field-aggcompliance">
//             </th>
//         </tr>
//         </tfoot>
//         </table>
//         ';


    $build['tablesort_table'] = array(
            '#theme' => 'table',
            '#header' => $header,
            '#rows' => $rows,
        );
    //build export data on ODT,XML,CSV,DOC...

    //todo save view and map and .install update map/style/overlay
//     $render_graph_nb = theme('flot_graph', $variables_nb);

//     $render_graph = theme('flot_graph', $variables);
//style="page-break-after:always;"
//     $page = '<h1>'.$title.'</h1>'
//             . $form
//             . $rendermap
// //             . '<div class="view-content flot-title">Treatment type in place by Plants</div>'
// //             . '<div class="view-content">'.$render_graph_nb.'</div>'
// //             . '<div class="view-content">'.$render_table_graph_nb.'</div>'
// //             . '<div class="view-content flot-title">Treatment type in place by Load entering (p.e.)</div>'
// //             . '<div class="view-content">'.$render_graph.'</div>'
// //             . '<div class="view-content">'.$render_table_graph.'</div>'
//             . '<div class="view-content">'. drupal_render($build) . '</div>'
//      ;

    
    $page =  '<h1>'.$title.'</h1>'
            . $form
            . '<div class="rows map-row" >'.$rendermap.'</div>'
			
            . '<div class="rows data-table-row">'
				. '<div class="data-table-header">'
			  . '<b>'.count($rows) ." results</b>"		
				. '<div class="hideprint export-result"> | Download results: '
					.l('csv', 'uwwtps/pressure/csv', array('attributes'=>array('class'=>array("export-result-btn")),'query'=>drupal_get_query_parameters())).' '
					.l('xls', 'uwwtps/pressure/xls', array('attributes'=>array('class'=>array("export-result-btn")),'query'=>drupal_get_query_parameters()))
				.'</div>'
			 .'</div>'
                . '<div class="view-content">'. drupal_render($build) . '</div>'
                . '<!--markerprinttable-->'  //use for print wjhtmltopdf              
            .'</div>'
     ;


     if (true === $put_in_cache) {
        cache_set($cache_name, array('page' => $page,
                                    'flot1' => $variables_nb,
                                    'flot2' => $variables), 'cache_page', CACHE_PERMANENT);
     }

     return $page;
}

function uwwtd_is_filter_default($filter, $option)
{
    $result = false;
    if (count($filter['filter']) == 1 && isset($filter['filter']['field_anneedata_value'])
        && $filter['order'] == $option['default']['order']
        && $filter['sort'] == $option['default']['sort']) {
        $result = true;
    }
    return $result;
}

function uwwtd_page_agglomeration_compliance($type_export = '')
{
    $title = 'UWWTD Agglomerations- Compliance map';
    drupal_set_title($title);
    drupal_add_js(drupal_get_path('module', 'uwwtd') . '/js/uwwtd.js');
    drupal_add_js(drupal_get_path('module', 'uwwtd') . '/lib/flip/jquery.flip.min.js');
//     drupal_add_js(drupal_get_path('module', 'uwwtd') . '/../../libraries/d3/d3.v3.min.js')
	$type = "agglomeration";
    $option = array();
    $option['order'] = $GLOBALS['uwwtd']['ui']['field']['agglomeration'];
    $option['default']['order'] = $GLOBALS['uwwtd']['ui']['field']['agglomeration']['field_agggenerated_value'];
    $option['default']['sort'] = 'desc';
    $option['allyear'] = uwwtd_get_all_year();
	$option['allnuts'] = uwwtd_get_all_nuts($type);
	$option['allrbd'] = uwwtd_get_all_rbd($type);
	
    $filter = uwwtd_get_form_filter($option);
    $preset_name = 'agg_compliance_map';
    $preset = openlayers_preset_load($preset_name);
    $map    = openlayers_build_map($preset->data);

    $cache = '';
    $cache_name = uwwtd_get_cache_key_page_agglo_compliance($filter['filter']);

    //use cache only for page with no filter , or only the year and default sort
    $put_in_cache = uwwtd_is_filter_default($filter, $option) && uwwtd_is_user_anonymous() && $type_export == '';
    if (UWWTD_CACHE_ACTIVE === true && true === $put_in_cache) {
        $cache = cache_get($cache_name, 'cache_page');
    }
    if (!empty($cache) && isset($cache->data) && !empty($cache->data)) {
//         dsm('in cache');
        $render_graph_nb = theme('flot_graph', $cache->data['flot1']);
        $render_graph = theme('flot_graph', $cache->data['flot2']);
        return $cache->data['page'];
    }
	$data = uwwtd_get_data_agglomeration($filter['filter']);
   foreach($data as $art){
	   // dsm($art);
	  if(isset($art['field_article17_agglo_nid']) || ($art['field_article17_agglo_nid']!= '')){
		    $list_field = array(
				'field_anneedata_value'         => array('title' => 'Year of data', 'type' => 'select', 'data' => $option['allyear']),
				'field_agggenerated_value'      => array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration']['field_agggenerated_value'], 'type' => 'selectoperator', 'data' => $GLOBALS['uwwtd']['ui']['operator']),
				'field_aggcompliance_value'     => array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration']['field_aggcompliance_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['compliance']),
				'field_aggart3compliance_value' => array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration']['field_aggart3compliance_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['compliance']),
				'field_aggart4compliance_value' => array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration']['field_aggart4compliance_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['compliance']),
				'field_aggart5compliance_value' => array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration']['field_aggart5compliance_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['compliance']),
				//'field_aggart6compliance_value' => array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration']['field_aggart6compliance_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['compliance']),
				'field_article17_agglo_value'  	=> array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration']['field_article17_agglo_value'], 'type' => 'selectarticle', 'data' => $GLOBALS['uwwtd']['ui']['yes_no']),
				'field_regionnuts_value'  		=> array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration']['field_regionnuts_value'], 'type' => 'selectregion', 'data' => $option['allnuts']),
				'rbd' => array('title' => t('River Basin District'), 'type' => 'select', 'data' => $option['allrbd']),
			);
	   }
       else{
		   $list_field = array(
				'field_anneedata_value'         => array('title' => 'Year of data', 'type' => 'select', 'data' => $option['allyear']),
				'field_agggenerated_value'      => array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration']['field_agggenerated_value'], 'type' => 'selectoperator', 'data' => $GLOBALS['uwwtd']['ui']['operator']),
				'field_aggcompliance_value'     => array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration']['field_aggcompliance_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['compliance']),
				'field_aggart3compliance_value' => array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration']['field_aggart3compliance_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['compliance']),
				'field_aggart4compliance_value' => array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration']['field_aggart4compliance_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['compliance']),
				'field_aggart5compliance_value' => array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration']['field_aggart5compliance_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['compliance']),
				//'field_aggart6compliance_value' => array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration']['field_aggart6compliance_value'], 'type' => 'select', 'data' => $GLOBALS['uwwtd']['ui']['compliance']),
				'field_regionnuts_value'  		=> array('title' => $GLOBALS['uwwtd']['ui']['field']['agglomeration']['field_regionnuts_value'], 'type' => 'selectregion', 'data' => $option['allnuts']),
				'rbd' => array('title' => t('River Basin District'), 'type' => 'select', 'data' => $option['allrbd']),
				);
	   }
   }
// dsm($list_field);
    $form = uwwtd_filter_form($list_field, $filter);


//     dsm($data);
    //e.vincent / bruno want to show only agglo > 2000
    $filter_force = array();
    $filter_force['filter']['field_agggenerated_value_op'] = '>';
    $filter_force['filter']['field_agggenerated_value']['value'] = variable_get('min_aggenerated_display', '2000');
    if (variable_get('display_only_active', '1') == 1) {
        $filter_force['filter']['field_status_value'] = '1';
    }
	// dsm($filter);
    uwwtd_filter_data($filter, $data, $filter_force);        
//     uwwtd_filter_data($filter, $data);
    $header = array();
    $header_export = array();
    foreach($GLOBALS['uwwtd']['ui']['field']['agglomeration'] as $field => $name) {
        $header[] = array(
            'data' => $name,
            'field' => $field,
        );

        //set default sort if none exists
//         if (false === isset($filter['sort']) && $field == 'field_agggenerated_value') {
        if ($filter['order'] == $name) {
            $header[count($header)-1]['sort'] = $filter['sort'];
        }

        $header_export[] = $name;
    }
	foreach($data as $art17){
		if(isset($art17['field_article17_agglo_value_format']) && ($art17['field_article17_agglo_value_format']== 'Yes')){
			$exists[] = array('Yes' => $art17['field_article17_agglo_nid']);
			break;
		}else{
			$exists[] = array('No' => "");
		}
	}
	foreach($exists as $exist){
		 if(array_key_exists('Yes', $exist)){
			 $art17 = "Yes";
			 break;
		}elseif(!isset($filter['filter']['field_article17_agglo_value_art'])){
			 $art17 = "No";
		}
	 }
	  if($art17 == "No"){
		  unset($header[9]);
	  }
	  unset($header[8]);
//     $header[] = $header[0]; //todo delete
//     $header[] = $header[0]; //todo delete
    uwwtd_sort_data($filter, $GLOBALS['uwwtd']['ui']['field']['agglomeration'], $data);
//     dsm($data);

    $optionstyle = array();
    //get the color for the point
    $optionstyle['color']['list'] = uwwtd_get_point_color_from_preset($preset);
    $optionstyle['color']['field'] = 'field_aggcompliance_value_format';
    //get the size of the point
    $optionstyle['weight']['list'] = uwwtd_get_point_size_from_preset($preset, 'openlayers_plus_behavior_scalepoints');
    $optionstyle['weight']['field'] = 'field_agggenerated_value';




//     $optionstyle['weight'] = $GLOBALS['uwwtd']['ui']['pe_weight'];
//     $optionstyle['weight']['list'] = $GLOBALS['uwwtd']['ui']['pe_weight'];
//     $optionstyle['weight']['field'] = 'field_agggenerated_value';
//     array(
//       1 =>  2000,
//       2 =>  10000,
//       3 =>  150000,
//       4 =>  0,
//     );
    //todo get tis value from database!
    //todo : get field name for database NC => not compliant ...
//     $optionstyle['color']  = $GLOBALS['uwwtd']['ui']['compliance_color'];
//     $optionstyle['color']['list']  = $GLOBALS['uwwtd']['ui']['compliance_color'];
//     $optionstyle['color']['field'] = 'field_aggcompliance_value';
//     array(
//         'C' => "#4f91e1",
//         'NR' => "#a2a2a2",
//         'NC' => "#d93c3c",
//         'NI' => "#6b6b6b",
//     );
    //popup
//     $optionstyle['popup_title_type'] = 'treatment-plant';
//     $optionstyle['popup_title_type'] = 'discharge-pointt';
    $optionstyle['popup_title_type'] = 'agglomeration';
	
    $optionstyle['popup'] = array(
        'field_agggenerated_value_format' => array('label' => 'Generated load (p.e.)'),
        'field_aggcompliance_value_format' => array('label' => 'Compliance'),
        'field_aggart3compliance_value_format' => array('label' => 'Connection compliance'),
        'field_aggart4compliance_value_format' => array('label' => '2nd treatment compliance'),
        'field_aggart5compliance_value_format' => array('label' => '3rd treatment compliance'),
//         'field_aggart6compliance_value' => array('label' => 'Article 6 compliance'),
//         'field_aggc1_value' => array('label' => 'Collecting system'),
//         'field_aggc2_value' => array('label' => 'Individual and Appropriate Systems (IAS)'),
//         'field_aggpercwithouttreatment_value' => array('label' => 'Discharge without treatment'),
    );


    //todo format data in table
    $graph = array();
    foreach($data as $row) {
        if (false === isset($graph[$row['field_aggcompliance_value_format']])) {
            $graph[$row['field_aggcompliance_value_format']]['nb'] = 0;
            $graph[$row['field_aggcompliance_value_format']]['field_agggenerated_value'] = 0;
//             $graph[$row['field_aggcompliance_value_format']]['label'] = 'TODO';
        }
        $graph[$row['field_aggcompliance_value_format']]['nb']++;
        $graph[$row['field_aggcompliance_value_format']]['field_agggenerated_value'] += $row['field_agggenerated_value'];
        //format data
//         $row['field_agggenerated_value_format'] = uwwtd_format_number($row['field_agggenerated_value']);
//         $row['field_aggcompliance_value_format'] = $GLOBALS['uwwtd']['ui']['field']['compliance_label'][$row['field_aggcompliance_value']];
//         $row['field_aggart3compliance_value_format'] = $GLOBALS['uwwtd']['ui']['field']['compliance_label'][$row['field_aggart3compliance_value']];
//         $row['field_aggart4compliance_value_format'] = $GLOBALS['uwwtd']['ui']['field']['compliance_label'][$row['field_aggart4compliance_value']];
//         $row['field_aggart5compliance_value_format'] = $GLOBALS['uwwtd']['ui']['field']['compliance_label'][$row['field_aggart5compliance_value']];
//         $row['field_aggart6compliance_value_format'] = $GLOBALS['uwwtd']['ui']['field']['compliance_label'][$row['field_aggart6compliance_value']];

		if(isset($header[9]) && ($header[9]['field'] == 'field_article17_agglo_value')){
			$titleV = truncate_utf8($row['title'], 20, $wordsafe = TRUE, $add_ellipsis = TRUE, $min_wordsafe_length = 10);
			$rows[] = array('data' => array(
				//$row['title'],
				($type_export != '' ? $row['title'] : l($titleV, uwwtd_get_url_path($optionstyle['popup_title_type'], array(strtolower($row['field_inspireidlocalid_value']), $row['field_anneedata_value'])))),
				$row['field_inspireidlocalid_value'],
				$row['field_agggenerated_value_format'],
				($row['n3nm']!=''?$row['n3nm']:$row['field_regionnuts_value']),
                $row['rbd'].' '.$row['rbdname'],
				$row['field_aggcompliance_value_format'],
				$row['field_aggart3compliance_value_format'],
				$row['field_aggart4compliance_value_format'],
				$row['field_aggart5compliance_value_format'],
				// $row['field_aggart6compliance_value_format'],
				// $row['field_aggart6compliance_value_format'],//todo delete
				// $row['field_aggart6compliance_value_format'],//todo delete
				$row['field_article17_agglo_value_format'],
			));
		}else{
			 $rows[] = array('data' => array(
				//$row['title'],
				($type_export != '' ? $row['title'] : l($row['title'], uwwtd_get_url_path($optionstyle['popup_title_type'], array(strtolower($row['field_inspireidlocalid_value']), $row['field_anneedata_value'])))),
				$row['field_inspireidlocalid_value'],
				$row['field_agggenerated_value_format'],
				($row['n3nm']!=''?$row['n3nm']:$row['field_regionnuts_value']),
                $row['rbd'].' '.$row['rbdname'],
				$row['field_aggcompliance_value_format'],
				$row['field_aggart3compliance_value_format'],
				$row['field_aggart4compliance_value_format'],
				$row['field_aggart5compliance_value_format'],
				// $row['field_aggart6compliance_value_format'],
				// $row['field_aggart6compliance_value_format'],//todo delete
				// $row['field_aggart6compliance_value_format'],//todo delete

			));
		}

    }

    //here export data and exit
    if ($type_export != '') {
        uwwtd_export_data($type_export, 'agglomeration_compliance_'.$filter['filter']['field_anneedata_value'], $header_export, $rows);
    }


    $features['compliance_map'] = uwwtd_build_feature($data, $optionstyle, $returnvalue);
//     dsm($features);
    $rendermap = uwwtd_build_map($map, $features);
    unset($features);

//  f_annee.field_anneedata_value,
//  f_aggcode.field_inspireidlocalid_value,
//  f_agggenerated.field_agggenerated_value,
//  f_art3.field_aggart3compliance_value,
//  f_art4.field_aggart4compliance_value,
//  f_art5.field_aggart5compliance_value,
//  f_art6.field_aggart6compliance_value,
//  f_comp.field_aggcompliance_value,
//  f_nuts.field_regionnuts_value,
    unset($data);

    //first graph number agglo
    $data_pie = array();
    $xaxis = array();
    $i = 0;
//     dsm($optionstyle);
    foreach($graph as $compliance_format => $detail) {
        $d1 = new flotData($detail['nb']);
        $d1->label = $compliance_format;//$GLOBALS['uwwtd']['ui']['field']['compliance_label'][$compliance];//$detail['label'];
        $d1->color = $optionstyle['color']['list'][$compliance_format];//$detail['label'];
        $data_pie[] = $d1;
//         $xaxis[] = array($i++, $GLOBALS['uwwtd']['ui']['field']['compliance_label'][$compliance]);
//         $xaxis[] = array($i++, $compliance_format.'__pppp');
    }

    $options = new flotStylePie();
//     $options->axis_range('yaxis', array(null,100), 4);
//     $options->axis_ticks('xaxis', $xaxis);
    $options->legend  = new StdClass();
    $options->legend->show = true;
    $options->legend->position = "ne";
    $options->resize = true;
    $options->legend->labelFormatter = 'uwwtd_labelformaterpie_legend';
    $options->series->pie->label->formatter = 'uwwtd_labelformaterpie';
    //!!//custom for replace string by callback in module flot...//!!//
    $options->replace = new StdClass();
    $options->replace->transform_on_callback = array($options->legend->labelFormatter, $options->series->pie->label->formatter);
    //!!//custom for replace string by callback in module flot...//!!//

//     $options->series->pie->label->formatter = 'function testlabelformater(label, series) {
// 		return \'po\';
// 	}';
//     dsm($options);
//     dsm(drupal_json_encode($options));
//     dsm(json_encode($options));
//     $this->series->pie->show = TRUE;
//     $this->series->pie->radius = 1;
//     $this->series->pie->label->show = TRUE;
//     $this->series->pie->label->radius = 2/3;
//     $this->series->pie->label->threshold = 0.1;
//     $this->series->pie->label->background->opacity = 1;

//     todo legend color
//     $optionstyle['color']  = array(
//         'C' => "#4f91e1",
//         'NR' => "#a2a2a2",
//         'NC' => "#d93c3c",
//         'NI' => "#6b6b6b",
//     );

    $variables_nb = array(
        'data' => $data_pie,
        'element' => array(
            'id' => 'flot-auto-identifier-1',
            'style' => 'width: 500px; height: 200px; padding: 0px; position: relative;',
        ),
//         'legend' => TRUE,
//         'zoom' => false,
        'options' => clone $options,
    );

//     $render_graph_nb = theme('flot_graph', $variables);

    $render_table_graph_nb = '

    <table id="views-aggregator-datatable-nb" class="views-table cols-2">
    <thead>
    <tr>
        <th class="views-field views-field-title">
        Number of agglomeration
        </th>
        <th class="views-field views-field-field-aggcompliance">
        Compliance
        </th>
    </tr>
    </thead>
    <tbody>
      ';
      $i = 0;
      $total = 0;
      foreach($graph as $compliance_format => $detail) {
        $render_table_graph_nb .= '<tr class="'.($i % 2 == 0 ? 'odd' : 'even').' views-row-first">
            <td class="views-field views-field-title">
            ' . uwwtd_format_number($detail['nb']) . '
            </td>
            <td class="views-field views-field-field-aggcompliance">
            '. $compliance_format . '
            </td>
        </tr>';
        $i++;
        $total += $detail['nb'];
      }

      $render_table_graph_nb .= '</tbody>
        <tfoot>
        <tr>
            <th class="views-field views-field-title">
            ' . uwwtd_format_number($total) . '
            </th>
            <th class="views-field views-field-field-aggcompliance">
            </th>
        </tr>
        </tfoot>
        </table>
        ';

    //second graph load generated
    $data_pie = array();

    $xaxis = array();
    $i = 0;
//     $aData = array();

    foreach($graph as $compliance_format => $detail) {
        $d1 = new flotData($detail['field_agggenerated_value']);
        $d1->label =$compliance_format;//$detail['label'];
        $d1->color = $optionstyle['color']['list'][$compliance_format];//$detail['label'];
        $data_pie[] = $d1;


//         $aData[] = array(
//             "value" => $detail['field_agggenerated_value'],
//             "label" => $compliance_format,
//             "color" => $optionstyle['color']['list'][$compliance_format],
//         );
//         $xaxis[] = array($i++, $compliance_format);
    }

    $options = new flotStylePie();
//     $options->axis_range('yaxis', array(null,100), 4);
//     $options->axis_ticks('xaxis', $xaxis);
    $options->legend  =new StdClass();
    $options->legend->show = true;
    $options->legend->position = "ne";
    $options->resize = true;
    $options->legend->labelFormatter = 'uwwtd_labelformaterpie_legend';
    $options->series->pie->label->formatter = 'uwwtd_labelformaterpie';
    //!!//custom for replace string by callback in module flot...//!!//
    $options->replace = new StdClass();
    $options->replace->transform_on_callback = array($options->legend->labelFormatter, $options->series->pie->label->formatter);
    //!!//custom for replace string by callback in module flot...//!!//

    $variables = array(
        'data' => $data_pie,
        'element' => array(
            'id' => 'flot-auto-identifier-2',
            'style' => 'width: 500px; height: 200px; padding: 0px; position: relative;',
        ),
//         'legend' => TRUE,
//         'zoom' => false,
        'options' => clone $options,
    );

    $render_graph = theme('flot_graph', $variables);

    $render_table_graph = '

    <table id="views-aggregator-datatable" class="views-table cols-2">
    <thead>
    <tr>
        <th class="views-field views-field-title">
        Generated load (p.e.)
        </th>
        <th class="views-field views-field-field-aggcompliance">
        Compliance
        </th>
    </tr>
    </thead>
    <tbody>
      ';
      $i = 0;
      $total = 0;
      foreach($graph as $compliance_format => $detail) {
        $render_table_graph .= '<tr class="'.($i % 2 == 0 ? 'odd' : 'even').' views-row-first">
            <td class="views-field views-field-title">
            ' . uwwtd_format_number($detail['field_agggenerated_value']). '
            </td>
            <td class="views-field views-field-field-aggcompliance">
            '. $compliance_format . '
            </td>
        </tr>';
        $i++;
        $total += $detail['field_agggenerated_value'];
      }

      $render_table_graph .= '</tbody>
        <tfoot>
        <tr>
            <th class="views-field views-field-title">
            ' . uwwtd_format_number($total) . '
            </th>
            <th class="views-field views-field-field-aggcompliance">
            </th>
        </tr>
        </tfoot>
        </table>
        ';


    $build['tablesort_table'] = array(
            '#theme' => 'table',
            '#header' => $header,
            '#rows' => $rows,
        );
    //build export data on ODT,XML,CSV,DOC...
    $render_graph_nb = theme('flot_graph', $variables_nb);
    $render_graph = theme('flot_graph', $variables);


   

    $page = ''
            . '<h1>'.$title.'</h1>'
            . $form
            . '<div class="rows map-row" >'.$rendermap.'</div>'
            . '<div class="rows charts-row" >'
                .'<div class="cell charts-rows-cell">'
                  .'<div class="cell-content">'
                    .'<div class="container flip">'
                      .'<div class="leftgraph front">'
                        . '<div class="flot-title"><div class="flip-title">Global compliance by number of agglomeration (&gt2000 pe)</div>


                        <img src="'.file_create_url(drupal_get_path('theme', 'uwwtd').'/images/corner-table-off.png').'" class="button-flipper to-table" title="See the data table" alt="See the data table">
                        </div>'
                        . '<div class="view-content">'.$render_graph_nb.'</div>'
//                         . '<div class="view-content"><div id="flot-auto-identifier-1"></div></div>'
                      .'</div>'

                      .'<div class="leftgraph back">'
                        . '<div class="flot-title flip-title-back"><div class="flip-title">Global compliance by number of agglomeration (&gt2000 pe)</div>


                        <img src="'.file_create_url(drupal_get_path('theme', 'uwwtd').'/images/corner-chart-off.png').'" class="button-flipper to-chart" title="See diagram" alt="See diagram">

                        </div>'
                        . '<div class="view-content">'.$render_table_graph_nb.'</div>'
                      .'</div>'
                    .'</div>'
                  .'</div>'
                .'</div>'
                .'<div class="cell charts-rows-cell">'
                  .'<div class="cell-content">'
                    .'<div class="container flip">'

                      .'<div class="rightgraph front">'
                        . '<div class="flot-title"><div class="flip-title">Global compliance by Generated load (p.e.)</div>


                        <img src="'.file_create_url(drupal_get_path('theme', 'uwwtd').'/images/corner-table-off.png').'" class="button-flipper to-table" title="See the data table" alt="See the data table">
                        </div>'
                        . '<div class="view-content">'.$render_graph.'</div>'
//                         . '<div class="view-content"><div id="flot-auto-identifier-2"></div></div>'

                      .'</div>'

                      .'<div class="rightgraph back">'
                        . '<div class="flot-title flip-title-back"><div class="flip-title">Global compliance by Generated load (p.e.)</div>


                        <img src="'.file_create_url(drupal_get_path('theme', 'uwwtd').'/images/corner-chart-off.png').'" class="button-flipper to-chart" title="See diagram" alt="See diagram">
                        </div>'
                        . '<div class="view-content">'.$render_table_graph.'</div>'
                      .'</div>'
                    .'</div>'
                  .'</div>'
                .'</div>'
            .'</div>'
            . '<div class="rows data-table-row">'
			 . '<div class="data-table-header">'
			  . '<b>'.count($rows) ." results</b>"		
				. '<div class="hideprint export-result"> | Download results: '
					.l('csv', 'agglomerations/compliance/csv', array('attributes'=>array('class'=>array("export-result-btn")),'query'=>drupal_get_query_parameters())).' '
					.l('xls', 'agglomerations/compliance/xls', array('attributes'=>array('class'=>array("export-result-btn")),'query'=>drupal_get_query_parameters()))
				.'</div>'
			 .'</div>'
				
                . '<div class="view-content">'. drupal_render($build) . '</div>'
			
                . '<!--markerprinttable-->'  //use for print wkhtmltopdf
            .'</div>'
//     .'<script>
//     jQuery(document).ready(function(){
//         display_agglo_compliance_piechart('.json_encode($aData) . ', \'#flot-auto-identifier-1\');
//         display_agglo_compliance_piechart('.json_encode($aData) . ', \'#flot-auto-identifier-2\');
//     });
//     </script>            '
     ;
     if (true === $put_in_cache) {
        cache_set($cache_name, array('page' => $page,
                                    'flot1' => $variables_nb,
                                    'flot2' => $variables), 'cache_page', CACHE_PERMANENT);
     }

     return $page;
}

function uwwtd_get_url_path($type, $param = array())
{
    $path = '';
    switch($type) {
        case 'agglomeration':
        case 'treatment-plant':
        case 'discharge-point':
            $path .= $type;
            foreach ($param as $value) {
                $path.= '/' . $value;
            }
            break;
    }
    return $path;
}

function uwwtd_update_cache_data($list_year = array())
{
//     dsm(__FUNCTION__);
    if (empty($list_year)) {
        $list_year = uwwtd_get_all_year();
    }
    foreach($list_year as $year) {
        $option['field_anneedata_value'] = $year;
        //clear last cache with empty string
        cache_set(uwwtd_get_cache_key_agglomeration($option), '', 'cache', 10);
        cache_set(uwwtd_get_cache_key_uwwtp($option), '', 'cache', 10);
        cache_set(uwwtd_get_cache_key_dcp($option), '', 'cache', 10);

        //calculate new cache
        uwwtd_get_data_agglomeration($option['field_anneedata_value']);
        uwwtd_get_data_uwwtp($option['field_anneedata_value']);
        uwwtd_get_data_dcp($option['field_anneedata_value']);

        //clear cachhe block and page
        cache_set(uwwtd_get_cache_key_block_home($option), '', 'cache_block', 10);

        cache_set(uwwtd_get_cache_key_page_agglo_compliance($option), '', 'cache_page', 10);
        cache_set(uwwtd_get_cache_key_page_agglo_treatment($option), '', 'cache_page', 10);
        cache_set(uwwtd_get_cache_key_page_uwwtp_treatment($option), '', 'cache_page', 10);
        cache_set(uwwtd_get_cache_key_page_uwwtp_compliance($option), '', 'cache_page', 10);
    }
}

function uwwtd_format_number($number, $precision = 0)
{
    return number_format($number, $precision, '.', ' ');
}
function uwwtd_format_decimal($number, $precision = 1)
{
    return number_format($number, $precision, '.', ' ');
}

function uwwtd_get_point_size_from_preset($preset, $behaviour)
{
// dsm($behaviour);
// dsm($preset);   

    $weightClass = $preset->data['behaviors'][$behaviour]['arbitrary_classes'];
    $configuredWeight = explode("\n", $weightClass);
// dsm($configuredWeight);
    $list = array();
    $numWeight = 1;
    foreach($configuredWeight as $oneweight) {
        $tmp = explode('|', $oneweight);
        $list[ $numWeight ] = isset($tmp[1]) ? (int)$tmp[1] : 0;
        $numWeight++;
    }
// dsm($list);
    return $list;
}

// $GLOBALS['uwwtd']['ui']['compliance_color']  = array(
//     'C' => "#4f91e1",
//     'NR' => "#a2a2a2",
//     'NC' => "#d93c3c",
//     'NI' => "#6b6b6b",
// );
function uwwtd_get_point_color_from_preset($preset)
{
    $configuredColor = $preset->data['behaviors']['openlayers_plus_behavior_scalepoints']['fields_colors_values'];
    $configuredColor = explode("\n", $configuredColor);
    $list = array();
    foreach($configuredColor as $onecolor) {
        $tmp = explode('|', $onecolor);
        $list[ $tmp[1] ] = $tmp[2];
    }
    return $list;
}

//     $optionstyle['piechart'] = array(
//         'field_aggc1_value' => array(
//             'label' => 'Collective system',
//             'color' => '#74FFE0',
//         ),
//         'field_aggc2_value' => array(
//             'label' => 'Individual and Appropriate Systems (IAS)',
//             'color' => '#BD8842',
//         ),
//         'field_aggpercwithouttreatment_value' => array(
//             'label' => 'Discharge without treatment',
//             'color' => '#C00000',
//         ),
//     );
function uwwtd_get_piechart_from_preset($preset, $behaviour)
{
// dsm($preset);
    $configuredPiechart = $preset->data['behaviors'][$behaviour]['fields_series'];
    $configuredPiechart = explode("\n", $configuredPiechart);
// dsm($configuredPiechart);
    $list = array();
    foreach($configuredPiechart as $onefield) {
        $tmp = explode('|', $onefield);
        $list[ $tmp[0] . '_value' ] = array(
            'label' => $tmp[1],
            'color' => $tmp[2],
        );
    }
// dsm($list);
    return $list;
}

function uwwtd_get_svg_piechart($i, $values, $optionstyle, $weightstyle)
{
	$chartelem = "";

    $radius = $weightstyle['pointRadius'];
    $cx = $cy = $radius;
    $opacity = $weightstyle['fillOpacity'];
    $strokeWidth = $weightstyle['strokeWidth'];

	$sum = 0;
	foreach ($optionstyle['piechart'] as $field=>$detail) {
        if ($values[$field] == 0) {
            $values[$field] = 1;
        }
		$sum += $values[$field];
	}
	$deg = $sum/360; // one degree
	$jung = $sum/2; // necessary to test for arc type

	/* Data for grid, circle, and slices */

	$dx = $radius; // Starting point:
	$dy = 0; // first slice starts in the East
	$oldangle = 0;

	/* Loop through the slices */
    foreach ($optionstyle['piechart'] as $field=>$detail) {
		$angle = $oldangle + $values[$field]/$deg; // cumulative angle
		$x = cos(deg2rad($angle)) * $radius; // x of arc's end point
		$y = sin(deg2rad($angle)) * $radius; // y of arc's end point

		$colour = $optionstyle['piechart'][$field]['color'];

		if ($values[$field] > $jung) {
			// arc spans more than 180 degrees
			$laf = 1;
		}
		else {
			$laf = 0;
		}

		$ax = $cx + $x; // absolute $x
		$ay = $cy + $y; // absolute $y
		$adx = $cx + $dx; // absolute $dx
		$ady = $cy + $dy; // absolute $dy
		$chartelem .= "\n";
        $chartelem .= "\n";
        $chartelem .= "<g class=\"arc\" >\n";
		$chartelem .= "<path d=\"M$cx,$cy "; // move cursor to center
		$chartelem .= " L$adx,$ady "; // draw line away away from cursor
		$chartelem .= " A$radius,$radius 0 $laf,1 $ax,$ay "; // draw arc
		$chartelem .= " z\" "; // z = close path
        $chartelem .= ' style="fill: '.$colour.'; stroke: rgb(34, 34, 34); opacity: '.$opacity.'; stroke-width: '.$strokeWidth.';" stroke-linejoin="round"/>';
        $chartelem .= "</g>\n";
		$dx = $x; // old end points become new starting point
		$dy = $y; // id.
		$oldangle = $angle;
	}

	return  '<svg style="display:none;" id="pie_'.$i.'">
                '
             . $chartelem
             . '
             </svg>';
}

function uwwtd_export_data($type_export, $title, $header, $rows)
{
    $filename = tempnam('public://tmp/', 'export');
    $r = fopen($filename, 'wb');
    switch($type_export) {
        case 'csv':
            fputcsv($r, $header, ';');
            foreach($rows as $row) {
                fputcsv($r, $row['data'], ';');
            }
            break;
        case 'xls':
            fputs($r, '<html>
                        <head>
                        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
                        </head>
                        <body>
                        <table>
                        <thead>
                        ');
//                 '<html>
//                   <head>
//                     <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
//                   </head>
//                   <body>
//                     <table>
//                     <thead><tr><th>ID</th><th>Name</th><th>Age</th></tr></thead>    <tbody> <tr class="odd"><td>1</td><td>John</td><td>25</td> </tr>
//                  <tr class="even"><td>2</td><td>George</td><td>27</td> </tr>
//                  <tr class="odd"><td>3</td><td>Ringo</td><td>28</td> </tr>
//                  <tr class="even"><td>4</td><td>Paul</td><td>26</td> </tr>
//                  <tr class="odd"><td>5</td><td>Meredith</td><td>30</td> </tr>
//                       </tbody>
//                     </table>
//                   </body>
//                 </html>';
            fputs($r, '<tr><th>' . implode('</th><th>', $header) . '</th></tr>');
            fputs($r, '</thead><tbody>');
            foreach($rows as $row) {
                fputs($r, '<tr><td>' . implode('</td><td>', $row['data']) . '</td></tr>');
            }
            fputs($r, '</tbody></table></body></html>');
            break;
        default:
            $type_export = '';
            break;
    }
    fclose($r);
//     dsm(file_get_contents($filename));
//     return;
    ini_set("auto_detect_line_endings", false); //for Mac user
    $aHeaders = array(
          'Content-Type'        => 'application/octet-stream',
          'Content-Disposition' => 'attachment; filename="'.$title.'.'.$type_export.'"',
          'Expires'             => '0',
          'Cache-Control'       => 'must-revalidate',
          'Pragma'              =>'public',
          'Content-Length'      => filesize($filename),
      );
    foreach ($aHeaders as $sName => $sValue) {
        drupal_add_http_header($sName, $sValue);
    }

    readfile($filename);
    unlink($filename);
    exit();
}
/*
function uwwtd_form($form, &$form_state) {
	if($form['element']['#action'] == '/ap_uwwtd_si/stats/graphs'){



		// Get available years for data
		$query = db_select('field_data_field_anneedata', 'a');
		$query->fields('a', array('field_anneedata_value'));
		$query->orderBy('field_anneedata_value', 'DESC');
		$results = $query->execute();
		$years = array('all' => 'Show all');
		while($record = $results->fetchAssoc()) {
			$years[$record['field_anneedata_value']] = $record['field_anneedata_value'];
		}
		$form['year'] = array(
				'#title' => t('Year'),
				'#type' => 'select',
				'#options' => $years,
				'#default_value' => isset($form_state['values']['year']) ? $form_state['values']['year'] : 'all',
		);







		dpm($form);
	}

	return $form;
}
*/

/**
 *
 */ 
function uwwtd_page_download()
{
    $title = 'Download';
    drupal_set_title($title);
    
    $page = ''
            . '<h1>'.$title.'</h1>'
    ;
    return $page;
}
 
/**
 * hook_node_delete
 * delete all error whose reference this node 
 */ 
function uwwtd_node_delete($node) {
//     dsm($node);
	if (true === in_array($node->type, array(
       'agglomeration',
       'agglo_uww',
       'big_city',
       'discharge_point',
       'ms_level',
       'receiving_area',
       'uwwtp',        
        ))) {
//         dsm('entity_id ' . $node->nid);
		db_delete('uwwtd_import_errors')
        ->condition('entity_id', $node->nid, '=')
        ->execute();
	}
}

function uwwtd_get_national_stat_str($year){
	$option['field_anneedata_value'] = $year;
	$dataUwwtp = uwwtd_get_data_uwwtp($option);

	$dataAggl = uwwtd_get_data_agglomeration($option);

	$nbGeneratedLoad = 0;
	$nbCollectingSystem = 0;
	$nbPrimaryTreatement = 0;
	$nbSecondaryTreatement = 0;
	$nbOtherTreatement = 0;
	$nbPhysicalCapacity = 0;
	$nbIAS = 0;
	foreach($dataAggl as $agglo){
		$nbGeneratedLoad = $agglo['field_agggenerated_value']+ $nbGeneratedLoad;
		$aggloCollectingSystem = ($agglo['field_aggc1_value'] /100) * $agglo['field_agggenerated_value'];
		$nbCollectingSystem = $aggloCollectingSystem + $nbCollectingSystem;
		
		$aggloIAS = ($agglo['field_aggc2_value'] /100) * $agglo['field_agggenerated_value'];
		$nbIAS = $aggloIAS + $nbIAS;
	}
	
	foreach($dataUwwtp as $uwwtp){
		// dsm($uwwtp);
		if($uwwtp['field_uwwtreatmenttype_value'] == "P"){
			$nbPrimaryTreatement = $nbPrimaryTreatement+1;
		}elseif($uwwtp['field_uwwtreatmenttype_value'] == "S"){
			$nbSecondaryTreatement = $nbSecondaryTreatement +1;
		}elseif($uwwtp['field_uwwtreatmenttype_value'] == "MS"){
			$nbOtherTreatement = $nbOtherTreatement+1;
		}
		$nbPhysicalCapacity = $uwwtp['field_physicalcapacityactivity_value']+ $nbPhysicalCapacity;
	}
	$nbCollectingSystem = $nbCollectingSystem *100 / $nbGeneratedLoad;
	$totalCollectingSystem= number_format($nbCollectingSystem, 0, ".", " ");
	$nbIAS =$nbIAS *100 / $nbGeneratedLoad;
	$totalIAS = number_format($nbIAS, 0, ".", " ");
	
	$annee = $option['field_anneedata_value'];
	$nbUrban = count($dataAggl);
	$nbGeneratedLoad = number_format($nbGeneratedLoad, 0, ".", " ");
	$nbPhysicalCapacity = number_format($nbPhysicalCapacity, 0, ".", " ");
	
	return  "In ".$annee.", ".variable_get('siif_eru_country_name')." had ".$nbUrban." urban waste water agglomerations of more then 2 000 population equivalent (p.e).
			These agglomerations generated a total load of ".$nbGeneratedLoad." (p.e). ".$totalCollectingSystem." % of this load is connected to collecting systems and ".$totalIAS." % 
			addressed through Individual and Appropriate Systems (storage or septic tanks, micro-stations,...). These agglomerations are
			connected to ".$nbPrimaryTreatement." primary treatment plant, ".$nbSecondaryTreatement." secondary treatment plants and ".$nbOtherTreatement." more stringent treatment plants.
			All these treatment plants have a total design capacity of ".$nbPhysicalCapacity. " p.e. ";
}
//hook_wms_getlegend_alter
function uwwtd_wms_getlegend_alter(&$result, &$url){
    parse_str($url['query'], $params);
    if($result!='' && !$url["processed"]){
        if($url['host']=='maps.oieau.fr'){
            $result = '<div class="legend-label">'.t($params['LAYER']).'</div><div  class="legend-img">'.$result.'</div>';
            
        }
        elseif($url['host']=='bio.discomap.eea.europa.eu'){
            if($params['LAYER']=='8'){
                $result = '<div class="legend-label">'.t('Natura 2000').'</div><div  class="legend-img">'.$result.'</div>';
            }else{
                $result ='';
            }
           //krumo($result); 
        }
        elseif($url['host']=='water.discomap.eea.europa.eu'){
            if($params['LAYER']=='4'){
                $result = '<div class="legend-label">'.t('Bathing water').'</div><div  class="legend-img">'.$result.'</div>';
            }
            else{
                $result ='';
            }
        }
    }
    $url["processed"] = true;
}
//hook_wms_getfeatureinfo_alter
function uwwtd_wms_getfeatureinfo_alter(&$result, &$url){
    foreach($result as $layer=>$features){
        //Natura 2000
        if($url['host']=='bio.discomap.eea.europa.eu'){
            if($layer=='8'){
                $new_layer = t('Natura 2000');
                
                $data =array();
                $keys = array('SITECODE','SITENAME','MS','SITETYPE', 'RELEASE_DATE');
                foreach($features as $feature){
                    $data[] = array_intersect_key($feature, array_flip($keys));
                }
                $result[$new_layer] = $data;
                unset($result[$layer]);
            }
            elseif(is_numeric($layer)){
                unset($result[$layer]);
            }
        }
        
        elseif($url['host']=='water.discomap.eea.europa.eu'){
            //Bathing water : level 4
            if($layer=='4'  && $url['path']=='arcgis/services/BathingWater/BathingWater_Dyna_WM/MapServer/WMSServer'){
                $new_layer = t('Bathing water');
                $data =array();
                $keys = array('Bathingwatername','Country', 'Watertype', '2012', '2013', '2014', '2015', '2016', '2017', '2018','Linktobathingwaterprofile');
                foreach($features as $feature){
                    $item = array_intersect_key($feature, array_flip($keys));
                    if(isset($item['Linktobathingwaterprofile']) && $item['Linktobathingwaterprofile']!=''){
                        $item['Linktobathingwaterprofile'] = l("More information", $item['Linktobathingwaterprofile'], array('attributes'=>array('target'=>'_blank')));
                    }
                    $data[] = $item;
                }
                $result[$new_layer] = $data;
                unset($result[$layer]);
            }
            elseif($layer=='3' && $url['path']=='/arcgis/services/RiversLakesSoE/WISE_SoE_RL_Quality_SoEMonitoringStations_Dyna_WM/MapServer/WMSServer'){
                $new_layer =t("SoE Monitoring Stations");
                $keys = array("WaterCategory","CountryCode","CountryName","Waterbase_StationID","NationalStationID","NationalStationName","WFD_EU_CD","River_Lake_SeaRegion_Name","Surface_Ground_WaterBodyID","Surface_Ground_WaterBodyName","RBDcode","RBDname","RecordReported","Remarks");
                foreach($features as $feature){
                    $data[] = array_intersect_key($feature, array_flip($keys));
                }
                $result[$new_layer] = $data;
                unset($result[$layer]);
            }
            //Other bathing water levels
            elseif(is_numeric($layer)){
                //krumo($url);
                unset($result[$layer]);
            }
        }
        elseif($url['host']=='maps.oieau.fr'){
            //NUTS
            if(substr($layer, 0,4)=='NUTS'){
                $new_layer = t('Nomenclature des unités territoriales (NUTS)').' '.t('level').' '.substr($layer, -1);
                foreach($features as $feature){
                    $item = array(
                        "NUTS ID"=>$feature['NUTS_ID'],
                        "Level"=>$feature['STAT_LEVL_']
                    );
                    $data[] = $item;
                }
                $result[$new_layer] = $data;
                unset($result[$layer]);
            }
            elseif($layer=='RBD'){
                $new_layer =t("River Bassin Districts (RBD)");
                $keys = array("C_CD","EURBDCode","RBD_MS_CD","EUCD_RBD","RBDName","RBDNameNL","Internatio");
                foreach($features as $feature){
                    $data[] = array_intersect_key($feature, array_flip($keys));
                }
                $result[$new_layer] = $data;
                unset($result[$layer]);
            }
            elseif($layer=='RBDSU'){
                $new_layer =t("River Basin Districts Subunits (RBDSU)");
                $keys = array("C_CD","EURBDCode","RBD_MS_CD","EUCD_RBD","RBDName","RBDNameNL","EUSubUnitC","MS_SubUnit","SubUnitNam","SubUnitN_1","Internatio");
                foreach($features as $feature){
                    $data[] = array_intersect_key($feature, array_flip($keys));
                }
                $result[$new_layer] = $data;
                unset($result[$layer]);
            }
        }
    }
    
}