<?php
// Fonction pour definir le lien de menu
function uwwtd_menu(){
	$items = array();
	$items['data'] = array(
		'title' => t('Data management center'),
		'description' => t('A center to manage all the site data'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('uwwtd_data_form'),
		//'access callback' => TRUE,
		'access arguments' => array('Data-management access'),
		'file' => 'data_center.inc',
		'file path' => drupal_get_path('module', 'uwwtd')
		);
	$items['data/import'] = array(
		'title' => t('Data import'),
		'description' => t('Form to upload new data'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('uwwtd_import_form'),
		//'access callback' => TRUE,
		'access arguments' => array('Data-management access'),
		'file' => 'data_center.inc',
		'file path' => drupal_get_path('module', 'uwwtd')
		);
	$items['data/shapes'] = array(
		'title' => t('Receiving areas\' shapes upload'),
		'description' => t('Form to upload the receiving areas\' shapes'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('uwwtd_shapes_form'),
		//'access callback' => TRUE,
		'access arguments' => array('Data-management access'),
		'file' => 'data_center.inc',
		'file path' => drupal_get_path('module', 'uwwtd')
		);
	$items['data/check'] = array(
		'title' => t('Data checking process'),
		'description' => t('Process to check all the entered data for a given year'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('uwwtd_check_form'),
		//'access callback' => TRUE,
		'access arguments' => array('Data-management access'),
		'file' => 'data_center.inc',
		'file path' => drupal_get_path('module', 'uwwtd')
		);
	$items['data/conformity'] = array(
		'title' => t('Data conformity'),
		'description' => t('Data conformity page'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('uwwtd_conformity_form'),
		//'access callback' => TRUE,
		'access arguments' => array('Data-management access'),
		'file' => 'data_center.inc',
		'file path' => drupal_get_path('module', 'uwwtd')
		);
	$items['data/debug']=array(
		'title' => t('Data debug'),
		'page callback' => 'uwwtd_debug',
		//'page arguments' => array('uwwtd_debug_form'),
		//'access callback' => TRUE,
		'access arguments' => array('Data-management access'),
		'file' => 'data_center.inc',
		'file path' => drupal_get_path('module', 'uwwtd')
	);

	$items['id/%/%'] = array(
        'page callback' => 'uwwtd_node_redirect',
        'page arguments' => array(1,2),
        'access arguments' => true,
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
  $items['id/%/%/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['id/%/%/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'uwwtd_node_redirect',
    'page arguments' => array(1,2,3),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  
  //redirection treatment-plant
  $items['treatment-plant/%'] = array(
    'page callback' => 'uwwtd_node_redirection',
    'page arguments' => array(1),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );
  //redirection agglomeration
  $items['agglomeration/%'] = array(
    'page callback' => 'uwwtd_node_redirection',
    'page arguments' => array(1),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );
  //redirection receiving-area
  $items['receiving-area/%'] = array(
    'page callback' => 'uwwtd_node_redirection',
    'page arguments' => array(1),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );
  //redirection discharge-point
  $items['discharge-point/%'] = array(
    'page callback' => 'uwwtd_node_redirection',
    'page arguments' => array(1),
    'access callback' => true,
    'access arguments' => true,
    'type' => MENU_CALLBACK,
  );
    $items['report/pdf'] = array(
		'title' => t('PDF report'),
		'description' => t('Data conformity page'),
		'page callback' => 'uwwtd_make_pdf_report',
		//'page arguments' => array('uwwtd_conformity_form'),
		'access callback' => TRUE,
		//'access arguments' => array('Data-management access'),
		'file' => 'pdf.inc',
		'file path' => drupal_get_path('module', 'uwwtd')
	);
  $items['debug-create-xml/nid-agglo/%'] = array(
    'page callback' => 'debug_create_xml',
    'page arguments' => array(1,2),
//     'access callback' => true,
    'access arguments' => array('Data-management access'),
    'type' => MENU_CALLBACK,
	'file' => 'data_center.inc',
	'file path' => drupal_get_path('module', 'uwwtd')    
  );    
    
	return $items;
}

function uwwtd_node_redirect($annee, $id, $action = null){
	$query = db_select('field_data_field_siteid', 's');
	$query->fields('s', array('entity_id', 'field_siteid_value'));
	$query->condition('field_siteid_value', db_like($annee.'_'.$id), 'LIKE');

	$result = $query->execute();
	$node = false;
	while($record = $result->fetchAssoc()) {
		$node = node_load($record['entity_id']);
	}

	if($action == 'edit') {
		drupal_goto('node/' . $node->nid . '/edit');
	}

	if($node == false){
		drupal_set_message(t("The element you were searching for doesn't exist, sorry."), 'warning');
		drupal_goto('<front>');
	}
	else{
		drupal_set_title($node->title);
		return render(node_view($node, 'full'));
	}
}
//test
function uwwtd_node_redirection($id){
	$page_url = "http://".$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI']; 
	//echo "<pre>";print_r($_SERVER['REQUEST_URI']);echo "</pre>";
	$type= explode("/",$page_url);
	$type= $type[4];
	//echo "<pre>";print_r($type);echo "</pre>";
	
	if($type=='treatment-plant'){
		$typeR='uww';
		$id= strtolower($id);
	}
	if($type=='agglomeration'){
		$typeR='agg';
		$id= strtolower($id);
	}
	if($type=='receiving-area'){
		$typeR='rca';
		$id= strtolower($id);
	}
	if($type=='discharge-point'){
		$typeR='dcp';
		$id= strtolower($id);
	}
	//selectionne la dernière année
	$query = "SELECT MAX(field_anneedata_value) FROM {field_data_field_anneedata}";
	$result = db_query($query);
	$annee = $result->fetchField();
	
	$query = db_select('field_data_field_siteid', 's');
	$query->fields('s', array('entity_id', 'field_siteid_value'));
	$query->condition('field_siteid_value', db_like($annee.'_'.$typeR.'_'.$id), 'LIKE');
	$result = $query->execute();
	$record = $result->fetchAssoc();
	$node = false;
	
	if($record ==''){
		$query = db_select('field_data_field_siteid', 's');
		$query->fields('s', array('entity_id', 'field_siteid_value'));
		$query->condition('field_siteid_value',  db_like($annee.'_'.$id), '=');
		$result = $query->execute();
		$record = $result->fetchAssoc();
		$node=$record['entity_id'];
	}else{
		$node=$record['entity_id'];
	}
	if($node == false){
		drupal_set_message(t("The element you were searching for doesn't exist, sorry."), 'warning');
		drupal_goto('<front>');
	}
	else{
        drupal_goto($GLOBALS['base_url'] . '/'.$type.'/'.$id.'/'.$annee);
		drupal_set_title($node->title);
		//return render(node_view($node, 'full'));
	}
}

// function uwwtd_debug_form($form, &$form_state){
// 	// definition du champ input de type file
// 	$form['uwwtd_file'] = array(
// 		'#type' => 'managed_file',
// 		'#title' => t('Data file'),
// 		'#upload_validators' => array('file_validate_extensions' => array('shp')),
// 		'#required' => TRUE,
// 	);
// 	
// 	// Bouton envoyer
// 	$form['submit_button'] = array(
// 		'#type' => 'submit',
// 		'#value' => t('Submit'),
// 	);
// 	
// 	// Fonction a appeller quand on clique sur envoyer
// 	$form['#submit'][] = 'uwwtd_debug_submit_handler';
//     return $form;
// }

function uwwtd_views_pre_build(&$view){
	//dsm($view);
	if(
		$view->name == 'waste_water_network' || 
		$view->name == 'uwwtp_map' ||
		$view->name == 'uwwtp_treatment' ||
		$view->name == 'agglomeration' ||
		$view->name == 'agglomeration_conformity' ||
		$view->name == 'data_deletion'
	){
		$year = db_query(
			"SELECT MAX(field_anneedata_value) FROM {field_data_field_anneedata}"
		)->fetchField();
		if(!empty($year)) $view->filter['field_anneedata_value']->value = $year;
	}
}

function uwwtd_views_pre_render(&$view){
	//dsm($view);

	// if uwwtd treatment view
	if($view->name == 'uwwtp_treatment' && $view->result !== TRUE){
		foreach($view->result as $r => $result){
			//dsm($result);
		    //$view->result[$r]->field = 1;
		    if(isset($view->result[$r]->field_field_uwwprimarytreatment[0]['raw']['value'])){
		    	//dsm($view->result[$r]->field_field_uwwprimarytreatment[0]);
		    	if($view->result[$r]->field_field_uwwprimarytreatment[0]['raw']['value'] === '1') $view->result[$r]->field_field_uwwprimarytreatment[0]['rendered']['#markup'] = t('Yes');
		    	else $view->result[$r]->field_field_uwwprimarytreatment[0]['rendered']['#markup'] = t('No');
		    }
		    if(isset($view->result[$r]->field_field_uwwsecondarytreatment[0]['raw']['value'])){
		    	if($view->result[$r]->field_field_uwwsecondarytreatment[0]['raw']['value'] === '1') $view->result[$r]->field_field_uwwsecondarytreatment[0]['rendered']['#markup'] = t('Yes');
		    	else $view->result[$r]->field_field_uwwsecondarytreatment[0]['rendered']['#markup'] = t('No');
		    }
		    if(isset($view->result[$r]->field_field_uwwnremoval[0]['raw']['value'])){
		    	if($view->result[$r]->field_field_uwwnremoval[0]['raw']['value'] === '1') $view->result[$r]->field_field_uwwnremoval[0]['rendered']['#markup'] = t('Yes');
		    	else $view->result[$r]->field_field_uwwnremoval[0]['rendered']['#markup'] = t('No');
		    }
		    if(isset($view->result[$r]->field_field_uwwpremoval[0]['raw']['value'])){
		    	if($view->result[$r]->field_field_uwwpremoval[0]['raw']['value'] === '1') $view->result[$r]->field_field_uwwpremoval[0]['rendered']['#markup'] = t('Yes');
		    	else $view->result[$r]->field_field_uwwpremoval[0]['rendered']['#markup'] = t('No');
		    }
		} 
	}
}

function uwwtd_form_views_exposed_form_alter(&$form, &$form_state){
	//dsm($form);
		// for treatment plant booleans
		if($form['#id'] == "views-exposed-form-uwwtp-treatment-page"){
			$options = array(
				'All' => t('- All -'),
				'1' => t('Yes'),
				'0' => t('No')
			);

			$form['field_uwwprimarytreatment_value'] = array(
				'#type' => 'select',
				'#options' => $options
			);
			$form['field_uwwsecondarytreatment_value'] = array(
				'#type' => 'select',
				'#options' => $options
			);
			$form['field_uwwnremoval_value'] = array(
				'#type' => 'select',
				'#options' => $options
			);
			$form['field_uwwpremoval_value'] = array(
				'#type' => 'select',
				'#options' => $options
			);
		}

		if(
			$form['#id'] == "views-exposed-form-waste-water-network-page" || 
			$form['#id'] == 'views-exposed-form-uwwtp-map-page' ||
			$form['#id'] == 'views-exposed-form-waste-water-network-openlayers-1' ||
			$form['#id'] == 'views-exposed-form-waste-water-network-openlayers-2' ||
			$form['#id'] == 'views-exposed-form-waste-water-network-openlayers-3' ||
			$form['#id'] == 'views-exposed-form-uwwtp-treatment-page' ||
			$form['#id'] == 'views-exposed-form-uwwtp-treatment-openlayers-2' ||
			$form['#id'] == 'views-exposed-form-uwwtp-treatment-attachment-1' ||
			$form['#id'] == 'views-exposed-form-agglomeration-page' ||
			$form['#id'] == 'views-exposed-form-agglomeration-openlayers-1' ||
			$form['#id'] == 'views-exposed-form-agglomeration-conformity-page' ||
			$form['#id'] == 'views-exposed-form-agglomeration-conformity-openlayers-1' ||
			$form['#id'] == 'views-exposed-form-data-deletion-page'
		){

			// Get all available years
			$query = db_select('field_data_field_anneedata', 'a');
			$query->fields('a', array('field_anneedata_value'));
			$query->orderBy('field_anneedata_value', 'DESC');
			$results = $query->execute();
			$years = array();
			while($record = $results->fetchAssoc()) {
				$years[$record['field_anneedata_value']] = $record['field_anneedata_value'];
			}
			//dsm($years);

			//$form_state['input']['field_anneedata_value'] = '2010';
			$form['field_anneedata_value'] = array(
				'#type' => 'select',
				'#options' => $years,
				//'#default_value' => array('2000' => '2000'),
			);
		} 
    if(in_array($form['#id'], array("views-exposed-form-uwwtp-map-page"))){
		if(isset($form['field_physicalcapacityinput_value_op'])){
			$cap_op_options= $form['field_physicalcapacityinput_value_op']['#options'];
			unset($cap_op_options['between'], $cap_op_options['not between'], $cap_op_options['empty'], $cap_op_options['not empty']);
			$form['field_physicalcapacityinput_value_op']['#options'] = $cap_op_options;
		}
		if(isset($form['field_uwwnuts_value'])){
			$query = db_select('field_data_field_uwwnuts', 'nuts');
				$query->fields('nuts', array('field_uwwnuts_value'));
				$query->condition('deleted', 0,'=');
				$query->groupBy('nuts.field_uwwnuts_value');//GROUP BY user ID
			$result = $query->execute();
			$nuts_options=array();
			while($record = $result->fetchAssoc()) {
				//dsm($record);
				$nuts_options[$record['field_uwwnuts_value']]=$record['field_uwwnuts_value'];
			}
			
			$old = $form['field_uwwnuts_value'];
			//dsm($old);
			//dsm($form_state);
			$form['field_uwwnuts_value'] = array(
				'#type'=>'select',
				'#options'=>$nuts_options,
				'#default_value'=>$old['#default_value'],
				'#empty_value'=>'',
				'#empty_option'=>t('- All -')
			);
		}
	}
}

// function uwwtd_debug_submit_handler($form, &$form_state){
// 	//require_once ( dirname(__FILE__) . '/shpParser.php');
// 	require_once ( dirname(__FILE__) . '/ShapeFile.inc.php');
// 	$file = file_load($form_state['values']['uwwtd_file']);
// 	$uri = $file->uri;
// 	
// 	// On upload le file et la fonction renvoie le nouveau nom du fichier
// 	$ext = '.shp';
// 	$newFile = uwwtd_file_upload($file, $ext);
// 	$path = file_create_url($newFile->uri);
// 	$shp = new ShapeFile($path, array('noparts' => false));
// 	  $records = array();
// 		foreach($shp->records as $record){
// 		$dbf_data = $record->getDbfData();
// 		$shp_data = $record->getShpData();
// 
// 		//Dump the information
// 		$obj = array(
// 		  'type' => $shp->getShpTypeName($record->getShpType())
// 		);
// 
// 		$obj['shape'] = $shp_data;
// 		$obj['meta'] = $dbf_data;
// 
// 		$records[] = $obj;
// 	}
// 	dsm($records);
// }

/**
 * Extract an xml for only one agglo from a xml source
 */ 
function debug_create_xml($type, $value)
{
    if ($type != 'nid-agglo') {
        return '';
    }
//     echo '<pre>';var_export($type);echo '</pre>';
//     echo '<pre>';var_export($value);echo '</pre>';
//     exit;
    $agg = node_load($value);
    $xml = uwwtd_xml_to_array($agg->field_sourcefile['und'][0]['uri']);
    $currentCodeAgglo = $agg->field_inspireidlocalid['und'][0]['value'];
//     codeagglo in $agg->field_inspireidlocalid['und'][0]['value']
//     copier xml node /Reporter
//                     /ReportPeriod
//                     /Contacts
//                     /BigCityDischargers     
//     Agglomerations/Agglomeration/aggCode = codeagglo
//         copier l'agglo
//     UwwtpAgglos/UwwtpAgglo/aucAggCode =  codeagglo
//         copier UwwtpAgglo de l'agglo
//     UwwtpAgglos/UwwtpAgglo/aucUwwCode =  codeuwwtp
//         copier les uwwtp de l'agglo avec contenu de UwwtpAgglos
//     UWWTPs/UWWTP/uwwCode = codeuwwtp
//         !! copier toutes les agglo de ce uwwtp (et agglo et agglo_uwwtp) 
//     DischargePoints/DischargePoint/uwwID = codeuwwtp
//         copier les dcp de chaque uwwtp
//     DischargePoints/DischargePoint/rcaID = rcacode
//         copier les rca de chaque dcp
//     ReceivingAreas/ReceivingArea/rcaCode = rcacode
    $xmlTest = array();
    $xmlTest['UWWTD_Report']['Reporter'] = $xml['UWWTD_Report']['Reporter'];
    $xmlTest['UWWTD_Report']['ReportPeriod'] = $xml['UWWTD_Report']['ReportPeriod'];
    $xmlTest['UWWTD_Report']['Contacts'] = $xml['UWWTD_Report']['Contacts'];
    $xmlTest['UWWTD_Report']['BigCityDischargers'] = $xml['UWWTD_Report']['BigCityDischargers'];
    
    //AGGLO ======================================================
    if(isset($xml['UWWTD_Report']['Agglomerations']['Agglomeration']['aggCode'])){
        $imports[0] = $xml['UWWTD_Report']['Agglomerations']['Agglomeration'];
    }
    else{
        $imports = $xml['UWWTD_Report']['Agglomerations']['Agglomeration'];
    }
    $aggloFound = false;
    foreach($imports as $agglo) {
        if ($agglo['aggCode'] == $currentCodeAgglo) {
            $xmlTest['UWWTD_Report']['Agglomerations']['Agglomeration'][] = $agglo;
            $aggloFound = true;
            break; //only one agglo
        }
    }
//     echo '<pre>';var_export($xmlTest);echo '</pre>';
    if ($aggloFound == false) {
        return "error, can't find agglo in xml " . $currentCodeAgglo . "</br>";
    }
    //UwwtpAgglos for agglo ======================================================
    if(isset($xml['UWWTD_Report']['UwwtpAgglos']['UwwtpAgglo']['aucUwwCode'])){
        $imports[0] = $xml['UWWTD_Report']['UwwtpAgglos']['UwwtpAgglo'];
    }
    else{
        $imports = $xml['UWWTD_Report']['UwwtpAgglos']['UwwtpAgglo'];
    } 
    $uwwtd_aggloFound = false;
    foreach($imports as $uwwtp_agglo) {
        if ($uwwtp_agglo['aucAggCode'] == $currentCodeAgglo) {
            $xmlTest['UWWTD_Report']['UwwtpAgglos']['UwwtpAgglo'][] = $uwwtp_agglo;
            $uwwCode[] = $uwwtp_agglo['aucUwwCode'];  //list of uwwtp attach to the agglo
            $uwwtd_aggloFound = true;
        }
    }
    if ($uwwtd_aggloFound == false) {
        return "error, can't find buwwtd_agglo in xml for agglo " . $currentCodeAgglo . "</br>";
    }
// echo '<pre>';var_export($xmlTest);echo '</pre>';    
    //UwwtpAgglos for uwwtp======================================================
    foreach($imports as $uwwtp_agglo) {
        if (true === in_array($uwwtp_agglo['aucUwwCode'],$uwwCode) && $uwwtp_agglo['aucAggCode'] != $currentCodeAgglo) {
            $listeAgglo[] = $uwwtp_agglo['aucAggCode']; //all other agglo attach to the uwwtp (need for calculation)
            $xmlTest['UWWTD_Report']['UwwtpAgglos']['UwwtpAgglo'][] = $uwwtp_agglo;
        }
    }
// echo '<pre>';var_export($xmlTest);echo '</pre>';    
    
    //Agglo for uwwtp======================================================
    if (true === isset($listeAgglo)) {
        if(isset($xml['UWWTD_Report']['Agglomerations']['Agglomeration']['aggCode'])){
            $imports[0] = $xml['UWWTD_Report']['Agglomerations']['Agglomeration'];
        }
        else{
            $imports = $xml['UWWTD_Report']['Agglomerations']['Agglomeration'];
        }
        $bAggloFound = false;
        foreach($imports as $agglo) {
            if (true === in_array($agglo['aggCode'], $listeAgglo)) {
                $xmlTest['UWWTD_Report']['Agglomerations']['Agglomeration'][] = $agglo;
                $bAggloFound = true;
            }
        }
        if ($bAggloFound == false) {
            return "error, can't find agglo attach to uwwtp in xml " . implode(',', $listeAgglo) . "</br>";
        } 
    }    
    
    //uwwtp======================================================
    if(isset($xml['UWWTD_Report']['UWWTPs']['UWWTP']['uwwCode'])){
        $imports[0] = $xml['UWWTD_Report']['UWWTPs']['UWWTP'];
    }
    else{
        $imports = $xml['UWWTD_Report']['UWWTPs']['UWWTP'];
    } 
    $buwwtpFound = false;
    foreach($imports as $uwwtp) {
        if (true === in_array($uwwtp['uwwCode'],$uwwCode)) {
            $xmlTest['UWWTD_Report']['UWWTPs']['UWWTP'][] = $uwwtp;
            $buwwtpFound = true;
        }
    }
    if ($buwwtpFound == false) {
        return "error, can't find uwwtp in xml  " . implode(',', $uwwCode) . "</br>";
    } 
    
    //DischargePoints/DischargePoint/uwwID = codeuwwtp ======================================================
    if(isset($xml['UWWTD_Report']['DischargePoints']['DischargePoint']['dcpCode'])){
        $imports[0] = $xml['UWWTD_Report']['DischargePoints']['DischargePoint'];
    }
    else{
        $imports = $xml['UWWTD_Report']['DischargePoints']['DischargePoint'];
    } 
    $bdcpFound = false;
    foreach($imports as $dcp) {
        if (true === in_array($dcp['uwwID'],$uwwCode)) {
            $xmlTest['UWWTD_Report']['DischargePoints']['DischargePoint'][] = $dcp;
            $rcaCode[] = $dcp['rcaID'];
            $bdcpFound = true;
        }
    }
    if ($bdcpFound == false) {
        return "error, can't find dcp in xml for uwwtp " . implode(',', $uwwCode) . "</br>";
    } 
    //RCA====================================================== 
    if(isset($xml['UWWTD_Report']['ReceivingAreas']['ReceivingArea']['rcaCode'])){
        $imports[0] = $xml['UWWTD_Report']['ReceivingAreas']['ReceivingArea'];
    }
    else{
        $imports = $xml['UWWTD_Report']['ReceivingAreas']['ReceivingArea'];
    }   
    
    $brcaFound = false;
    foreach($imports as $rca) {
        if (true === in_array($rca['rcaCode'],$rcaCode)) {
            $xmlTest['UWWTD_Report']['ReceivingAreas']['ReceivingArea'][] = $rca;
            $brcaFound = true;
        }
    }
    if ($brcaFound == false) {
        return "error, can't find rca in xml for rca " . implode(',', $rcaCode) . "</br>";
    }
    
    //CREATE XML======================================================
//     echo '<pre>';var_export($xmlTest);echo '</pre>';
//     exit;
    $s = '<'.'?xml version="1.0" encoding="UTF-8"?'.'>
<UWWTD_Data xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xsi:noNamespaceSchemaLocation="http://water.eionet.europa.eu/schemas/dir91271eec/UWWTD2011.xsd">

';
   
    $s .= uwwtd_debug_create_tag_from_array($xmlTest, '');
    
    $s .= '

</UWWTD_Data>';
//     echo '<pre>';var_export($s);echo '</pre>';
//     exit;
    ini_set("auto_detect_line_endings", false); //for Mac user    
    $aHeaders = array(
          'Content-Type'        => 'text/xml',   
          'Content-Disposition' => 'attachment; filename="agglo'.$value.'.xml' . '"',
          'Expires'             => '0',
          'Cache-Control'       => 'must-revalidate',
          'Pragma'              =>'public',
//           'Content-Length'      => mb_strlen($filename),
      );            
    foreach ($aHeaders as $sName => $sValue) {
        drupal_add_http_header($sName, $sValue);
    }
    echo $s; 
    exit();      
}              

//TODO better !! 
function uwwtd_debug_create_tag_from_array($array, $parentkey)
{
//     echo '<pre>';var_export('uwwtd_debug_create_tag_from_array');echo '</pre>';
    if (false === is_array($array)) {
//         echo '<pre>';var_export('not array');echo '</pre>';
        return $array;
    }
    $s = '';  
//     if (true === isset($array[0]) && $parentkey != '') {
// //         echo '<pre>';var_export('$bListOfXmlElement true');echo '</pre>';
//         $bListOfXmlElement = true;
//     } else {
// //         echo '<pre>';var_export('$bListOfXmlElement false');echo '</pre>';
//         $bListOfXmlElement = false;
//     }  
//     echo '<pre>';var_export($array);echo '</pre>';
    foreach($array as $key => $value) {
//         echo '<pre>';var_export("$key");echo '</pre>';
        if (true === is_int($key)) {
//             echo '<pre>';var_export('$bListOfXmlElement is true ' . $parentkey);echo '</pre>';
            $s .= '<'.$parentkey.'>';
//             echo '<pre>';var_export('write parent');echo '</pre>';
        }elseif (false === is_array($value) || false === isset($value[0])) {
//             echo '<pre>';var_export('not int and not isset array[0] ' . $key);echo '</pre>';
            $s .= '<'.$key.'>';
//             echo '<pre>';var_export('write tag');echo '</pre>';
        }
        
        $s .= uwwtd_debug_create_tag_from_array($value, $key);

        if (true === is_int($key)) {
//             echo '<pre>';var_export('$bListOfXmlElement is true / ' . $parentkey);echo '</pre>';
            $s .= '</'.$parentkey.'>';
        }elseif (false === is_array($value) || false === isset($value[0])) {
//             echo '<pre>';var_export('not int and not isset array[0] / ' . $key);echo '</pre>';
            $s .= '</'.$key.'>';    
        }               
        $s .= "\n";
    }    
    return $s;
} 

function uwwtd_debug(){
    return '';
//     $node = node_load(171466);
//     echo '<pre>';var_export(uwwtd_get_all_info_agguwww($node));echo '</pre>';                                               
    return 'debug';                                                
}

// permission to view data pages
function uwwtd_permission() {
  return array(
    'Data-management access' => array(
      'title' => t('Access to the data management pages'),
    )
  );
}

function uwwtd_cron(){
    $lastGen = variable_get('uwwtd_wfs_table', 0);
	if((time() - $lastGen) > (60*60*24)){
	// Requires postgres for DROP TABLE IF
	db_query('DROP TABLE IF EXISTS wfs."UWWTD_UrbanWasteWaterTreatmentPlant";
	CREATE TABLE wfs."UWWTD_UrbanWasteWaterTreatmentPlant"
        AS SELECT * from public."UWWTD_UrbanWasteWaterTreatmentPlant";
	ALTER TABLE wfs."UWWTD_UrbanWasteWaterTreatmentPlant"
	ADD PRIMARY KEY ("siteId");

	DROP TABLE IF EXISTS wfs."UWWTD_Agglomeration";
	CREATE TABLE wfs."UWWTD_Agglomeration"
        AS SELECT * from public."UWWTD_Agglomeration";
	ALTER TABLE wfs."UWWTD_Agglomeration"
	ADD PRIMARY KEY ("siteId");

	DROP TABLE IF EXISTS wfs."UWWTD_ReceivingArea";
	CREATE TABLE wfs."UWWTD_ReceivingArea"
        AS SELECT * from public."UWWTD_ReceivingArea";
	ALTER TABLE wfs."UWWTD_ReceivingArea"
	ADD PRIMARY KEY ("siteId");

	DROP TABLE IF EXISTS wfs."UWWTD_BigCity";
	CREATE TABLE wfs."UWWTD_BigCity"
        AS SELECT * from public."UWWTD_BigCity";
	ALTER TABLE wfs."UWWTD_BigCity"
	ADD PRIMARY KEY ("siteId");

	DROP TABLE IF EXISTS wfs."UWWTD_Compliance_Agglo";
	CREATE TABLE wfs."UWWTD_Compliance_Agglo"
        AS SELECT * from public."UWWTD_Compliance_Agglo";
	ALTER TABLE wfs."UWWTD_Compliance_Agglo"
	ADD PRIMARY KEY ("siteId");

	DROP TABLE IF EXISTS wfs."UWWTD_Compliance_UWWTP";
	CREATE TABLE wfs."UWWTD_Compliance_UWWTP"
        AS SELECT * from public."UWWTD_Compliance_UWWTP";
	ALTER TABLE wfs."UWWTD_Compliance_UWWTP"
	ADD PRIMARY KEY ("siteId");

	DROP TABLE IF EXISTS wfs."UWWTD_DischargePoint";
	CREATE TABLE wfs."UWWTD_DischargePoint"
        AS SELECT * from public."UWWTD_DischargePoint";
	ALTER TABLE wfs."UWWTD_DischargePoint"
	ADD PRIMARY KEY ("siteId"); 

	DROP TABLE IF EXISTS wfs."UWWTD_UWWTPs_Agglo";
	CREATE TABLE wfs."UWWTD_UWWTPs_Agglo"
        AS SELECT * from public."UWWTD_UWWTPs_Agglo";
	ALTER TABLE wfs."UWWTD_UWWTPs_Agglo"
	ADD PRIMARY KEY ("uwwSiteId", "aggSiteId");');
        
    	variable_set('uwwtd_wfs_table', time());
	}
}



//=============================Fonction de gestion des erreurs de l'import======================
function uwwtd_errors_get_category($cat=null){
    $categories = array(
        0=>'Input',
        1=>'Linking',
        2=>'Geometry',
        3=>'Conformity',
        4=>'Format',
    );
    if($cat){
        if(isset($categories[$cat])) return $categories[$cat];
        else return false;
    }
    else return $categories;
}
function uwwtd_errors_get_types($type=null){
    $types = array(
        0=>'Notification',
        1=>'Warning',
        2=>'Error',
    );
    if($type){
        if(isset($types[$type])) return $types[$type];
        else return false;
    }
    else return $types;
}
//=========================TODO for gettings error with an entity_id & entity_type 
function uwwtd_errors_get_errors($entity_id, $entity_type){
    $errors = array();
    
    //TODO db_select();
    
    return $errors;
}

